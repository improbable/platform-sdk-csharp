// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/improbable/spatialos/playerauth/v2alpha1/player_auth.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Improbable.SpatialOS.PlayerAuth.V2Alpha1 {

  /// <summary>Holder for reflection information generated from proto/improbable/spatialos/playerauth/v2alpha1/player_auth.proto</summary>
  public static partial class PlayerAuthReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/improbable/spatialos/playerauth/v2alpha1/player_auth.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlayerAuthReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CkBwcm90by9pbXByb2JhYmxlL3NwYXRpYWxvcy9wbGF5ZXJhdXRoL3YyYWxw",
            "aGExL3BsYXllcl9hdXRoLnByb3RvEihpbXByb2JhYmxlLnNwYXRpYWxvcy5w",
            "bGF5ZXJhdXRoLnYyYWxwaGExGh5nb29nbGUvcHJvdG9idWYvZHVyYXRpb24u",
            "cHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aNmdpdGh1",
            "Yi5jb20vbXdpdGtvdy9nby1wcm90by12YWxpZGF0b3JzL3ZhbGlkYXRvci5w",
            "cm90byK7AQoXQ3JlYXRlTG9naW5Ub2tlblJlcXVlc3QSHQoVcGxheWVyX2lk",
            "ZW50aXR5X3Rva2VuGAEgASgJEhUKDWRlcGxveW1lbnRfaWQYAiABKAkSNAoR",
            "bGlmZXRpbWVfZHVyYXRpb24YAyABKAsyGS5nb29nbGUucHJvdG9idWYuRHVy",
            "YXRpb24SNAoLd29ya2VyX3R5cGUYBCABKAlCH+LfHxsKGV4kfF5bYS16QS1a",
            "MC05Xy1dezMsMTI4fSQiLwoYQ3JlYXRlTG9naW5Ub2tlblJlc3BvbnNlEhMK",
            "C2xvZ2luX3Rva2VuGAEgASgJIuwBCiBDcmVhdGVQbGF5ZXJJZGVudGl0eVRv",
            "a2VuUmVxdWVzdBIYCghwcm92aWRlchgBIAEoCUIG4t8fAlgBEiEKEXBsYXll",
            "cl9pZGVudGlmaWVyGAIgASgJQgbi3x8CWAESLQoMcHJvamVjdF9uYW1lGAMg",
            "ASgJQhfi3x8TChFeW2EtejAtOV9dezMsMzJ9JBI0ChFsaWZldGltZV9kdXJh",
            "dGlvbhgEIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhIUCgxkaXNw",
            "bGF5X25hbWUYBSABKAkSEAoIbWV0YWRhdGEYBiABKAwiQgohQ3JlYXRlUGxh",
            "eWVySWRlbnRpdHlUb2tlblJlc3BvbnNlEh0KFXBsYXllcl9pZGVudGl0eV90",
            "b2tlbhgBIAEoCSJJCiBEZWNvZGVQbGF5ZXJJZGVudGl0eVRva2VuUmVxdWVz",
            "dBIlChVwbGF5ZXJfaWRlbnRpdHlfdG9rZW4YASABKAlCBuLfHwJYASKJAQoh",
            "RGVjb2RlUGxheWVySWRlbnRpdHlUb2tlblJlc3BvbnNlEmQKFXBsYXllcl9p",
            "ZGVudGl0eV90b2tlbhgBIAEoCzI9LmltcHJvYmFibGUuc3BhdGlhbG9zLnBs",
            "YXllcmF1dGgudjJhbHBoYTEuUGxheWVySWRlbnRpdHlUb2tlbkIG4t8fAiAB",
            "IqECChNQbGF5ZXJJZGVudGl0eVRva2VuEhcKCHByb3ZpZGVyGAEgASgJUgVw",
            "cnZkchIeChFwbGF5ZXJfaWRlbnRpZmllchgCIAEoCVIDc3ViEjIKDHByb2pl",
            "Y3RfbmFtZRgDIAEoCUIX4t8fEwoRXlthLXowLTlfXXszLDMyfSRSA3ByahIY",
            "CgxkaXNwbGF5X25hbWUYBSABKAlSAmRuEhQKCG1ldGFkYXRhGAYgASgMUgJt",
            "ZBI3Cg5pc3N1ZWRfYXRfdGltZRgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXBSA2lhdBI0CgtleHBpcnlfdGltZRgIIAEoCzIaLmdvb2dsZS5w",
            "cm90b2J1Zi5UaW1lc3RhbXBSA2V4cDKjBAoRUGxheWVyQXV0aFNlcnZpY2US",
            "mwEKEENyZWF0ZUxvZ2luVG9rZW4SQS5pbXByb2JhYmxlLnNwYXRpYWxvcy5w",
            "bGF5ZXJhdXRoLnYyYWxwaGExLkNyZWF0ZUxvZ2luVG9rZW5SZXF1ZXN0GkIu",
            "aW1wcm9iYWJsZS5zcGF0aWFsb3MucGxheWVyYXV0aC52MmFscGhhMS5DcmVh",
            "dGVMb2dpblRva2VuUmVzcG9uc2UiABK2AQoZQ3JlYXRlUGxheWVySWRlbnRp",
            "dHlUb2tlbhJKLmltcHJvYmFibGUuc3BhdGlhbG9zLnBsYXllcmF1dGgudjJh",
            "bHBoYTEuQ3JlYXRlUGxheWVySWRlbnRpdHlUb2tlblJlcXVlc3QaSy5pbXBy",
            "b2JhYmxlLnNwYXRpYWxvcy5wbGF5ZXJhdXRoLnYyYWxwaGExLkNyZWF0ZVBs",
            "YXllcklkZW50aXR5VG9rZW5SZXNwb25zZSIAErYBChlEZWNvZGVQbGF5ZXJJ",
            "ZGVudGl0eVRva2VuEkouaW1wcm9iYWJsZS5zcGF0aWFsb3MucGxheWVyYXV0",
            "aC52MmFscGhhMS5EZWNvZGVQbGF5ZXJJZGVudGl0eVRva2VuUmVxdWVzdBpL",
            "LmltcHJvYmFibGUuc3BhdGlhbG9zLnBsYXllcmF1dGgudjJhbHBoYTEuRGVj",
            "b2RlUGxheWVySWRlbnRpdHlUb2tlblJlc3BvbnNlIgBCYFozaW1wcm9iYWJs",
            "ZS9zcGF0aWFsb3MvcGxheWVyYXV0aC92MmFscGhhMTtwbGF5ZXJhdXRoqgIo",
            "SW1wcm9iYWJsZS5TcGF0aWFsT1MuUGxheWVyQXV0aC5WMkFscGhhMWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Validator.ValidatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.CreateLoginTokenRequest), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.CreateLoginTokenRequest.Parser, new[]{ "PlayerIdentityToken", "DeploymentId", "LifetimeDuration", "WorkerType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.CreateLoginTokenResponse), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.CreateLoginTokenResponse.Parser, new[]{ "LoginToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.CreatePlayerIdentityTokenRequest), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.CreatePlayerIdentityTokenRequest.Parser, new[]{ "Provider", "PlayerIdentifier", "ProjectName", "LifetimeDuration", "DisplayName", "Metadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.CreatePlayerIdentityTokenResponse), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.CreatePlayerIdentityTokenResponse.Parser, new[]{ "PlayerIdentityToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DecodePlayerIdentityTokenRequest), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DecodePlayerIdentityTokenRequest.Parser, new[]{ "PlayerIdentityToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DecodePlayerIdentityTokenResponse), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DecodePlayerIdentityTokenResponse.Parser, new[]{ "PlayerIdentityToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerIdentityToken), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerIdentityToken.Parser, new[]{ "Provider", "PlayerIdentifier", "ProjectName", "DisplayName", "Metadata", "IssuedAtTime", "ExpiryTime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The following fields are mandatory:
  /// - `player_identity_token`
  /// - `deployment_id`
  ///
  /// The remaining fields are optional:
  ///  - `lifetime_duration`. If provided, this must be a positive duration. If omitted,
  ///    the default value of 15 minutes is used.
  /// </summary>
  public sealed partial class CreateLoginTokenRequest : pb::IMessage<CreateLoginTokenRequest> {
    private static readonly pb::MessageParser<CreateLoginTokenRequest> _parser = new pb::MessageParser<CreateLoginTokenRequest>(() => new CreateLoginTokenRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateLoginTokenRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerAuthReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateLoginTokenRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateLoginTokenRequest(CreateLoginTokenRequest other) : this() {
      playerIdentityToken_ = other.playerIdentityToken_;
      deploymentId_ = other.deploymentId_;
      LifetimeDuration = other.lifetimeDuration_ != null ? other.LifetimeDuration.Clone() : null;
      workerType_ = other.workerType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateLoginTokenRequest Clone() {
      return new CreateLoginTokenRequest(this);
    }

    /// <summary>Field number for the "player_identity_token" field.</summary>
    public const int PlayerIdentityTokenFieldNumber = 1;
    private string playerIdentityToken_ = "";
    /// <summary>
    /// The player_identity_token is the JWT token returned by the PlayerIdentityTokenService.CreatePlayerIdentityToken RPC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerIdentityToken {
      get { return playerIdentityToken_; }
      set {
        playerIdentityToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deployment_id" field.</summary>
    public const int DeploymentIdFieldNumber = 2;
    private string deploymentId_ = "";
    /// <summary>
    /// The UUID of the deployment that the user will get access to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeploymentId {
      get { return deploymentId_; }
      set {
        deploymentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lifetime_duration" field.</summary>
    public const int LifetimeDurationFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Duration lifetimeDuration_;
    /// <summary>
    /// Specifies how long the LT will be valid for.
    ///
    /// This field is optional. When unspecified, this will default to 15 minutes (maximum value is 30 minutes).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration LifetimeDuration {
      get { return lifetimeDuration_; }
      set {
        lifetimeDuration_ = value;
      }
    }

    /// <summary>Field number for the "worker_type" field.</summary>
    public const int WorkerTypeFieldNumber = 4;
    private string workerType_ = "";
    /// <summary>
    /// The worker type that the user will be allowed to connect to the deployment as.
    ///
    /// This field is optional - empty string is allowed by validator. If not specified, the worker type provided by
    /// Worker SDK when connecting to the deployment will be used. This regular expression needs to be kept compatible with
    /// the regex located on the worker_type field in proto/improbable/ext/cli/project/project_configuration.proto.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkerType {
      get { return workerType_; }
      set {
        workerType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateLoginTokenRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateLoginTokenRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerIdentityToken != other.PlayerIdentityToken) return false;
      if (DeploymentId != other.DeploymentId) return false;
      if (!object.Equals(LifetimeDuration, other.LifetimeDuration)) return false;
      if (WorkerType != other.WorkerType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerIdentityToken.Length != 0) hash ^= PlayerIdentityToken.GetHashCode();
      if (DeploymentId.Length != 0) hash ^= DeploymentId.GetHashCode();
      if (lifetimeDuration_ != null) hash ^= LifetimeDuration.GetHashCode();
      if (WorkerType.Length != 0) hash ^= WorkerType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerIdentityToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerIdentityToken);
      }
      if (DeploymentId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeploymentId);
      }
      if (lifetimeDuration_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LifetimeDuration);
      }
      if (WorkerType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WorkerType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerIdentityToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerIdentityToken);
      }
      if (DeploymentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeploymentId);
      }
      if (lifetimeDuration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LifetimeDuration);
      }
      if (WorkerType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkerType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateLoginTokenRequest other) {
      if (other == null) {
        return;
      }
      if (other.PlayerIdentityToken.Length != 0) {
        PlayerIdentityToken = other.PlayerIdentityToken;
      }
      if (other.DeploymentId.Length != 0) {
        DeploymentId = other.DeploymentId;
      }
      if (other.lifetimeDuration_ != null) {
        if (lifetimeDuration_ == null) {
          lifetimeDuration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        LifetimeDuration.MergeFrom(other.LifetimeDuration);
      }
      if (other.WorkerType.Length != 0) {
        WorkerType = other.WorkerType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlayerIdentityToken = input.ReadString();
            break;
          }
          case 18: {
            DeploymentId = input.ReadString();
            break;
          }
          case 26: {
            if (lifetimeDuration_ == null) {
              lifetimeDuration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(lifetimeDuration_);
            break;
          }
          case 34: {
            WorkerType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateLoginTokenResponse : pb::IMessage<CreateLoginTokenResponse> {
    private static readonly pb::MessageParser<CreateLoginTokenResponse> _parser = new pb::MessageParser<CreateLoginTokenResponse>(() => new CreateLoginTokenResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateLoginTokenResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerAuthReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateLoginTokenResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateLoginTokenResponse(CreateLoginTokenResponse other) : this() {
      loginToken_ = other.loginToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateLoginTokenResponse Clone() {
      return new CreateLoginTokenResponse(this);
    }

    /// <summary>Field number for the "login_token" field.</summary>
    public const int LoginTokenFieldNumber = 1;
    private string loginToken_ = "";
    /// <summary>
    /// The login_token is a short lived token (up to 15 minutes), allowing the user to log in to a deployment with the specified name.
    /// It is a signed JWT with the following claims:
    /// sub:     provider-scoped unique user ID. Corresponds to the player_identifier supplied in CreatePlayerIdentityTokenRequest.
    /// prvdr:   describes system used to authenticate the user. Corresponds to provider in CreatePlayerIdentityTokenRequest.
    /// prj:     project that the token is scoped to.
    /// dpl:     deployment UUID that the token gives access to.
    /// iat:     issued at time is the time at which the token was issued This is the time since epoch in seconds in UTC.
    /// exp:     expiry time. This is the time since epoch in seconds in UTC.
    /// wkt:     worker type: This is the worker type that the user will be allowed to connect to the deployment as.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginToken {
      get { return loginToken_; }
      set {
        loginToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateLoginTokenResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateLoginTokenResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LoginToken != other.LoginToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LoginToken.Length != 0) hash ^= LoginToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LoginToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LoginToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LoginToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateLoginTokenResponse other) {
      if (other == null) {
        return;
      }
      if (other.LoginToken.Length != 0) {
        LoginToken = other.LoginToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LoginToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The following fields are mandatory:
  /// - `provider`
  /// - `player_identifier`
  /// - `project_name`
  ///
  /// The remaining fields are optional:
  /// - `lifetime_duration`. If provided, this must be a positive duration,
  ///   less than or equal to 24.
  /// - `metadata`. If provided, this must be less than or equal to 256 bytes.
  /// </summary>
  public sealed partial class CreatePlayerIdentityTokenRequest : pb::IMessage<CreatePlayerIdentityTokenRequest> {
    private static readonly pb::MessageParser<CreatePlayerIdentityTokenRequest> _parser = new pb::MessageParser<CreatePlayerIdentityTokenRequest>(() => new CreatePlayerIdentityTokenRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatePlayerIdentityTokenRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerAuthReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePlayerIdentityTokenRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePlayerIdentityTokenRequest(CreatePlayerIdentityTokenRequest other) : this() {
      provider_ = other.provider_;
      playerIdentifier_ = other.playerIdentifier_;
      projectName_ = other.projectName_;
      LifetimeDuration = other.lifetimeDuration_ != null ? other.LifetimeDuration.Clone() : null;
      displayName_ = other.displayName_;
      metadata_ = other.metadata_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePlayerIdentityTokenRequest Clone() {
      return new CreatePlayerIdentityTokenRequest(this);
    }

    /// <summary>Field number for the "provider" field.</summary>
    public const int ProviderFieldNumber = 1;
    private string provider_ = "";
    /// <summary>
    /// The system used to authenticate the player with e.g. Steam, Google
    /// A provider name containing 'improbable' (case insensitive) will not be accepted as this is reserved for internal use.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Provider {
      get { return provider_; }
      set {
        provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_identifier" field.</summary>
    public const int PlayerIdentifierFieldNumber = 2;
    private string playerIdentifier_ = "";
    /// <summary>
    /// The ID of the player for which we are generating a PIT.
    ///
    /// This should uniquely identify a user in the specified provider.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerIdentifier {
      get { return playerIdentifier_; }
      set {
        playerIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "project_name" field.</summary>
    public const int ProjectNameFieldNumber = 3;
    private string projectName_ = "";
    /// <summary>
    /// The project that the PIT is scoped to.
    /// This should be between 3 and 32 characters and made up of lower case letters, numbers and underscores only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lifetime_duration" field.</summary>
    public const int LifetimeDurationFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Duration lifetimeDuration_;
    /// <summary>
    /// The duration for which the issued PIT will be valid.
    ///
    /// It must be set to less than 24 hours.
    ///
    /// This field is optional. If unset or 0, it defaults to 24 hours.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration LifetimeDuration {
      get { return lifetimeDuration_; }
      set {
        lifetimeDuration_ = value;
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 5;
    private string displayName_ = "";
    /// <summary>
    /// The player's display name. This field is optional.
    ///
    /// The display name is controlled by the caller and may contain personal information. It should not be stored or logged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 6;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    /// <summary>
    /// Additional metadata that is stored within the PIT.
    ///
    /// You can use this to securely attach extra attributes on the PIT in a format you choose.
    /// eg: JSON payload: bytes("{ 'userType': 'PREMIUM', 'region': 'EU' }")
    /// It must use less than or equal to 256 bytes.
    /// Exceeding this limitation will result in an `InvalidArgument` error.
    ///
    /// This field is optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatePlayerIdentityTokenRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatePlayerIdentityTokenRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Provider != other.Provider) return false;
      if (PlayerIdentifier != other.PlayerIdentifier) return false;
      if (ProjectName != other.ProjectName) return false;
      if (!object.Equals(LifetimeDuration, other.LifetimeDuration)) return false;
      if (DisplayName != other.DisplayName) return false;
      if (Metadata != other.Metadata) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Provider.Length != 0) hash ^= Provider.GetHashCode();
      if (PlayerIdentifier.Length != 0) hash ^= PlayerIdentifier.GetHashCode();
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (lifetimeDuration_ != null) hash ^= LifetimeDuration.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Provider.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Provider);
      }
      if (PlayerIdentifier.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerIdentifier);
      }
      if (ProjectName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProjectName);
      }
      if (lifetimeDuration_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LifetimeDuration);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DisplayName);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Metadata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Provider.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Provider);
      }
      if (PlayerIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerIdentifier);
      }
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (lifetimeDuration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LifetimeDuration);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatePlayerIdentityTokenRequest other) {
      if (other == null) {
        return;
      }
      if (other.Provider.Length != 0) {
        Provider = other.Provider;
      }
      if (other.PlayerIdentifier.Length != 0) {
        PlayerIdentifier = other.PlayerIdentifier;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.lifetimeDuration_ != null) {
        if (lifetimeDuration_ == null) {
          lifetimeDuration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        LifetimeDuration.MergeFrom(other.LifetimeDuration);
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Provider = input.ReadString();
            break;
          }
          case 18: {
            PlayerIdentifier = input.ReadString();
            break;
          }
          case 26: {
            ProjectName = input.ReadString();
            break;
          }
          case 34: {
            if (lifetimeDuration_ == null) {
              lifetimeDuration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(lifetimeDuration_);
            break;
          }
          case 42: {
            DisplayName = input.ReadString();
            break;
          }
          case 50: {
            Metadata = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreatePlayerIdentityTokenResponse : pb::IMessage<CreatePlayerIdentityTokenResponse> {
    private static readonly pb::MessageParser<CreatePlayerIdentityTokenResponse> _parser = new pb::MessageParser<CreatePlayerIdentityTokenResponse>(() => new CreatePlayerIdentityTokenResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatePlayerIdentityTokenResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerAuthReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePlayerIdentityTokenResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePlayerIdentityTokenResponse(CreatePlayerIdentityTokenResponse other) : this() {
      playerIdentityToken_ = other.playerIdentityToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePlayerIdentityTokenResponse Clone() {
      return new CreatePlayerIdentityTokenResponse(this);
    }

    /// <summary>Field number for the "player_identity_token" field.</summary>
    public const int PlayerIdentityTokenFieldNumber = 1;
    private string playerIdentityToken_ = "";
    /// <summary>
    /// The player_identity_token is a long lived token (up to 24h) which guarantees a user's identity in the context of a project
    ///
    /// It is a signed JWT with the following payload:
    /// sub:     provider-scoped unique user ID. Corresponds to the player_identifier supplied in CreatePlayerIdentityTokenRequest.
    /// prvdr:   describes system used to authenticate the user. Corresponds to provider in CreatePlayerIdentityTokenRequest.
    /// prj:     project that the PIT is scoped to.
    /// md:      metadata. Corresponds to md in CreatePlayerIdentityTokenRequest.
    /// iat:     issued at time. This is the time since epoch in seconds in UTC.
    /// exp:     expiry time. This is the time since epoch in seconds in UTC.
    /// dn:      display name. This is an optional user provided string, corresponding to display name in the CreatePlayerIdentityRequest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerIdentityToken {
      get { return playerIdentityToken_; }
      set {
        playerIdentityToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatePlayerIdentityTokenResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatePlayerIdentityTokenResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerIdentityToken != other.PlayerIdentityToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerIdentityToken.Length != 0) hash ^= PlayerIdentityToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerIdentityToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerIdentityToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerIdentityToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerIdentityToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatePlayerIdentityTokenResponse other) {
      if (other == null) {
        return;
      }
      if (other.PlayerIdentityToken.Length != 0) {
        PlayerIdentityToken = other.PlayerIdentityToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlayerIdentityToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The following fields are mandatory:
  /// - `player_identity_token`
  /// </summary>
  public sealed partial class DecodePlayerIdentityTokenRequest : pb::IMessage<DecodePlayerIdentityTokenRequest> {
    private static readonly pb::MessageParser<DecodePlayerIdentityTokenRequest> _parser = new pb::MessageParser<DecodePlayerIdentityTokenRequest>(() => new DecodePlayerIdentityTokenRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecodePlayerIdentityTokenRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerAuthReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodePlayerIdentityTokenRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodePlayerIdentityTokenRequest(DecodePlayerIdentityTokenRequest other) : this() {
      playerIdentityToken_ = other.playerIdentityToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodePlayerIdentityTokenRequest Clone() {
      return new DecodePlayerIdentityTokenRequest(this);
    }

    /// <summary>Field number for the "player_identity_token" field.</summary>
    public const int PlayerIdentityTokenFieldNumber = 1;
    private string playerIdentityToken_ = "";
    /// <summary>
    /// The PIT that was issued to the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerIdentityToken {
      get { return playerIdentityToken_; }
      set {
        playerIdentityToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecodePlayerIdentityTokenRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecodePlayerIdentityTokenRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerIdentityToken != other.PlayerIdentityToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerIdentityToken.Length != 0) hash ^= PlayerIdentityToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerIdentityToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerIdentityToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerIdentityToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerIdentityToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecodePlayerIdentityTokenRequest other) {
      if (other == null) {
        return;
      }
      if (other.PlayerIdentityToken.Length != 0) {
        PlayerIdentityToken = other.PlayerIdentityToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlayerIdentityToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DecodePlayerIdentityTokenResponse : pb::IMessage<DecodePlayerIdentityTokenResponse> {
    private static readonly pb::MessageParser<DecodePlayerIdentityTokenResponse> _parser = new pb::MessageParser<DecodePlayerIdentityTokenResponse>(() => new DecodePlayerIdentityTokenResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecodePlayerIdentityTokenResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerAuthReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodePlayerIdentityTokenResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodePlayerIdentityTokenResponse(DecodePlayerIdentityTokenResponse other) : this() {
      PlayerIdentityToken = other.playerIdentityToken_ != null ? other.PlayerIdentityToken.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodePlayerIdentityTokenResponse Clone() {
      return new DecodePlayerIdentityTokenResponse(this);
    }

    /// <summary>Field number for the "player_identity_token" field.</summary>
    public const int PlayerIdentityTokenFieldNumber = 1;
    private global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerIdentityToken playerIdentityToken_;
    /// <summary>
    /// The PIT that should be decoded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerIdentityToken PlayerIdentityToken {
      get { return playerIdentityToken_; }
      set {
        playerIdentityToken_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecodePlayerIdentityTokenResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecodePlayerIdentityTokenResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerIdentityToken, other.PlayerIdentityToken)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerIdentityToken_ != null) hash ^= PlayerIdentityToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerIdentityToken_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerIdentityToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerIdentityToken_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerIdentityToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecodePlayerIdentityTokenResponse other) {
      if (other == null) {
        return;
      }
      if (other.playerIdentityToken_ != null) {
        if (playerIdentityToken_ == null) {
          playerIdentityToken_ = new global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerIdentityToken();
        }
        PlayerIdentityToken.MergeFrom(other.PlayerIdentityToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerIdentityToken_ == null) {
              playerIdentityToken_ = new global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerIdentityToken();
            }
            input.ReadMessage(playerIdentityToken_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerIdentityToken : pb::IMessage<PlayerIdentityToken> {
    private static readonly pb::MessageParser<PlayerIdentityToken> _parser = new pb::MessageParser<PlayerIdentityToken>(() => new PlayerIdentityToken());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerIdentityToken> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerAuthReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerIdentityToken() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerIdentityToken(PlayerIdentityToken other) : this() {
      provider_ = other.provider_;
      playerIdentifier_ = other.playerIdentifier_;
      projectName_ = other.projectName_;
      displayName_ = other.displayName_;
      metadata_ = other.metadata_;
      IssuedAtTime = other.issuedAtTime_ != null ? other.IssuedAtTime.Clone() : null;
      ExpiryTime = other.expiryTime_ != null ? other.ExpiryTime.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerIdentityToken Clone() {
      return new PlayerIdentityToken(this);
    }

    /// <summary>Field number for the "provider" field.</summary>
    public const int ProviderFieldNumber = 1;
    private string provider_ = "";
    /// <summary>
    /// The system that was used to authenticate the player with. e.g. Steam, Google
    ///
    /// This corresponds to the `prvdr` claim in the JWT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Provider {
      get { return provider_; }
      set {
        provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_identifier" field.</summary>
    public const int PlayerIdentifierFieldNumber = 2;
    private string playerIdentifier_ = "";
    /// <summary>
    /// The ID of the player.
    ///
    /// This should uniquely identify a user in the specified provider.
    /// This corresponds to the `sub` claim in the JWT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerIdentifier {
      get { return playerIdentifier_; }
      set {
        playerIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "project_name" field.</summary>
    public const int ProjectNameFieldNumber = 3;
    private string projectName_ = "";
    /// <summary>
    /// The project that the PIT is scoped to.
    ///
    /// This corresponds to the `prj` claim in the JWT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 5;
    private string displayName_ = "";
    /// <summary>
    /// The player's display name.
    ///
    /// This corresponds to the `dn` claim in the JWT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 6;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    /// <summary>
    /// Additional metadata that is stored within the PIT.
    ///
    /// This corresponds to the `md` claim in the JWT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "issued_at_time" field.</summary>
    public const int IssuedAtTimeFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp issuedAtTime_;
    /// <summary>
    /// Time at which the PIT was issued.
    ///
    /// This corresponds to the `iat` claim in the JWT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp IssuedAtTime {
      get { return issuedAtTime_; }
      set {
        issuedAtTime_ = value;
      }
    }

    /// <summary>Field number for the "expiry_time" field.</summary>
    public const int ExpiryTimeFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expiryTime_;
    /// <summary>
    /// Time at which the PIT expires.
    ///
    /// This corresponds to the `exp` claim in the JWT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpiryTime {
      get { return expiryTime_; }
      set {
        expiryTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerIdentityToken);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerIdentityToken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Provider != other.Provider) return false;
      if (PlayerIdentifier != other.PlayerIdentifier) return false;
      if (ProjectName != other.ProjectName) return false;
      if (DisplayName != other.DisplayName) return false;
      if (Metadata != other.Metadata) return false;
      if (!object.Equals(IssuedAtTime, other.IssuedAtTime)) return false;
      if (!object.Equals(ExpiryTime, other.ExpiryTime)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Provider.Length != 0) hash ^= Provider.GetHashCode();
      if (PlayerIdentifier.Length != 0) hash ^= PlayerIdentifier.GetHashCode();
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (issuedAtTime_ != null) hash ^= IssuedAtTime.GetHashCode();
      if (expiryTime_ != null) hash ^= ExpiryTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Provider.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Provider);
      }
      if (PlayerIdentifier.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerIdentifier);
      }
      if (ProjectName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProjectName);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DisplayName);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Metadata);
      }
      if (issuedAtTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(IssuedAtTime);
      }
      if (expiryTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ExpiryTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Provider.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Provider);
      }
      if (PlayerIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerIdentifier);
      }
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      if (issuedAtTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IssuedAtTime);
      }
      if (expiryTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpiryTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerIdentityToken other) {
      if (other == null) {
        return;
      }
      if (other.Provider.Length != 0) {
        Provider = other.Provider;
      }
      if (other.PlayerIdentifier.Length != 0) {
        PlayerIdentifier = other.PlayerIdentifier;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.issuedAtTime_ != null) {
        if (issuedAtTime_ == null) {
          issuedAtTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        IssuedAtTime.MergeFrom(other.IssuedAtTime);
      }
      if (other.expiryTime_ != null) {
        if (expiryTime_ == null) {
          expiryTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpiryTime.MergeFrom(other.ExpiryTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Provider = input.ReadString();
            break;
          }
          case 18: {
            PlayerIdentifier = input.ReadString();
            break;
          }
          case 26: {
            ProjectName = input.ReadString();
            break;
          }
          case 42: {
            DisplayName = input.ReadString();
            break;
          }
          case 50: {
            Metadata = input.ReadBytes();
            break;
          }
          case 58: {
            if (issuedAtTime_ == null) {
              issuedAtTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(issuedAtTime_);
            break;
          }
          case 66: {
            if (expiryTime_ == null) {
              expiryTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(expiryTime_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
