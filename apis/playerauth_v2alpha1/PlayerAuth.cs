// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/improbable/spatialos/playerauth/v2alpha1/playerauth.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Improbable.SpatialOS.PlayerAuth.V2Alpha1 {

  /// <summary>Holder for reflection information generated from proto/improbable/spatialos/playerauth/v2alpha1/playerauth.proto</summary>
  public static partial class PlayerauthReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/improbable/spatialos/playerauth/v2alpha1/playerauth.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlayerauthReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cj9wcm90by9pbXByb2JhYmxlL3NwYXRpYWxvcy9wbGF5ZXJhdXRoL3YyYWxw",
            "aGExL3BsYXllcmF1dGgucHJvdG8SKGltcHJvYmFibGUuc3BhdGlhbG9zLnBs",
            "YXllcmF1dGgudjJhbHBoYTEaHmdvb2dsZS9wcm90b2J1Zi9kdXJhdGlvbi5w",
            "cm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxo2Z2l0aHVi",
            "LmNvbS9td2l0a293L2dvLXByb3RvLXZhbGlkYXRvcnMvdmFsaWRhdG9yLnBy",
            "b3RvIrsBChdDcmVhdGVMb2dpblRva2VuUmVxdWVzdBIdChVwbGF5ZXJfaWRl",
            "bnRpdHlfdG9rZW4YASABKAkSFQoNZGVwbG95bWVudF9pZBgCIAEoCRI0ChFs",
            "aWZldGltZV9kdXJhdGlvbhgDIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJh",
            "dGlvbhI0Cgt3b3JrZXJfdHlwZRgEIAEoCUIf4t8fGwoZXiR8XlthLXpBLVow",
            "LTlfLV17MywxMjh9JCIvChhDcmVhdGVMb2dpblRva2VuUmVzcG9uc2USEwoL",
            "bG9naW5fdG9rZW4YASABKAki7AEKIENyZWF0ZVBsYXllcklkZW50aXR5VG9r",
            "ZW5SZXF1ZXN0EhgKCHByb3ZpZGVyGAEgASgJQgbi3x8CWAESIQoRcGxheWVy",
            "X2lkZW50aWZpZXIYAiABKAlCBuLfHwJYARItCgxwcm9qZWN0X25hbWUYAyAB",
            "KAlCF+LfHxMKEV5bYS16MC05X117MywzMn0kEjQKEWxpZmV0aW1lX2R1cmF0",
            "aW9uGAQgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEhQKDGRpc3Bs",
            "YXlfbmFtZRgFIAEoCRIQCghtZXRhZGF0YRgGIAEoDCJCCiFDcmVhdGVQbGF5",
            "ZXJJZGVudGl0eVRva2VuUmVzcG9uc2USHQoVcGxheWVyX2lkZW50aXR5X3Rv",
            "a2VuGAEgASgJIkkKIERlY29kZVBsYXllcklkZW50aXR5VG9rZW5SZXF1ZXN0",
            "EiUKFXBsYXllcl9pZGVudGl0eV90b2tlbhgBIAEoCUIG4t8fAlgBIokBCiFE",
            "ZWNvZGVQbGF5ZXJJZGVudGl0eVRva2VuUmVzcG9uc2USZAoVcGxheWVyX2lk",
            "ZW50aXR5X3Rva2VuGAEgASgLMj0uaW1wcm9iYWJsZS5zcGF0aWFsb3MucGxh",
            "eWVyYXV0aC52MmFscGhhMS5QbGF5ZXJJZGVudGl0eVRva2VuQgbi3x8CIAEi",
            "oQIKE1BsYXllcklkZW50aXR5VG9rZW4SFwoIcHJvdmlkZXIYASABKAlSBXBy",
            "dmRyEh4KEXBsYXllcl9pZGVudGlmaWVyGAIgASgJUgNzdWISMgoMcHJvamVj",
            "dF9uYW1lGAMgASgJQhfi3x8TChFeW2EtejAtOV9dezMsMzJ9JFIDcHJqEhgK",
            "DGRpc3BsYXlfbmFtZRgFIAEoCVICZG4SFAoIbWV0YWRhdGEYBiABKAxSAm1k",
            "EjcKDmlzc3VlZF9hdF90aW1lGAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRp",
            "bWVzdGFtcFIDaWF0EjQKC2V4cGlyeV90aW1lGAggASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLlRpbWVzdGFtcFIDZXhwIusBCh5EZXZlbG9wbWVudEF1dGhlbnRp",
            "Y2F0aW9uVG9rZW4SEgoCaWQYASABKAlCBuLfHwJYARIwCgxwcm9qZWN0X25h",
            "bWUYAiABKAlCGuLfHxYKFF5bYS16QS1aMC05X117MywzMn0kEhsKC2Rlc2Ny",
            "aXB0aW9uGAMgASgJQgbi3x8CWAESMQoNY3JlYXRpb25fdGltZRgEIAEoCzIa",
            "Lmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASMwoPZXhwaXJhdGlvbl90aW1l",
            "GAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCKrAQorQ3JlYXRl",
            "RGV2ZWxvcG1lbnRBdXRoZW50aWNhdGlvblRva2VuUmVxdWVzdBIyCgxwcm9q",
            "ZWN0X25hbWUYASABKAlCHOLfHxgKFF5bYS16QS1aMC05X117MywzMn0kIAES",
            "GwoLZGVzY3JpcHRpb24YAiABKAlCBuLfHwJYARIrCghsaWZldGltZRgDIAEo",
            "CzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbiKiAQosQ3JlYXRlRGV2ZWxv",
            "cG1lbnRBdXRoZW50aWNhdGlvblRva2VuUmVzcG9uc2UScgogZGV2ZWxvcG1l",
            "bnRfYXV0aGVudGljYXRpb25fdG9rZW4YASABKAsySC5pbXByb2JhYmxlLnNw",
            "YXRpYWxvcy5wbGF5ZXJhdXRoLnYyYWxwaGExLkRldmVsb3BtZW50QXV0aGVu",
            "dGljYXRpb25Ub2tlbiI+CihHZXREZXZlbG9wbWVudEF1dGhlbnRpY2F0aW9u",
            "VG9rZW5SZXF1ZXN0EhIKAmlkGAEgASgJQgbi3x8CWAEinwEKKUdldERldmVs",
            "b3BtZW50QXV0aGVudGljYXRpb25Ub2tlblJlc3BvbnNlEnIKIGRldmVsb3Bt",
            "ZW50X2F1dGhlbnRpY2F0aW9uX3Rva2VuGAEgASgLMkguaW1wcm9iYWJsZS5z",
            "cGF0aWFsb3MucGxheWVyYXV0aC52MmFscGhhMS5EZXZlbG9wbWVudEF1dGhl",
            "bnRpY2F0aW9uVG9rZW4iswEKKkxpc3REZXZlbG9wbWVudEF1dGhlbnRpY2F0",
            "aW9uVG9rZW5zUmVxdWVzdBIyCgxwcm9qZWN0X25hbWUYASABKAlCHOLfHxgK",
            "FF5bYS16QS1aMC05X117MywzMn0kIAESFwoPaW5jbHVkZV9leHBpcmVkGAIg",
            "ASgIEiQKCXBhZ2Vfc2l6ZRgDIAEoBUIR4t8fDRD///////////8BGDMSEgoK",
            "cGFnZV90b2tlbhgEIAEoCSK7AQorTGlzdERldmVsb3BtZW50QXV0aGVudGlj",
            "YXRpb25Ub2tlbnNSZXNwb25zZRJzCiFkZXZlbG9wbWVudF9hdXRoZW50aWNh",
            "dGlvbl90b2tlbnMYASADKAsySC5pbXByb2JhYmxlLnNwYXRpYWxvcy5wbGF5",
            "ZXJhdXRoLnYyYWxwaGExLkRldmVsb3BtZW50QXV0aGVudGljYXRpb25Ub2tl",
            "bhIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkiiwEKK1VwZGF0ZURldmVsb3Bt",
            "ZW50QXV0aGVudGljYXRpb25Ub2tlblJlcXVlc3QSEgoCaWQYASABKAlCBuLf",
            "HwJYARITCgtkZXNjcmlwdGlvbhgCIAEoCRIzChB1cGRhdGVkX2xpZmV0aW1l",
            "GAMgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uIqIBCixVcGRhdGVE",
            "ZXZlbG9wbWVudEF1dGhlbnRpY2F0aW9uVG9rZW5SZXNwb25zZRJyCiBkZXZl",
            "bG9wbWVudF9hdXRoZW50aWNhdGlvbl90b2tlbhgBIAEoCzJILmltcHJvYmFi",
            "bGUuc3BhdGlhbG9zLnBsYXllcmF1dGgudjJhbHBoYTEuRGV2ZWxvcG1lbnRB",
            "dXRoZW50aWNhdGlvblRva2VuIkEKK0V4cGlyZURldmVsb3BtZW50QXV0aGVu",
            "dGljYXRpb25Ub2tlblJlcXVlc3QSEgoCaWQYASABKAlCBuLfHwJYASIuCixF",
            "eHBpcmVEZXZlbG9wbWVudEF1dGhlbnRpY2F0aW9uVG9rZW5SZXNwb25zZTLJ",
            "DAoRUGxheWVyQXV0aFNlcnZpY2USmQEKEENyZWF0ZUxvZ2luVG9rZW4SQS5p",
            "bXByb2JhYmxlLnNwYXRpYWxvcy5wbGF5ZXJhdXRoLnYyYWxwaGExLkNyZWF0",
            "ZUxvZ2luVG9rZW5SZXF1ZXN0GkIuaW1wcm9iYWJsZS5zcGF0aWFsb3MucGxh",
            "eWVyYXV0aC52MmFscGhhMS5DcmVhdGVMb2dpblRva2VuUmVzcG9uc2UStAEK",
            "GUNyZWF0ZVBsYXllcklkZW50aXR5VG9rZW4SSi5pbXByb2JhYmxlLnNwYXRp",
            "YWxvcy5wbGF5ZXJhdXRoLnYyYWxwaGExLkNyZWF0ZVBsYXllcklkZW50aXR5",
            "VG9rZW5SZXF1ZXN0GksuaW1wcm9iYWJsZS5zcGF0aWFsb3MucGxheWVyYXV0",
            "aC52MmFscGhhMS5DcmVhdGVQbGF5ZXJJZGVudGl0eVRva2VuUmVzcG9uc2US",
            "tAEKGURlY29kZVBsYXllcklkZW50aXR5VG9rZW4SSi5pbXByb2JhYmxlLnNw",
            "YXRpYWxvcy5wbGF5ZXJhdXRoLnYyYWxwaGExLkRlY29kZVBsYXllcklkZW50",
            "aXR5VG9rZW5SZXF1ZXN0GksuaW1wcm9iYWJsZS5zcGF0aWFsb3MucGxheWVy",
            "YXV0aC52MmFscGhhMS5EZWNvZGVQbGF5ZXJJZGVudGl0eVRva2VuUmVzcG9u",
            "c2US1QEKJENyZWF0ZURldmVsb3BtZW50QXV0aGVudGljYXRpb25Ub2tlbhJV",
            "LmltcHJvYmFibGUuc3BhdGlhbG9zLnBsYXllcmF1dGgudjJhbHBoYTEuQ3Jl",
            "YXRlRGV2ZWxvcG1lbnRBdXRoZW50aWNhdGlvblRva2VuUmVxdWVzdBpWLmlt",
            "cHJvYmFibGUuc3BhdGlhbG9zLnBsYXllcmF1dGgudjJhbHBoYTEuQ3JlYXRl",
            "RGV2ZWxvcG1lbnRBdXRoZW50aWNhdGlvblRva2VuUmVzcG9uc2USzAEKIUdl",
            "dERldmVsb3BtZW50QXV0aGVudGljYXRpb25Ub2tlbhJSLmltcHJvYmFibGUu",
            "c3BhdGlhbG9zLnBsYXllcmF1dGgudjJhbHBoYTEuR2V0RGV2ZWxvcG1lbnRB",
            "dXRoZW50aWNhdGlvblRva2VuUmVxdWVzdBpTLmltcHJvYmFibGUuc3BhdGlh",
            "bG9zLnBsYXllcmF1dGgudjJhbHBoYTEuR2V0RGV2ZWxvcG1lbnRBdXRoZW50",
            "aWNhdGlvblRva2VuUmVzcG9uc2US0gEKI0xpc3REZXZlbG9wbWVudEF1dGhl",
            "bnRpY2F0aW9uVG9rZW5zElQuaW1wcm9iYWJsZS5zcGF0aWFsb3MucGxheWVy",
            "YXV0aC52MmFscGhhMS5MaXN0RGV2ZWxvcG1lbnRBdXRoZW50aWNhdGlvblRv",
            "a2Vuc1JlcXVlc3QaVS5pbXByb2JhYmxlLnNwYXRpYWxvcy5wbGF5ZXJhdXRo",
            "LnYyYWxwaGExLkxpc3REZXZlbG9wbWVudEF1dGhlbnRpY2F0aW9uVG9rZW5z",
            "UmVzcG9uc2US1QEKJFVwZGF0ZURldmVsb3BtZW50QXV0aGVudGljYXRpb25U",
            "b2tlbhJVLmltcHJvYmFibGUuc3BhdGlhbG9zLnBsYXllcmF1dGgudjJhbHBo",
            "YTEuVXBkYXRlRGV2ZWxvcG1lbnRBdXRoZW50aWNhdGlvblRva2VuUmVxdWVz",
            "dBpWLmltcHJvYmFibGUuc3BhdGlhbG9zLnBsYXllcmF1dGgudjJhbHBoYTEu",
            "VXBkYXRlRGV2ZWxvcG1lbnRBdXRoZW50aWNhdGlvblRva2VuUmVzcG9uc2US",
            "1QEKJEV4cGlyZURldmVsb3BtZW50QXV0aGVudGljYXRpb25Ub2tlbhJVLmlt",
            "cHJvYmFibGUuc3BhdGlhbG9zLnBsYXllcmF1dGgudjJhbHBoYTEuRXhwaXJl",
            "RGV2ZWxvcG1lbnRBdXRoZW50aWNhdGlvblRva2VuUmVxdWVzdBpWLmltcHJv",
            "YmFibGUuc3BhdGlhbG9zLnBsYXllcmF1dGgudjJhbHBoYTEuRXhwaXJlRGV2",
            "ZWxvcG1lbnRBdXRoZW50aWNhdGlvblRva2VuUmVzcG9uc2VCYFozaW1wcm9i",
            "YWJsZS9zcGF0aWFsb3MvcGxheWVyYXV0aC92MmFscGhhMTtwbGF5ZXJhdXRo",
            "qgIoSW1wcm9iYWJsZS5TcGF0aWFsT1MuUGxheWVyQXV0aC5WMkFscGhhMWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Validator.ValidatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.CreateLoginTokenRequest), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.CreateLoginTokenRequest.Parser, new[]{ "PlayerIdentityToken", "DeploymentId", "LifetimeDuration", "WorkerType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.CreateLoginTokenResponse), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.CreateLoginTokenResponse.Parser, new[]{ "LoginToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.CreatePlayerIdentityTokenRequest), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.CreatePlayerIdentityTokenRequest.Parser, new[]{ "Provider", "PlayerIdentifier", "ProjectName", "LifetimeDuration", "DisplayName", "Metadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.CreatePlayerIdentityTokenResponse), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.CreatePlayerIdentityTokenResponse.Parser, new[]{ "PlayerIdentityToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DecodePlayerIdentityTokenRequest), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DecodePlayerIdentityTokenRequest.Parser, new[]{ "PlayerIdentityToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DecodePlayerIdentityTokenResponse), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DecodePlayerIdentityTokenResponse.Parser, new[]{ "PlayerIdentityToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerIdentityToken), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerIdentityToken.Parser, new[]{ "Provider", "PlayerIdentifier", "ProjectName", "DisplayName", "Metadata", "IssuedAtTime", "ExpiryTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DevelopmentAuthenticationToken), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DevelopmentAuthenticationToken.Parser, new[]{ "Id", "ProjectName", "Description", "CreationTime", "ExpirationTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.CreateDevelopmentAuthenticationTokenRequest), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.CreateDevelopmentAuthenticationTokenRequest.Parser, new[]{ "ProjectName", "Description", "Lifetime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.CreateDevelopmentAuthenticationTokenResponse), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.CreateDevelopmentAuthenticationTokenResponse.Parser, new[]{ "DevelopmentAuthenticationToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.GetDevelopmentAuthenticationTokenRequest), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.GetDevelopmentAuthenticationTokenRequest.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.GetDevelopmentAuthenticationTokenResponse), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.GetDevelopmentAuthenticationTokenResponse.Parser, new[]{ "DevelopmentAuthenticationToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.ListDevelopmentAuthenticationTokensRequest), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.ListDevelopmentAuthenticationTokensRequest.Parser, new[]{ "ProjectName", "IncludeExpired", "PageSize", "PageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.ListDevelopmentAuthenticationTokensResponse), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.ListDevelopmentAuthenticationTokensResponse.Parser, new[]{ "DevelopmentAuthenticationTokens", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.UpdateDevelopmentAuthenticationTokenRequest), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.UpdateDevelopmentAuthenticationTokenRequest.Parser, new[]{ "Id", "Description", "UpdatedLifetime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.UpdateDevelopmentAuthenticationTokenResponse), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.UpdateDevelopmentAuthenticationTokenResponse.Parser, new[]{ "DevelopmentAuthenticationToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.ExpireDevelopmentAuthenticationTokenRequest), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.ExpireDevelopmentAuthenticationTokenRequest.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.ExpireDevelopmentAuthenticationTokenResponse), global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.ExpireDevelopmentAuthenticationTokenResponse.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The following fields are mandatory:
  /// - `player_identity_token`
  /// - `deployment_id`
  ///
  /// The remaining fields are optional:
  ///  - `lifetime_duration`. If provided, this must be a positive duration. If unset,
  ///    it defaults to 15 minutes.
  /// </summary>
  public sealed partial class CreateLoginTokenRequest : pb::IMessage<CreateLoginTokenRequest> {
    private static readonly pb::MessageParser<CreateLoginTokenRequest> _parser = new pb::MessageParser<CreateLoginTokenRequest>(() => new CreateLoginTokenRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateLoginTokenRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerauthReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateLoginTokenRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateLoginTokenRequest(CreateLoginTokenRequest other) : this() {
      playerIdentityToken_ = other.playerIdentityToken_;
      deploymentId_ = other.deploymentId_;
      LifetimeDuration = other.lifetimeDuration_ != null ? other.LifetimeDuration.Clone() : null;
      workerType_ = other.workerType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateLoginTokenRequest Clone() {
      return new CreateLoginTokenRequest(this);
    }

    /// <summary>Field number for the "player_identity_token" field.</summary>
    public const int PlayerIdentityTokenFieldNumber = 1;
    private string playerIdentityToken_ = "";
    /// <summary>
    /// The player_identity_token is the JWT returned by the `PlayerIdentityTokenService.CreatePlayerIdentityToken` RPC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerIdentityToken {
      get { return playerIdentityToken_; }
      set {
        playerIdentityToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deployment_id" field.</summary>
    public const int DeploymentIdFieldNumber = 2;
    private string deploymentId_ = "";
    /// <summary>
    /// The UUID of the deployment that the user gets access to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeploymentId {
      get { return deploymentId_; }
      set {
        deploymentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lifetime_duration" field.</summary>
    public const int LifetimeDurationFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Duration lifetimeDuration_;
    /// <summary>
    /// Specifies how long the LT is valid for.
    ///
    /// This field is optional. If unset, it defaults to 15 minutes. The maximum value is 30 minutes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration LifetimeDuration {
      get { return lifetimeDuration_; }
      set {
        lifetimeDuration_ = value;
      }
    }

    /// <summary>Field number for the "worker_type" field.</summary>
    public const int WorkerTypeFieldNumber = 4;
    private string workerType_ = "";
    /// <summary>
    /// The worker type you can use to connect to the deployment.
    ///
    /// This field is optional. Leave empty to allow all types of worker. If provided, it must conform to the regex `^$|^[a-zA-Z0-9_-]{3,128}$`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkerType {
      get { return workerType_; }
      set {
        workerType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateLoginTokenRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateLoginTokenRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerIdentityToken != other.PlayerIdentityToken) return false;
      if (DeploymentId != other.DeploymentId) return false;
      if (!object.Equals(LifetimeDuration, other.LifetimeDuration)) return false;
      if (WorkerType != other.WorkerType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerIdentityToken.Length != 0) hash ^= PlayerIdentityToken.GetHashCode();
      if (DeploymentId.Length != 0) hash ^= DeploymentId.GetHashCode();
      if (lifetimeDuration_ != null) hash ^= LifetimeDuration.GetHashCode();
      if (WorkerType.Length != 0) hash ^= WorkerType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerIdentityToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerIdentityToken);
      }
      if (DeploymentId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeploymentId);
      }
      if (lifetimeDuration_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LifetimeDuration);
      }
      if (WorkerType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WorkerType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerIdentityToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerIdentityToken);
      }
      if (DeploymentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeploymentId);
      }
      if (lifetimeDuration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LifetimeDuration);
      }
      if (WorkerType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkerType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateLoginTokenRequest other) {
      if (other == null) {
        return;
      }
      if (other.PlayerIdentityToken.Length != 0) {
        PlayerIdentityToken = other.PlayerIdentityToken;
      }
      if (other.DeploymentId.Length != 0) {
        DeploymentId = other.DeploymentId;
      }
      if (other.lifetimeDuration_ != null) {
        if (lifetimeDuration_ == null) {
          lifetimeDuration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        LifetimeDuration.MergeFrom(other.LifetimeDuration);
      }
      if (other.WorkerType.Length != 0) {
        WorkerType = other.WorkerType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlayerIdentityToken = input.ReadString();
            break;
          }
          case 18: {
            DeploymentId = input.ReadString();
            break;
          }
          case 26: {
            if (lifetimeDuration_ == null) {
              lifetimeDuration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(lifetimeDuration_);
            break;
          }
          case 34: {
            WorkerType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateLoginTokenResponse : pb::IMessage<CreateLoginTokenResponse> {
    private static readonly pb::MessageParser<CreateLoginTokenResponse> _parser = new pb::MessageParser<CreateLoginTokenResponse>(() => new CreateLoginTokenResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateLoginTokenResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerauthReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateLoginTokenResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateLoginTokenResponse(CreateLoginTokenResponse other) : this() {
      loginToken_ = other.loginToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateLoginTokenResponse Clone() {
      return new CreateLoginTokenResponse(this);
    }

    /// <summary>Field number for the "login_token" field.</summary>
    public const int LoginTokenFieldNumber = 1;
    private string loginToken_ = "";
    /// <summary>
    /// The login_token is a short-lived token (up to 15 minutes), allowing the user to log in to a deployment with the specified name.
    /// It is a signed JWT with the following claims:
    /// sub:     provider-scoped unique user ID. Corresponds to `player_identifier` supplied in `CreatePlayerIdentityTokenRequest`.
    /// prvdr:   describes system used to authenticate the user. Corresponds to `provider` supplied in `CreatePlayerIdentityTokenRequest`.
    /// prj:     project that the token is scoped to.
    /// dpl:     deployment UUID that the token gives access to.
    /// iat:     issued at time. This is the time since epoch in seconds in UTC.
    /// exp:     expiry time. This is the time since epoch in seconds in UTC.
    /// wkt:     worker type: This is the worker type you can use to connect to the deployment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginToken {
      get { return loginToken_; }
      set {
        loginToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateLoginTokenResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateLoginTokenResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LoginToken != other.LoginToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LoginToken.Length != 0) hash ^= LoginToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LoginToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LoginToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LoginToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateLoginTokenResponse other) {
      if (other == null) {
        return;
      }
      if (other.LoginToken.Length != 0) {
        LoginToken = other.LoginToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LoginToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The following fields are mandatory:
  /// - `provider`
  /// - `player_identifier`. The maximum length is 64 characters.
  /// - `project_name`
  ///
  /// The remaining fields are optional:
  /// - `lifetime_duration`. If provided, this must be a positive duration,
  ///   less than or equal to 24.
  /// - `display_name`. If provided, the maximum length is 64 characters.
  /// - `metadata`. If provided, this must be less than or equal to 256 bytes.
  /// </summary>
  public sealed partial class CreatePlayerIdentityTokenRequest : pb::IMessage<CreatePlayerIdentityTokenRequest> {
    private static readonly pb::MessageParser<CreatePlayerIdentityTokenRequest> _parser = new pb::MessageParser<CreatePlayerIdentityTokenRequest>(() => new CreatePlayerIdentityTokenRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatePlayerIdentityTokenRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerauthReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePlayerIdentityTokenRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePlayerIdentityTokenRequest(CreatePlayerIdentityTokenRequest other) : this() {
      provider_ = other.provider_;
      playerIdentifier_ = other.playerIdentifier_;
      projectName_ = other.projectName_;
      LifetimeDuration = other.lifetimeDuration_ != null ? other.LifetimeDuration.Clone() : null;
      displayName_ = other.displayName_;
      metadata_ = other.metadata_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePlayerIdentityTokenRequest Clone() {
      return new CreatePlayerIdentityTokenRequest(this);
    }

    /// <summary>Field number for the "provider" field.</summary>
    public const int ProviderFieldNumber = 1;
    private string provider_ = "";
    /// <summary>
    /// The system used to authenticate the player with (for example) Steam or Google. This field must not be empty.
    /// The provider name cannot contain 'improbable' (case insensitive) as this is reserved for internal use.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Provider {
      get { return provider_; }
      set {
        provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_identifier" field.</summary>
    public const int PlayerIdentifierFieldNumber = 2;
    private string playerIdentifier_ = "";
    /// <summary>
    /// The ID of the player for whom who you are generating a PIT.
    ///
    /// This should uniquely identify a user in the specified provider.
    /// The maximum length is 64 characters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerIdentifier {
      get { return playerIdentifier_; }
      set {
        playerIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "project_name" field.</summary>
    public const int ProjectNameFieldNumber = 3;
    private string projectName_ = "";
    /// <summary>
    /// The project that the PIT is scoped to.
    /// This should be between 3 and 32 characters and made up of lower case letters, numbers and underscores only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lifetime_duration" field.</summary>
    public const int LifetimeDurationFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Duration lifetimeDuration_;
    /// <summary>
    /// The duration for which the issued PIT is valid.
    ///
    /// It must be set to less than or equal to 24 hours.
    ///
    /// This field is optional. If unset or 0, it defaults to 24 hours.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration LifetimeDuration {
      get { return lifetimeDuration_; }
      set {
        lifetimeDuration_ = value;
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 5;
    private string displayName_ = "";
    /// <summary>
    /// The player's display name. This field is optional.
    ///
    /// The display name is controlled by the caller and may contain personal information. It should not be stored or logged.
    /// The maximum length is 64 characters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 6;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    /// <summary>
    /// Additional metadata that is stored within the PIT.
    ///
    /// You can use this to securely attach extra attributes on the PIT in a format you choose.
    /// For example: JSON payload: bytes("{ 'userType': 'PREMIUM', 'region': 'EU' }")
    /// It must use less than or equal to 256 bytes.
    /// Exceeding this limitation results in an `InvalidArgument` error.
    ///
    /// This field is optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatePlayerIdentityTokenRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatePlayerIdentityTokenRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Provider != other.Provider) return false;
      if (PlayerIdentifier != other.PlayerIdentifier) return false;
      if (ProjectName != other.ProjectName) return false;
      if (!object.Equals(LifetimeDuration, other.LifetimeDuration)) return false;
      if (DisplayName != other.DisplayName) return false;
      if (Metadata != other.Metadata) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Provider.Length != 0) hash ^= Provider.GetHashCode();
      if (PlayerIdentifier.Length != 0) hash ^= PlayerIdentifier.GetHashCode();
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (lifetimeDuration_ != null) hash ^= LifetimeDuration.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Provider.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Provider);
      }
      if (PlayerIdentifier.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerIdentifier);
      }
      if (ProjectName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProjectName);
      }
      if (lifetimeDuration_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LifetimeDuration);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DisplayName);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Metadata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Provider.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Provider);
      }
      if (PlayerIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerIdentifier);
      }
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (lifetimeDuration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LifetimeDuration);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatePlayerIdentityTokenRequest other) {
      if (other == null) {
        return;
      }
      if (other.Provider.Length != 0) {
        Provider = other.Provider;
      }
      if (other.PlayerIdentifier.Length != 0) {
        PlayerIdentifier = other.PlayerIdentifier;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.lifetimeDuration_ != null) {
        if (lifetimeDuration_ == null) {
          lifetimeDuration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        LifetimeDuration.MergeFrom(other.LifetimeDuration);
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Provider = input.ReadString();
            break;
          }
          case 18: {
            PlayerIdentifier = input.ReadString();
            break;
          }
          case 26: {
            ProjectName = input.ReadString();
            break;
          }
          case 34: {
            if (lifetimeDuration_ == null) {
              lifetimeDuration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(lifetimeDuration_);
            break;
          }
          case 42: {
            DisplayName = input.ReadString();
            break;
          }
          case 50: {
            Metadata = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreatePlayerIdentityTokenResponse : pb::IMessage<CreatePlayerIdentityTokenResponse> {
    private static readonly pb::MessageParser<CreatePlayerIdentityTokenResponse> _parser = new pb::MessageParser<CreatePlayerIdentityTokenResponse>(() => new CreatePlayerIdentityTokenResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatePlayerIdentityTokenResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerauthReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePlayerIdentityTokenResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePlayerIdentityTokenResponse(CreatePlayerIdentityTokenResponse other) : this() {
      playerIdentityToken_ = other.playerIdentityToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePlayerIdentityTokenResponse Clone() {
      return new CreatePlayerIdentityTokenResponse(this);
    }

    /// <summary>Field number for the "player_identity_token" field.</summary>
    public const int PlayerIdentityTokenFieldNumber = 1;
    private string playerIdentityToken_ = "";
    /// <summary>
    /// The `player_identity_token` is a long-lived token (up to 24h) which guarantees a user's identity in the context of a project.
    ///
    /// It is a signed JWT with the following payload:
    /// sub:     provider-scoped unique user ID. Corresponds to `player_identifier` supplied in `CreatePlayerIdentityTokenRequest`.
    /// prvdr:   describes system used to authenticate the user. Corresponds to `provider` supplied in `CreatePlayerIdentityTokenRequest`.
    /// prj:     project that the PIT is scoped to.
    /// md:      metadata. Corresponds to `md` supplied in `CreatePlayerIdentityTokenRequest`.
    /// iat:     issued at time. This is the time since epoch in seconds in UTC.
    /// exp:     expiry time. This is the time since epoch in seconds in UTC.
    /// dn:      display name. This is an optional user-provided string, corresponding to `dn` supplied in `CreatePlayerIdentityRequest`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerIdentityToken {
      get { return playerIdentityToken_; }
      set {
        playerIdentityToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatePlayerIdentityTokenResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatePlayerIdentityTokenResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerIdentityToken != other.PlayerIdentityToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerIdentityToken.Length != 0) hash ^= PlayerIdentityToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerIdentityToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerIdentityToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerIdentityToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerIdentityToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatePlayerIdentityTokenResponse other) {
      if (other == null) {
        return;
      }
      if (other.PlayerIdentityToken.Length != 0) {
        PlayerIdentityToken = other.PlayerIdentityToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlayerIdentityToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The following fields are mandatory:
  /// - `player_identity_token`
  /// </summary>
  public sealed partial class DecodePlayerIdentityTokenRequest : pb::IMessage<DecodePlayerIdentityTokenRequest> {
    private static readonly pb::MessageParser<DecodePlayerIdentityTokenRequest> _parser = new pb::MessageParser<DecodePlayerIdentityTokenRequest>(() => new DecodePlayerIdentityTokenRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecodePlayerIdentityTokenRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerauthReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodePlayerIdentityTokenRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodePlayerIdentityTokenRequest(DecodePlayerIdentityTokenRequest other) : this() {
      playerIdentityToken_ = other.playerIdentityToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodePlayerIdentityTokenRequest Clone() {
      return new DecodePlayerIdentityTokenRequest(this);
    }

    /// <summary>Field number for the "player_identity_token" field.</summary>
    public const int PlayerIdentityTokenFieldNumber = 1;
    private string playerIdentityToken_ = "";
    /// <summary>
    /// The PIT that was issued to the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerIdentityToken {
      get { return playerIdentityToken_; }
      set {
        playerIdentityToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecodePlayerIdentityTokenRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecodePlayerIdentityTokenRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerIdentityToken != other.PlayerIdentityToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerIdentityToken.Length != 0) hash ^= PlayerIdentityToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerIdentityToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerIdentityToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerIdentityToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerIdentityToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecodePlayerIdentityTokenRequest other) {
      if (other == null) {
        return;
      }
      if (other.PlayerIdentityToken.Length != 0) {
        PlayerIdentityToken = other.PlayerIdentityToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlayerIdentityToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DecodePlayerIdentityTokenResponse : pb::IMessage<DecodePlayerIdentityTokenResponse> {
    private static readonly pb::MessageParser<DecodePlayerIdentityTokenResponse> _parser = new pb::MessageParser<DecodePlayerIdentityTokenResponse>(() => new DecodePlayerIdentityTokenResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecodePlayerIdentityTokenResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerauthReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodePlayerIdentityTokenResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodePlayerIdentityTokenResponse(DecodePlayerIdentityTokenResponse other) : this() {
      PlayerIdentityToken = other.playerIdentityToken_ != null ? other.PlayerIdentityToken.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodePlayerIdentityTokenResponse Clone() {
      return new DecodePlayerIdentityTokenResponse(this);
    }

    /// <summary>Field number for the "player_identity_token" field.</summary>
    public const int PlayerIdentityTokenFieldNumber = 1;
    private global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerIdentityToken playerIdentityToken_;
    /// <summary>
    /// The PIT that should be decoded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerIdentityToken PlayerIdentityToken {
      get { return playerIdentityToken_; }
      set {
        playerIdentityToken_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecodePlayerIdentityTokenResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecodePlayerIdentityTokenResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerIdentityToken, other.PlayerIdentityToken)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerIdentityToken_ != null) hash ^= PlayerIdentityToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerIdentityToken_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerIdentityToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerIdentityToken_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerIdentityToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecodePlayerIdentityTokenResponse other) {
      if (other == null) {
        return;
      }
      if (other.playerIdentityToken_ != null) {
        if (playerIdentityToken_ == null) {
          playerIdentityToken_ = new global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerIdentityToken();
        }
        PlayerIdentityToken.MergeFrom(other.PlayerIdentityToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerIdentityToken_ == null) {
              playerIdentityToken_ = new global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerIdentityToken();
            }
            input.ReadMessage(playerIdentityToken_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerIdentityToken : pb::IMessage<PlayerIdentityToken> {
    private static readonly pb::MessageParser<PlayerIdentityToken> _parser = new pb::MessageParser<PlayerIdentityToken>(() => new PlayerIdentityToken());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerIdentityToken> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerauthReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerIdentityToken() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerIdentityToken(PlayerIdentityToken other) : this() {
      provider_ = other.provider_;
      playerIdentifier_ = other.playerIdentifier_;
      projectName_ = other.projectName_;
      displayName_ = other.displayName_;
      metadata_ = other.metadata_;
      IssuedAtTime = other.issuedAtTime_ != null ? other.IssuedAtTime.Clone() : null;
      ExpiryTime = other.expiryTime_ != null ? other.ExpiryTime.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerIdentityToken Clone() {
      return new PlayerIdentityToken(this);
    }

    /// <summary>Field number for the "provider" field.</summary>
    public const int ProviderFieldNumber = 1;
    private string provider_ = "";
    /// <summary>
    /// The system that was used to authenticate the player with, for example Steam or Google.
    ///
    /// This corresponds to the `prvdr` claim in the JWT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Provider {
      get { return provider_; }
      set {
        provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_identifier" field.</summary>
    public const int PlayerIdentifierFieldNumber = 2;
    private string playerIdentifier_ = "";
    /// <summary>
    /// The ID of the player.
    ///
    /// This should uniquely identify a user in the specified provider.
    /// This corresponds to the `sub` claim in the JWT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerIdentifier {
      get { return playerIdentifier_; }
      set {
        playerIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "project_name" field.</summary>
    public const int ProjectNameFieldNumber = 3;
    private string projectName_ = "";
    /// <summary>
    /// The project that the PIT is scoped to.
    ///
    /// This corresponds to the `prj` claim in the JWT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 5;
    private string displayName_ = "";
    /// <summary>
    /// The player's display name.
    ///
    /// This corresponds to the `dn` claim in the JWT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 6;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    /// <summary>
    /// Additional metadata that is stored within the PIT.
    ///
    /// This corresponds to the `md` claim in the JWT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "issued_at_time" field.</summary>
    public const int IssuedAtTimeFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp issuedAtTime_;
    /// <summary>
    /// Time at which the PIT was issued.
    ///
    /// This corresponds to the `iat` claim in the JWT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp IssuedAtTime {
      get { return issuedAtTime_; }
      set {
        issuedAtTime_ = value;
      }
    }

    /// <summary>Field number for the "expiry_time" field.</summary>
    public const int ExpiryTimeFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expiryTime_;
    /// <summary>
    /// Time at which the PIT expires.
    ///
    /// This corresponds to the `exp` claim in the JWT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpiryTime {
      get { return expiryTime_; }
      set {
        expiryTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerIdentityToken);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerIdentityToken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Provider != other.Provider) return false;
      if (PlayerIdentifier != other.PlayerIdentifier) return false;
      if (ProjectName != other.ProjectName) return false;
      if (DisplayName != other.DisplayName) return false;
      if (Metadata != other.Metadata) return false;
      if (!object.Equals(IssuedAtTime, other.IssuedAtTime)) return false;
      if (!object.Equals(ExpiryTime, other.ExpiryTime)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Provider.Length != 0) hash ^= Provider.GetHashCode();
      if (PlayerIdentifier.Length != 0) hash ^= PlayerIdentifier.GetHashCode();
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (issuedAtTime_ != null) hash ^= IssuedAtTime.GetHashCode();
      if (expiryTime_ != null) hash ^= ExpiryTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Provider.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Provider);
      }
      if (PlayerIdentifier.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerIdentifier);
      }
      if (ProjectName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProjectName);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DisplayName);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Metadata);
      }
      if (issuedAtTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(IssuedAtTime);
      }
      if (expiryTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ExpiryTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Provider.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Provider);
      }
      if (PlayerIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerIdentifier);
      }
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      if (issuedAtTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IssuedAtTime);
      }
      if (expiryTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpiryTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerIdentityToken other) {
      if (other == null) {
        return;
      }
      if (other.Provider.Length != 0) {
        Provider = other.Provider;
      }
      if (other.PlayerIdentifier.Length != 0) {
        PlayerIdentifier = other.PlayerIdentifier;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.issuedAtTime_ != null) {
        if (issuedAtTime_ == null) {
          issuedAtTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        IssuedAtTime.MergeFrom(other.IssuedAtTime);
      }
      if (other.expiryTime_ != null) {
        if (expiryTime_ == null) {
          expiryTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpiryTime.MergeFrom(other.ExpiryTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Provider = input.ReadString();
            break;
          }
          case 18: {
            PlayerIdentifier = input.ReadString();
            break;
          }
          case 26: {
            ProjectName = input.ReadString();
            break;
          }
          case 42: {
            DisplayName = input.ReadString();
            break;
          }
          case 50: {
            Metadata = input.ReadBytes();
            break;
          }
          case 58: {
            if (issuedAtTime_ == null) {
              issuedAtTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(issuedAtTime_);
            break;
          }
          case 66: {
            if (expiryTime_ == null) {
              expiryTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(expiryTime_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// You can exchange a `DevelopmentAuthenticationToken` (DAT) for an anonymous `PlayerIdentityToken` (PIT)
  /// using the `DevelopmentAuthenticationService` (DAS) to join a deployment anonymously.
  /// DATs are intended to be used during the early stage of game development and can be hardcoded into game clients.
  /// </summary>
  public sealed partial class DevelopmentAuthenticationToken : pb::IMessage<DevelopmentAuthenticationToken> {
    private static readonly pb::MessageParser<DevelopmentAuthenticationToken> _parser = new pb::MessageParser<DevelopmentAuthenticationToken>(() => new DevelopmentAuthenticationToken());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DevelopmentAuthenticationToken> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerauthReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DevelopmentAuthenticationToken() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DevelopmentAuthenticationToken(DevelopmentAuthenticationToken other) : this() {
      id_ = other.id_;
      projectName_ = other.projectName_;
      description_ = other.description_;
      CreationTime = other.creationTime_ != null ? other.CreationTime.Clone() : null;
      ExpirationTime = other.expirationTime_ != null ? other.ExpirationTime.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DevelopmentAuthenticationToken Clone() {
      return new DevelopmentAuthenticationToken(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The ID of a DAT. Pass this into requests to a DAS to exchange your DAT for an anonymous PIT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "project_name" field.</summary>
    public const int ProjectNameFieldNumber = 2;
    private string projectName_ = "";
    /// <summary>
    /// The project that the DAT is scoped to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// A user-specified description for the DAT.
    ///
    /// The maximum length is 200 characters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "creation_time" field.</summary>
    public const int CreationTimeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp creationTime_;
    /// <summary>
    /// Creation time of the DAT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreationTime {
      get { return creationTime_; }
      set {
        creationTime_ = value;
      }
    }

    /// <summary>Field number for the "expiration_time" field.</summary>
    public const int ExpirationTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expirationTime_;
    /// <summary>
    /// Expiration time of the DAT.
    ///
    /// The expiration time can be extended using the `UpdateDevelopmentAuthenticationToken` endpoint.
    /// Expired DATs are permanently deleted after one week.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpirationTime {
      get { return expirationTime_; }
      set {
        expirationTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DevelopmentAuthenticationToken);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DevelopmentAuthenticationToken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ProjectName != other.ProjectName) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(CreationTime, other.CreationTime)) return false;
      if (!object.Equals(ExpirationTime, other.ExpirationTime)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (creationTime_ != null) hash ^= CreationTime.GetHashCode();
      if (expirationTime_ != null) hash ^= ExpirationTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (ProjectName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProjectName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (creationTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CreationTime);
      }
      if (expirationTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ExpirationTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (creationTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreationTime);
      }
      if (expirationTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpirationTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DevelopmentAuthenticationToken other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.creationTime_ != null) {
        if (creationTime_ == null) {
          creationTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreationTime.MergeFrom(other.CreationTime);
      }
      if (other.expirationTime_ != null) {
        if (expirationTime_ == null) {
          expirationTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpirationTime.MergeFrom(other.ExpirationTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            ProjectName = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            if (creationTime_ == null) {
              creationTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(creationTime_);
            break;
          }
          case 42: {
            if (expirationTime_ == null) {
              expirationTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(expirationTime_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateDevelopmentAuthenticationTokenRequest : pb::IMessage<CreateDevelopmentAuthenticationTokenRequest> {
    private static readonly pb::MessageParser<CreateDevelopmentAuthenticationTokenRequest> _parser = new pb::MessageParser<CreateDevelopmentAuthenticationTokenRequest>(() => new CreateDevelopmentAuthenticationTokenRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateDevelopmentAuthenticationTokenRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerauthReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDevelopmentAuthenticationTokenRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDevelopmentAuthenticationTokenRequest(CreateDevelopmentAuthenticationTokenRequest other) : this() {
      projectName_ = other.projectName_;
      description_ = other.description_;
      Lifetime = other.lifetime_ != null ? other.Lifetime.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDevelopmentAuthenticationTokenRequest Clone() {
      return new CreateDevelopmentAuthenticationTokenRequest(this);
    }

    /// <summary>Field number for the "project_name" field.</summary>
    public const int ProjectNameFieldNumber = 1;
    private string projectName_ = "";
    /// <summary>
    /// The project that the DAT is scoped to. You must have access to this project.
    ///
    /// This should be between 3 and 32 characters and made up of lower case letters, numbers and underscores only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// A description for the DAT.
    ///
    /// The maximum length is 200 characters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lifetime" field.</summary>
    public const int LifetimeFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Duration lifetime_;
    /// <summary>
    /// The validity period of the DAT starting from the time of this request. This field is optional.
    ///
    /// The maximum value is 90 days. If unset, this field defaults to 30 days.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration Lifetime {
      get { return lifetime_; }
      set {
        lifetime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateDevelopmentAuthenticationTokenRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateDevelopmentAuthenticationTokenRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectName != other.ProjectName) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Lifetime, other.Lifetime)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (lifetime_ != null) hash ^= Lifetime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (lifetime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Lifetime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (lifetime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lifetime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateDevelopmentAuthenticationTokenRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.lifetime_ != null) {
        if (lifetime_ == null) {
          lifetime_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Lifetime.MergeFrom(other.Lifetime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectName = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            if (lifetime_ == null) {
              lifetime_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(lifetime_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateDevelopmentAuthenticationTokenResponse : pb::IMessage<CreateDevelopmentAuthenticationTokenResponse> {
    private static readonly pb::MessageParser<CreateDevelopmentAuthenticationTokenResponse> _parser = new pb::MessageParser<CreateDevelopmentAuthenticationTokenResponse>(() => new CreateDevelopmentAuthenticationTokenResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateDevelopmentAuthenticationTokenResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerauthReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDevelopmentAuthenticationTokenResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDevelopmentAuthenticationTokenResponse(CreateDevelopmentAuthenticationTokenResponse other) : this() {
      DevelopmentAuthenticationToken = other.developmentAuthenticationToken_ != null ? other.DevelopmentAuthenticationToken.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDevelopmentAuthenticationTokenResponse Clone() {
      return new CreateDevelopmentAuthenticationTokenResponse(this);
    }

    /// <summary>Field number for the "development_authentication_token" field.</summary>
    public const int DevelopmentAuthenticationTokenFieldNumber = 1;
    private global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DevelopmentAuthenticationToken developmentAuthenticationToken_;
    /// <summary>
    /// The newly created DAT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DevelopmentAuthenticationToken DevelopmentAuthenticationToken {
      get { return developmentAuthenticationToken_; }
      set {
        developmentAuthenticationToken_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateDevelopmentAuthenticationTokenResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateDevelopmentAuthenticationTokenResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DevelopmentAuthenticationToken, other.DevelopmentAuthenticationToken)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (developmentAuthenticationToken_ != null) hash ^= DevelopmentAuthenticationToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (developmentAuthenticationToken_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DevelopmentAuthenticationToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (developmentAuthenticationToken_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DevelopmentAuthenticationToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateDevelopmentAuthenticationTokenResponse other) {
      if (other == null) {
        return;
      }
      if (other.developmentAuthenticationToken_ != null) {
        if (developmentAuthenticationToken_ == null) {
          developmentAuthenticationToken_ = new global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DevelopmentAuthenticationToken();
        }
        DevelopmentAuthenticationToken.MergeFrom(other.DevelopmentAuthenticationToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (developmentAuthenticationToken_ == null) {
              developmentAuthenticationToken_ = new global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DevelopmentAuthenticationToken();
            }
            input.ReadMessage(developmentAuthenticationToken_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetDevelopmentAuthenticationTokenRequest : pb::IMessage<GetDevelopmentAuthenticationTokenRequest> {
    private static readonly pb::MessageParser<GetDevelopmentAuthenticationTokenRequest> _parser = new pb::MessageParser<GetDevelopmentAuthenticationTokenRequest>(() => new GetDevelopmentAuthenticationTokenRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDevelopmentAuthenticationTokenRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerauthReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDevelopmentAuthenticationTokenRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDevelopmentAuthenticationTokenRequest(GetDevelopmentAuthenticationTokenRequest other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDevelopmentAuthenticationTokenRequest Clone() {
      return new GetDevelopmentAuthenticationTokenRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The ID of the DAT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDevelopmentAuthenticationTokenRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDevelopmentAuthenticationTokenRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDevelopmentAuthenticationTokenRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetDevelopmentAuthenticationTokenResponse : pb::IMessage<GetDevelopmentAuthenticationTokenResponse> {
    private static readonly pb::MessageParser<GetDevelopmentAuthenticationTokenResponse> _parser = new pb::MessageParser<GetDevelopmentAuthenticationTokenResponse>(() => new GetDevelopmentAuthenticationTokenResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDevelopmentAuthenticationTokenResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerauthReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDevelopmentAuthenticationTokenResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDevelopmentAuthenticationTokenResponse(GetDevelopmentAuthenticationTokenResponse other) : this() {
      DevelopmentAuthenticationToken = other.developmentAuthenticationToken_ != null ? other.DevelopmentAuthenticationToken.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDevelopmentAuthenticationTokenResponse Clone() {
      return new GetDevelopmentAuthenticationTokenResponse(this);
    }

    /// <summary>Field number for the "development_authentication_token" field.</summary>
    public const int DevelopmentAuthenticationTokenFieldNumber = 1;
    private global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DevelopmentAuthenticationToken developmentAuthenticationToken_;
    /// <summary>
    /// DAT of the given UUID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DevelopmentAuthenticationToken DevelopmentAuthenticationToken {
      get { return developmentAuthenticationToken_; }
      set {
        developmentAuthenticationToken_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDevelopmentAuthenticationTokenResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDevelopmentAuthenticationTokenResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DevelopmentAuthenticationToken, other.DevelopmentAuthenticationToken)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (developmentAuthenticationToken_ != null) hash ^= DevelopmentAuthenticationToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (developmentAuthenticationToken_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DevelopmentAuthenticationToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (developmentAuthenticationToken_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DevelopmentAuthenticationToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDevelopmentAuthenticationTokenResponse other) {
      if (other == null) {
        return;
      }
      if (other.developmentAuthenticationToken_ != null) {
        if (developmentAuthenticationToken_ == null) {
          developmentAuthenticationToken_ = new global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DevelopmentAuthenticationToken();
        }
        DevelopmentAuthenticationToken.MergeFrom(other.DevelopmentAuthenticationToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (developmentAuthenticationToken_ == null) {
              developmentAuthenticationToken_ = new global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DevelopmentAuthenticationToken();
            }
            input.ReadMessage(developmentAuthenticationToken_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListDevelopmentAuthenticationTokensRequest : pb::IMessage<ListDevelopmentAuthenticationTokensRequest> {
    private static readonly pb::MessageParser<ListDevelopmentAuthenticationTokensRequest> _parser = new pb::MessageParser<ListDevelopmentAuthenticationTokensRequest>(() => new ListDevelopmentAuthenticationTokensRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDevelopmentAuthenticationTokensRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerauthReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDevelopmentAuthenticationTokensRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDevelopmentAuthenticationTokensRequest(ListDevelopmentAuthenticationTokensRequest other) : this() {
      projectName_ = other.projectName_;
      includeExpired_ = other.includeExpired_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDevelopmentAuthenticationTokensRequest Clone() {
      return new ListDevelopmentAuthenticationTokensRequest(this);
    }

    /// <summary>Field number for the "project_name" field.</summary>
    public const int ProjectNameFieldNumber = 1;
    private string projectName_ = "";
    /// <summary>
    /// The project that the queried DATs are scoped to. You must have access to this project.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "include_expired" field.</summary>
    public const int IncludeExpiredFieldNumber = 2;
    private bool includeExpired_;
    /// <summary>
    /// Specifies whether the response will include expired DATs. This field is optional.
    ///
    /// If unset, this field defaults to false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeExpired {
      get { return includeExpired_; }
      set {
        includeExpired_ = value;
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    /// The maximum number of DATs to return in the response. This field is optional.
    ///
    /// The maximum value is 50 results per page. If unset, this field defaults to 20 results per page.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 4;
    private string pageToken_ = "";
    /// <summary>
    /// The token to identify the starting point of the request. This field is optional.
    ///
    /// An empty or invalid token defaults to listing from the start.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDevelopmentAuthenticationTokensRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDevelopmentAuthenticationTokensRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectName != other.ProjectName) return false;
      if (IncludeExpired != other.IncludeExpired) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (IncludeExpired != false) hash ^= IncludeExpired.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectName);
      }
      if (IncludeExpired != false) {
        output.WriteRawTag(16);
        output.WriteBool(IncludeExpired);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (IncludeExpired != false) {
        size += 1 + 1;
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDevelopmentAuthenticationTokensRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.IncludeExpired != false) {
        IncludeExpired = other.IncludeExpired;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectName = input.ReadString();
            break;
          }
          case 16: {
            IncludeExpired = input.ReadBool();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListDevelopmentAuthenticationTokensResponse : pb::IMessage<ListDevelopmentAuthenticationTokensResponse> {
    private static readonly pb::MessageParser<ListDevelopmentAuthenticationTokensResponse> _parser = new pb::MessageParser<ListDevelopmentAuthenticationTokensResponse>(() => new ListDevelopmentAuthenticationTokensResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDevelopmentAuthenticationTokensResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerauthReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDevelopmentAuthenticationTokensResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDevelopmentAuthenticationTokensResponse(ListDevelopmentAuthenticationTokensResponse other) : this() {
      developmentAuthenticationTokens_ = other.developmentAuthenticationTokens_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDevelopmentAuthenticationTokensResponse Clone() {
      return new ListDevelopmentAuthenticationTokensResponse(this);
    }

    /// <summary>Field number for the "development_authentication_tokens" field.</summary>
    public const int DevelopmentAuthenticationTokensFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DevelopmentAuthenticationToken> _repeated_developmentAuthenticationTokens_codec
        = pb::FieldCodec.ForMessage(10, global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DevelopmentAuthenticationToken.Parser);
    private readonly pbc::RepeatedField<global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DevelopmentAuthenticationToken> developmentAuthenticationTokens_ = new pbc::RepeatedField<global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DevelopmentAuthenticationToken>();
    /// <summary>
    /// The DATs corresponding to your query.
    ///
    /// The DATs are listed in descending order sorted by creation time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DevelopmentAuthenticationToken> DevelopmentAuthenticationTokens {
      get { return developmentAuthenticationTokens_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// A token you can supply to the `ListDeployments` RPC to retrieve the next page of
    /// paginated results. This field is optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDevelopmentAuthenticationTokensResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDevelopmentAuthenticationTokensResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!developmentAuthenticationTokens_.Equals(other.developmentAuthenticationTokens_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= developmentAuthenticationTokens_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      developmentAuthenticationTokens_.WriteTo(output, _repeated_developmentAuthenticationTokens_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += developmentAuthenticationTokens_.CalculateSize(_repeated_developmentAuthenticationTokens_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDevelopmentAuthenticationTokensResponse other) {
      if (other == null) {
        return;
      }
      developmentAuthenticationTokens_.Add(other.developmentAuthenticationTokens_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            developmentAuthenticationTokens_.AddEntriesFrom(input, _repeated_developmentAuthenticationTokens_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateDevelopmentAuthenticationTokenRequest : pb::IMessage<UpdateDevelopmentAuthenticationTokenRequest> {
    private static readonly pb::MessageParser<UpdateDevelopmentAuthenticationTokenRequest> _parser = new pb::MessageParser<UpdateDevelopmentAuthenticationTokenRequest>(() => new UpdateDevelopmentAuthenticationTokenRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateDevelopmentAuthenticationTokenRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerauthReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDevelopmentAuthenticationTokenRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDevelopmentAuthenticationTokenRequest(UpdateDevelopmentAuthenticationTokenRequest other) : this() {
      id_ = other.id_;
      description_ = other.description_;
      UpdatedLifetime = other.updatedLifetime_ != null ? other.UpdatedLifetime.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDevelopmentAuthenticationTokenRequest Clone() {
      return new UpdateDevelopmentAuthenticationTokenRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The ID of the DAT to update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// An updated description for the DAT. This field is optional.
    ///
    /// The maximum length is 200 characters. If unset, the description of the DAT remains unchanged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updated_lifetime" field.</summary>
    public const int UpdatedLifetimeFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Duration updatedLifetime_;
    /// <summary>
    /// The updated validity period of the DAT starting from the time of this request. This field is optional.
    ///
    /// Set this field to update and potentially extend the validity period of the DAT.
    /// The maximum value is 90 days. If unset, the validity period of the DAT remains unchanged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration UpdatedLifetime {
      get { return updatedLifetime_; }
      set {
        updatedLifetime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateDevelopmentAuthenticationTokenRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateDevelopmentAuthenticationTokenRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(UpdatedLifetime, other.UpdatedLifetime)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (updatedLifetime_ != null) hash ^= UpdatedLifetime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (updatedLifetime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdatedLifetime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (updatedLifetime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdatedLifetime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateDevelopmentAuthenticationTokenRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.updatedLifetime_ != null) {
        if (updatedLifetime_ == null) {
          updatedLifetime_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        UpdatedLifetime.MergeFrom(other.UpdatedLifetime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            if (updatedLifetime_ == null) {
              updatedLifetime_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(updatedLifetime_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateDevelopmentAuthenticationTokenResponse : pb::IMessage<UpdateDevelopmentAuthenticationTokenResponse> {
    private static readonly pb::MessageParser<UpdateDevelopmentAuthenticationTokenResponse> _parser = new pb::MessageParser<UpdateDevelopmentAuthenticationTokenResponse>(() => new UpdateDevelopmentAuthenticationTokenResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateDevelopmentAuthenticationTokenResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerauthReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDevelopmentAuthenticationTokenResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDevelopmentAuthenticationTokenResponse(UpdateDevelopmentAuthenticationTokenResponse other) : this() {
      DevelopmentAuthenticationToken = other.developmentAuthenticationToken_ != null ? other.DevelopmentAuthenticationToken.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDevelopmentAuthenticationTokenResponse Clone() {
      return new UpdateDevelopmentAuthenticationTokenResponse(this);
    }

    /// <summary>Field number for the "development_authentication_token" field.</summary>
    public const int DevelopmentAuthenticationTokenFieldNumber = 1;
    private global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DevelopmentAuthenticationToken developmentAuthenticationToken_;
    /// <summary>
    /// The updated DAT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DevelopmentAuthenticationToken DevelopmentAuthenticationToken {
      get { return developmentAuthenticationToken_; }
      set {
        developmentAuthenticationToken_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateDevelopmentAuthenticationTokenResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateDevelopmentAuthenticationTokenResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DevelopmentAuthenticationToken, other.DevelopmentAuthenticationToken)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (developmentAuthenticationToken_ != null) hash ^= DevelopmentAuthenticationToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (developmentAuthenticationToken_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DevelopmentAuthenticationToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (developmentAuthenticationToken_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DevelopmentAuthenticationToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateDevelopmentAuthenticationTokenResponse other) {
      if (other == null) {
        return;
      }
      if (other.developmentAuthenticationToken_ != null) {
        if (developmentAuthenticationToken_ == null) {
          developmentAuthenticationToken_ = new global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DevelopmentAuthenticationToken();
        }
        DevelopmentAuthenticationToken.MergeFrom(other.DevelopmentAuthenticationToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (developmentAuthenticationToken_ == null) {
              developmentAuthenticationToken_ = new global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.DevelopmentAuthenticationToken();
            }
            input.ReadMessage(developmentAuthenticationToken_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExpireDevelopmentAuthenticationTokenRequest : pb::IMessage<ExpireDevelopmentAuthenticationTokenRequest> {
    private static readonly pb::MessageParser<ExpireDevelopmentAuthenticationTokenRequest> _parser = new pb::MessageParser<ExpireDevelopmentAuthenticationTokenRequest>(() => new ExpireDevelopmentAuthenticationTokenRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExpireDevelopmentAuthenticationTokenRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerauthReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpireDevelopmentAuthenticationTokenRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpireDevelopmentAuthenticationTokenRequest(ExpireDevelopmentAuthenticationTokenRequest other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpireDevelopmentAuthenticationTokenRequest Clone() {
      return new ExpireDevelopmentAuthenticationTokenRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The ID of the DAT to expire.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExpireDevelopmentAuthenticationTokenRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExpireDevelopmentAuthenticationTokenRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExpireDevelopmentAuthenticationTokenRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExpireDevelopmentAuthenticationTokenResponse : pb::IMessage<ExpireDevelopmentAuthenticationTokenResponse> {
    private static readonly pb::MessageParser<ExpireDevelopmentAuthenticationTokenResponse> _parser = new pb::MessageParser<ExpireDevelopmentAuthenticationTokenResponse>(() => new ExpireDevelopmentAuthenticationTokenResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExpireDevelopmentAuthenticationTokenResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.PlayerAuth.V2Alpha1.PlayerauthReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpireDevelopmentAuthenticationTokenResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpireDevelopmentAuthenticationTokenResponse(ExpireDevelopmentAuthenticationTokenResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpireDevelopmentAuthenticationTokenResponse Clone() {
      return new ExpireDevelopmentAuthenticationTokenResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExpireDevelopmentAuthenticationTokenResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExpireDevelopmentAuthenticationTokenResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExpireDevelopmentAuthenticationTokenResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
