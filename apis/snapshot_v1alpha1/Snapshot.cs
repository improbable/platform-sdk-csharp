// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/improbable/spatialos/snapshot/v1alpha1/snapshot.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Improbable.SpatialOS.Snapshot.V1Alpha1 {

  /// <summary>Holder for reflection information generated from proto/improbable/spatialos/snapshot/v1alpha1/snapshot.proto</summary>
  public static partial class SnapshotReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/improbable/spatialos/snapshot/v1alpha1/snapshot.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SnapshotReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjtwcm90by9pbXByb2JhYmxlL3NwYXRpYWxvcy9zbmFwc2hvdC92MWFscGhh",
            "MS9zbmFwc2hvdC5wcm90bxImaW1wcm9iYWJsZS5zcGF0aWFsb3Muc25hcHNo",
            "b3QudjFhbHBoYTEaI2dvb2dsZS9sb25ncnVubmluZy9vcGVyYXRpb25zLnBy",
            "b3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvGjZnaXRodWIu",
            "Y29tL213aXRrb3cvZ28tcHJvdG8tdmFsaWRhdG9ycy92YWxpZGF0b3IucHJv",
            "dG8iiwIKCFNuYXBzaG90EgoKAmlkGAEgASgJEi0KDHByb2plY3RfbmFtZRgC",
            "IAEoCUIX4t8fEwoRXlthLXowLTlfXXszLDMyfSQSMAoPZGVwbG95bWVudF9u",
            "YW1lGAMgASgJQhfi3x8TChFeW2EtejAtOV9dezMsMzJ9JBIvCgtjcmVhdGVf",
            "dGltZRgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASDAoEc2l6",
            "ZRgFIAEoAxIrCgR0YWdzGAYgAygJQh3i3x8ZChdeW2EtekEtWjAtOV86Li1d",
            "ezIsMzJ9JBIUCgxkb3dubG9hZF91cmwYByABKAkSEAoIY2hlY2tzdW0YCCAB",
            "KAkirwEKFExpc3RTbmFwc2hvdHNSZXF1ZXN0Ei0KDHByb2plY3RfbmFtZRgB",
            "IAEoCUIX4t8fEwoRXlthLXowLTlfXXszLDMyfSQSMAoPZGVwbG95bWVudF9u",
            "YW1lGAIgASgJQhfi3x8TChFeW2EtejAtOV9dezMsMzJ9JBIiCglwYWdlX3Np",
            "emUYAyABKAVCD+LfHwsQ////////////ARISCgpwYWdlX3Rva2VuGAQgASgJ",
            "InQKFUxpc3RTbmFwc2hvdHNSZXNwb25zZRJCCghzbmFwc2hvdBgBIAMoCzIw",
            "LmltcHJvYmFibGUuc3BhdGlhbG9zLnNuYXBzaG90LnYxYWxwaGExLlNuYXBz",
            "aG90EhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSKVAQoSR2V0U25hcHNob3RS",
            "ZXF1ZXN0Ei0KDHByb2plY3RfbmFtZRgBIAEoCUIX4t8fEwoRXlthLXowLTlf",
            "XXszLDMyfSQSMAoPZGVwbG95bWVudF9uYW1lGAIgASgJQhfi3x8TChFeW2Et",
            "ejAtOV9dezMsMzJ9JBIeCgJpZBgDIAEoCUIS4t8fDgoMXlstXT9bMC05XSsk",
            "IlkKE0dldFNuYXBzaG90UmVzcG9uc2USQgoIc25hcHNob3QYASABKAsyMC5p",
            "bXByb2JhYmxlLnNwYXRpYWxvcy5zbmFwc2hvdC52MWFscGhhMS5TbmFwc2hv",
            "dCJZChNUYWtlU25hcHNob3RSZXF1ZXN0EkIKCHNuYXBzaG90GAEgASgLMjAu",
            "aW1wcm9iYWJsZS5zcGF0aWFsb3Muc25hcHNob3QudjFhbHBoYTEuU25hcHNo",
            "b3QiFgoUVGFrZVNuYXBzaG90TWV0YWRhdGEiWwoVVXBsb2FkU25hcHNob3RS",
            "ZXF1ZXN0EkIKCHNuYXBzaG90GAEgASgLMjAuaW1wcm9iYWJsZS5zcGF0aWFs",
            "b3Muc25hcHNob3QudjFhbHBoYTEuU25hcHNob3QicAoWVXBsb2FkU25hcHNo",
            "b3RSZXNwb25zZRISCgp1cGxvYWRfdXJsGAEgASgJEkIKCHNuYXBzaG90GAIg",
            "ASgLMjAuaW1wcm9iYWJsZS5zcGF0aWFsb3Muc25hcHNob3QudjFhbHBoYTEu",
            "U25hcHNob3QilwEKFENvbmZpcm1VcGxvYWRSZXF1ZXN0Ei0KDHByb2plY3Rf",
            "bmFtZRgBIAEoCUIX4t8fEwoRXlthLXowLTlfXXszLDMyfSQSMAoPZGVwbG95",
            "bWVudF9uYW1lGAIgASgJQhfi3x8TChFeW2EtejAtOV9dezMsMzJ9JBIeCgJp",
            "ZBgDIAEoCUIS4t8fDgoMXlstXT9bMC05XSskIlsKFUNvbmZpcm1VcGxvYWRS",
            "ZXNwb25zZRJCCghzbmFwc2hvdBgBIAEoCzIwLmltcHJvYmFibGUuc3BhdGlh",
            "bG9zLnNuYXBzaG90LnYxYWxwaGExLlNuYXBzaG90MrYFCg9TbmFwc2hvdFNl",
            "cnZpY2USjAEKDUxpc3RTbmFwc2hvdHMSPC5pbXByb2JhYmxlLnNwYXRpYWxv",
            "cy5zbmFwc2hvdC52MWFscGhhMS5MaXN0U25hcHNob3RzUmVxdWVzdBo9Lmlt",
            "cHJvYmFibGUuc3BhdGlhbG9zLnNuYXBzaG90LnYxYWxwaGExLkxpc3RTbmFw",
            "c2hvdHNSZXNwb25zZRKGAQoLR2V0U25hcHNob3QSOi5pbXByb2JhYmxlLnNw",
            "YXRpYWxvcy5zbmFwc2hvdC52MWFscGhhMS5HZXRTbmFwc2hvdFJlcXVlc3Qa",
            "Oy5pbXByb2JhYmxlLnNwYXRpYWxvcy5zbmFwc2hvdC52MWFscGhhMS5HZXRT",
            "bmFwc2hvdFJlc3BvbnNlEmoKDFRha2VTbmFwc2hvdBI7LmltcHJvYmFibGUu",
            "c3BhdGlhbG9zLnNuYXBzaG90LnYxYWxwaGExLlRha2VTbmFwc2hvdFJlcXVl",
            "c3QaHS5nb29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uEo8BCg5VcGxvYWRT",
            "bmFwc2hvdBI9LmltcHJvYmFibGUuc3BhdGlhbG9zLnNuYXBzaG90LnYxYWxw",
            "aGExLlVwbG9hZFNuYXBzaG90UmVxdWVzdBo+LmltcHJvYmFibGUuc3BhdGlh",
            "bG9zLnNuYXBzaG90LnYxYWxwaGExLlVwbG9hZFNuYXBzaG90UmVzcG9uc2US",
            "jAEKDUNvbmZpcm1VcGxvYWQSPC5pbXByb2JhYmxlLnNwYXRpYWxvcy5zbmFw",
            "c2hvdC52MWFscGhhMS5Db25maXJtVXBsb2FkUmVxdWVzdBo9LmltcHJvYmFi",
            "bGUuc3BhdGlhbG9zLnNuYXBzaG90LnYxYWxwaGExLkNvbmZpcm1VcGxvYWRS",
            "ZXNwb25zZUJaWi9pbXByb2JhYmxlL3NwYXRpYWxvcy9zbmFwc2hvdC92MWFs",
            "cGhhMTtzbmFwc2hvdKoCJkltcHJvYmFibGUuU3BhdGlhbE9TLlNuYXBzaG90",
            "LlYxQWxwaGExYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.LongRunning.OperationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Validator.ValidatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot), global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot.Parser, new[]{ "Id", "ProjectName", "DeploymentName", "CreateTime", "Size", "Tags", "DownloadUrl", "Checksum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Snapshot.V1Alpha1.ListSnapshotsRequest), global::Improbable.SpatialOS.Snapshot.V1Alpha1.ListSnapshotsRequest.Parser, new[]{ "ProjectName", "DeploymentName", "PageSize", "PageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Snapshot.V1Alpha1.ListSnapshotsResponse), global::Improbable.SpatialOS.Snapshot.V1Alpha1.ListSnapshotsResponse.Parser, new[]{ "Snapshot", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Snapshot.V1Alpha1.GetSnapshotRequest), global::Improbable.SpatialOS.Snapshot.V1Alpha1.GetSnapshotRequest.Parser, new[]{ "ProjectName", "DeploymentName", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Snapshot.V1Alpha1.GetSnapshotResponse), global::Improbable.SpatialOS.Snapshot.V1Alpha1.GetSnapshotResponse.Parser, new[]{ "Snapshot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Snapshot.V1Alpha1.TakeSnapshotRequest), global::Improbable.SpatialOS.Snapshot.V1Alpha1.TakeSnapshotRequest.Parser, new[]{ "Snapshot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Snapshot.V1Alpha1.TakeSnapshotMetadata), global::Improbable.SpatialOS.Snapshot.V1Alpha1.TakeSnapshotMetadata.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Snapshot.V1Alpha1.UploadSnapshotRequest), global::Improbable.SpatialOS.Snapshot.V1Alpha1.UploadSnapshotRequest.Parser, new[]{ "Snapshot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Snapshot.V1Alpha1.UploadSnapshotResponse), global::Improbable.SpatialOS.Snapshot.V1Alpha1.UploadSnapshotResponse.Parser, new[]{ "UploadUrl", "Snapshot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Snapshot.V1Alpha1.ConfirmUploadRequest), global::Improbable.SpatialOS.Snapshot.V1Alpha1.ConfirmUploadRequest.Parser, new[]{ "ProjectName", "DeploymentName", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Snapshot.V1Alpha1.ConfirmUploadResponse), global::Improbable.SpatialOS.Snapshot.V1Alpha1.ConfirmUploadResponse.Parser, new[]{ "Snapshot" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Snapshot : pb::IMessage<Snapshot> {
    private static readonly pb::MessageParser<Snapshot> _parser = new pb::MessageParser<Snapshot>(() => new Snapshot());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Snapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Snapshot.V1Alpha1.SnapshotReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Snapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Snapshot(Snapshot other) : this() {
      id_ = other.id_;
      projectName_ = other.projectName_;
      deploymentName_ = other.deploymentName_;
      CreateTime = other.createTime_ != null ? other.CreateTime.Clone() : null;
      size_ = other.size_;
      tags_ = other.tags_.Clone();
      downloadUrl_ = other.downloadUrl_;
      checksum_ = other.checksum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Snapshot Clone() {
      return new Snapshot(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// A unique identifier for the snapshot. Read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "project_name" field.</summary>
    public const int ProjectNameFieldNumber = 2;
    private string projectName_ = "";
    /// <summary>
    /// The project that the snapshot is associated with. You can only supply this with
    /// `TakeSnapshot`or `UploadSnapshot`.
    ///
    /// It must conform to the regex: ^[a-z0-9_]{3,32}$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deployment_name" field.</summary>
    public const int DeploymentNameFieldNumber = 3;
    private string deploymentName_ = "";
    /// <summary>
    /// The deployment that the snapshot is associated with. You can only supply this with
    /// `TakeSnapshot` or `UploadSnapshot`.
    ///
    /// It must conform to the regex: ^[a-z0-9_]{3,32}$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeploymentName {
      get { return deploymentName_; }
      set {
        deploymentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// The time at which the snapshot was taken (either taken from a running deployment or
    /// initiated by an upload). Read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 5;
    private long size_;
    /// <summary>
    /// The size of the snapshot in bytes. Read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Tags associated with the snapshot. Tags are set of strings which you can use to identify
    /// deployments. You must supply this with `TakeSnapshot` or `UploadSnapshot`.
    ///
    /// It must conform to the regex: ^[a-zA-Z0-9_:.-]{2,32}$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "download_url" field.</summary>
    public const int DownloadUrlFieldNumber = 7;
    private string downloadUrl_ = "";
    /// <summary>
    /// A download URL for the snapshot, which is valid for five minutes. Read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DownloadUrl {
      get { return downloadUrl_; }
      set {
        downloadUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "checksum" field.</summary>
    public const int ChecksumFieldNumber = 8;
    private string checksum_ = "";
    /// <summary>
    /// A checksum hash of the snapshot file. You can only supply this with `UploadSnapshot`.
    ///
    /// Currently, we only support base64 MD5 format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Checksum {
      get { return checksum_; }
      set {
        checksum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Snapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Snapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ProjectName != other.ProjectName) return false;
      if (DeploymentName != other.DeploymentName) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (Size != other.Size) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (DownloadUrl != other.DownloadUrl) return false;
      if (Checksum != other.Checksum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (DeploymentName.Length != 0) hash ^= DeploymentName.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (Size != 0L) hash ^= Size.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (DownloadUrl.Length != 0) hash ^= DownloadUrl.GetHashCode();
      if (Checksum.Length != 0) hash ^= Checksum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (ProjectName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProjectName);
      }
      if (DeploymentName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DeploymentName);
      }
      if (createTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CreateTime);
      }
      if (Size != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Size);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (DownloadUrl.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DownloadUrl);
      }
      if (Checksum.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Checksum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (DeploymentName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeploymentName);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (Size != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Size);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (DownloadUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DownloadUrl);
      }
      if (Checksum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Checksum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Snapshot other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.DeploymentName.Length != 0) {
        DeploymentName = other.DeploymentName;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.Size != 0L) {
        Size = other.Size;
      }
      tags_.Add(other.tags_);
      if (other.DownloadUrl.Length != 0) {
        DownloadUrl = other.DownloadUrl;
      }
      if (other.Checksum.Length != 0) {
        Checksum = other.Checksum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            ProjectName = input.ReadString();
            break;
          }
          case 26: {
            DeploymentName = input.ReadString();
            break;
          }
          case 34: {
            if (createTime_ == null) {
              createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(createTime_);
            break;
          }
          case 40: {
            Size = input.ReadInt64();
            break;
          }
          case 50: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 58: {
            DownloadUrl = input.ReadString();
            break;
          }
          case 66: {
            Checksum = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListSnapshotsRequest : pb::IMessage<ListSnapshotsRequest> {
    private static readonly pb::MessageParser<ListSnapshotsRequest> _parser = new pb::MessageParser<ListSnapshotsRequest>(() => new ListSnapshotsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListSnapshotsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Snapshot.V1Alpha1.SnapshotReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSnapshotsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSnapshotsRequest(ListSnapshotsRequest other) : this() {
      projectName_ = other.projectName_;
      deploymentName_ = other.deploymentName_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSnapshotsRequest Clone() {
      return new ListSnapshotsRequest(this);
    }

    /// <summary>Field number for the "project_name" field.</summary>
    public const int ProjectNameFieldNumber = 1;
    private string projectName_ = "";
    /// <summary>
    /// The name of the project to list snapshots for.
    ///
    /// It must conform to the regex: ^[a-z0-9_]{3,32}$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deployment_name" field.</summary>
    public const int DeploymentNameFieldNumber = 2;
    private string deploymentName_ = "";
    /// <summary>
    /// The deployment to list snapshots for.
    ///
    /// It must conform to the regex: ^[a-z0-9_]{3,32}$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeploymentName {
      get { return deploymentName_; }
      set {
        deploymentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    /// Optional. The number of snapshots to fetch in each page of the paginated results.
    /// If provided, the `page_size` must be a positive integer. If omitted,
    /// the default value of 20 is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 4;
    private string pageToken_ = "";
    /// <summary>
    /// Optional. An opaque token to identify the start of the paginated results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListSnapshotsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListSnapshotsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectName != other.ProjectName) return false;
      if (DeploymentName != other.DeploymentName) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (DeploymentName.Length != 0) hash ^= DeploymentName.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectName);
      }
      if (DeploymentName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeploymentName);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (DeploymentName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeploymentName);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListSnapshotsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.DeploymentName.Length != 0) {
        DeploymentName = other.DeploymentName;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectName = input.ReadString();
            break;
          }
          case 18: {
            DeploymentName = input.ReadString();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListSnapshotsResponse : pb::IMessage<ListSnapshotsResponse> {
    private static readonly pb::MessageParser<ListSnapshotsResponse> _parser = new pb::MessageParser<ListSnapshotsResponse>(() => new ListSnapshotsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListSnapshotsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Snapshot.V1Alpha1.SnapshotReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSnapshotsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSnapshotsResponse(ListSnapshotsResponse other) : this() {
      snapshot_ = other.snapshot_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSnapshotsResponse Clone() {
      return new ListSnapshotsResponse(this);
    }

    /// <summary>Field number for the "snapshot" field.</summary>
    public const int SnapshotFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot> _repeated_snapshot_codec
        = pb::FieldCodec.ForMessage(10, global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot.Parser);
    private readonly pbc::RepeatedField<global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot> snapshot_ = new pbc::RepeatedField<global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot>();
    /// <summary>
    /// By default, snapshots are sorted by creation time (descending).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot> Snapshot {
      get { return snapshot_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// A token which you can supply to the `ListSnapshot` RPC to retrieve the next page of paginated
    /// results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListSnapshotsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListSnapshotsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!snapshot_.Equals(other.snapshot_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= snapshot_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      snapshot_.WriteTo(output, _repeated_snapshot_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += snapshot_.CalculateSize(_repeated_snapshot_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListSnapshotsResponse other) {
      if (other == null) {
        return;
      }
      snapshot_.Add(other.snapshot_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            snapshot_.AddEntriesFrom(input, _repeated_snapshot_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetSnapshotRequest : pb::IMessage<GetSnapshotRequest> {
    private static readonly pb::MessageParser<GetSnapshotRequest> _parser = new pb::MessageParser<GetSnapshotRequest>(() => new GetSnapshotRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSnapshotRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Snapshot.V1Alpha1.SnapshotReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSnapshotRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSnapshotRequest(GetSnapshotRequest other) : this() {
      projectName_ = other.projectName_;
      deploymentName_ = other.deploymentName_;
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSnapshotRequest Clone() {
      return new GetSnapshotRequest(this);
    }

    /// <summary>Field number for the "project_name" field.</summary>
    public const int ProjectNameFieldNumber = 1;
    private string projectName_ = "";
    /// <summary>
    /// The project the snapshot belongs to.
    ///
    /// It must conform to the regex: ^[a-z0-9_]{3,32}$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deployment_name" field.</summary>
    public const int DeploymentNameFieldNumber = 2;
    private string deploymentName_ = "";
    /// <summary>
    /// The deployment the snapshot belongs to.
    ///
    /// It must conform to the regex: ^[a-z0-9_]{3,32}$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeploymentName {
      get { return deploymentName_; }
      set {
        deploymentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private string id_ = "";
    /// <summary>
    /// The identifier for the snapshot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSnapshotRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSnapshotRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectName != other.ProjectName) return false;
      if (DeploymentName != other.DeploymentName) return false;
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (DeploymentName.Length != 0) hash ^= DeploymentName.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectName);
      }
      if (DeploymentName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeploymentName);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (DeploymentName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeploymentName);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSnapshotRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.DeploymentName.Length != 0) {
        DeploymentName = other.DeploymentName;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectName = input.ReadString();
            break;
          }
          case 18: {
            DeploymentName = input.ReadString();
            break;
          }
          case 26: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetSnapshotResponse : pb::IMessage<GetSnapshotResponse> {
    private static readonly pb::MessageParser<GetSnapshotResponse> _parser = new pb::MessageParser<GetSnapshotResponse>(() => new GetSnapshotResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSnapshotResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Snapshot.V1Alpha1.SnapshotReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSnapshotResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSnapshotResponse(GetSnapshotResponse other) : this() {
      Snapshot = other.snapshot_ != null ? other.Snapshot.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSnapshotResponse Clone() {
      return new GetSnapshotResponse(this);
    }

    /// <summary>Field number for the "snapshot" field.</summary>
    public const int SnapshotFieldNumber = 1;
    private global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot snapshot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot Snapshot {
      get { return snapshot_; }
      set {
        snapshot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSnapshotResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSnapshotResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Snapshot, other.Snapshot)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (snapshot_ != null) hash ^= Snapshot.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (snapshot_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Snapshot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (snapshot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Snapshot);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSnapshotResponse other) {
      if (other == null) {
        return;
      }
      if (other.snapshot_ != null) {
        if (snapshot_ == null) {
          snapshot_ = new global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot();
        }
        Snapshot.MergeFrom(other.Snapshot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (snapshot_ == null) {
              snapshot_ = new global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot();
            }
            input.ReadMessage(snapshot_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TakeSnapshotRequest : pb::IMessage<TakeSnapshotRequest> {
    private static readonly pb::MessageParser<TakeSnapshotRequest> _parser = new pb::MessageParser<TakeSnapshotRequest>(() => new TakeSnapshotRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TakeSnapshotRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Snapshot.V1Alpha1.SnapshotReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeSnapshotRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeSnapshotRequest(TakeSnapshotRequest other) : this() {
      Snapshot = other.snapshot_ != null ? other.Snapshot.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeSnapshotRequest Clone() {
      return new TakeSnapshotRequest(this);
    }

    /// <summary>Field number for the "snapshot" field.</summary>
    public const int SnapshotFieldNumber = 1;
    private global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot snapshot_;
    /// <summary>
    /// These fields are mandatory:
    /// - `project_name`
    /// - `deployment_name`
    ///
    /// These fields are optional:
    /// - `tags`
    ///
    /// Other set values will be ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot Snapshot {
      get { return snapshot_; }
      set {
        snapshot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TakeSnapshotRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TakeSnapshotRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Snapshot, other.Snapshot)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (snapshot_ != null) hash ^= Snapshot.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (snapshot_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Snapshot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (snapshot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Snapshot);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TakeSnapshotRequest other) {
      if (other == null) {
        return;
      }
      if (other.snapshot_ != null) {
        if (snapshot_ == null) {
          snapshot_ = new global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot();
        }
        Snapshot.MergeFrom(other.Snapshot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (snapshot_ == null) {
              snapshot_ = new global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot();
            }
            input.ReadMessage(snapshot_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TakeSnapshotMetadata : pb::IMessage<TakeSnapshotMetadata> {
    private static readonly pb::MessageParser<TakeSnapshotMetadata> _parser = new pb::MessageParser<TakeSnapshotMetadata>(() => new TakeSnapshotMetadata());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TakeSnapshotMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Snapshot.V1Alpha1.SnapshotReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeSnapshotMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeSnapshotMetadata(TakeSnapshotMetadata other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeSnapshotMetadata Clone() {
      return new TakeSnapshotMetadata(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TakeSnapshotMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TakeSnapshotMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TakeSnapshotMetadata other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class UploadSnapshotRequest : pb::IMessage<UploadSnapshotRequest> {
    private static readonly pb::MessageParser<UploadSnapshotRequest> _parser = new pb::MessageParser<UploadSnapshotRequest>(() => new UploadSnapshotRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UploadSnapshotRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Snapshot.V1Alpha1.SnapshotReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadSnapshotRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadSnapshotRequest(UploadSnapshotRequest other) : this() {
      Snapshot = other.snapshot_ != null ? other.Snapshot.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadSnapshotRequest Clone() {
      return new UploadSnapshotRequest(this);
    }

    /// <summary>Field number for the "snapshot" field.</summary>
    public const int SnapshotFieldNumber = 1;
    private global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot snapshot_;
    /// <summary>
    /// These fields are mandatory:
    /// - `project_name`
    /// - `deployment_name`
    /// - `checksum`
    ///
    /// These fields are optional:
    /// - `tags`
    ///
    /// Other set values will be ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot Snapshot {
      get { return snapshot_; }
      set {
        snapshot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UploadSnapshotRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UploadSnapshotRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Snapshot, other.Snapshot)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (snapshot_ != null) hash ^= Snapshot.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (snapshot_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Snapshot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (snapshot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Snapshot);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UploadSnapshotRequest other) {
      if (other == null) {
        return;
      }
      if (other.snapshot_ != null) {
        if (snapshot_ == null) {
          snapshot_ = new global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot();
        }
        Snapshot.MergeFrom(other.Snapshot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (snapshot_ == null) {
              snapshot_ = new global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot();
            }
            input.ReadMessage(snapshot_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UploadSnapshotResponse : pb::IMessage<UploadSnapshotResponse> {
    private static readonly pb::MessageParser<UploadSnapshotResponse> _parser = new pb::MessageParser<UploadSnapshotResponse>(() => new UploadSnapshotResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UploadSnapshotResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Snapshot.V1Alpha1.SnapshotReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadSnapshotResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadSnapshotResponse(UploadSnapshotResponse other) : this() {
      uploadUrl_ = other.uploadUrl_;
      Snapshot = other.snapshot_ != null ? other.Snapshot.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadSnapshotResponse Clone() {
      return new UploadSnapshotResponse(this);
    }

    /// <summary>Field number for the "upload_url" field.</summary>
    public const int UploadUrlFieldNumber = 1;
    private string uploadUrl_ = "";
    /// <summary>
    /// A URL to accept the snapshot's contents.
    ///
    /// You should supply the contents in the body of an HTTP POST request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UploadUrl {
      get { return uploadUrl_; }
      set {
        uploadUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "snapshot" field.</summary>
    public const int SnapshotFieldNumber = 2;
    private global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot snapshot_;
    /// <summary>
    /// The created snapshot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot Snapshot {
      get { return snapshot_; }
      set {
        snapshot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UploadSnapshotResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UploadSnapshotResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UploadUrl != other.UploadUrl) return false;
      if (!object.Equals(Snapshot, other.Snapshot)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UploadUrl.Length != 0) hash ^= UploadUrl.GetHashCode();
      if (snapshot_ != null) hash ^= Snapshot.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UploadUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UploadUrl);
      }
      if (snapshot_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Snapshot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UploadUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UploadUrl);
      }
      if (snapshot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Snapshot);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UploadSnapshotResponse other) {
      if (other == null) {
        return;
      }
      if (other.UploadUrl.Length != 0) {
        UploadUrl = other.UploadUrl;
      }
      if (other.snapshot_ != null) {
        if (snapshot_ == null) {
          snapshot_ = new global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot();
        }
        Snapshot.MergeFrom(other.Snapshot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UploadUrl = input.ReadString();
            break;
          }
          case 18: {
            if (snapshot_ == null) {
              snapshot_ = new global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot();
            }
            input.ReadMessage(snapshot_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfirmUploadRequest : pb::IMessage<ConfirmUploadRequest> {
    private static readonly pb::MessageParser<ConfirmUploadRequest> _parser = new pb::MessageParser<ConfirmUploadRequest>(() => new ConfirmUploadRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfirmUploadRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Snapshot.V1Alpha1.SnapshotReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmUploadRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmUploadRequest(ConfirmUploadRequest other) : this() {
      projectName_ = other.projectName_;
      deploymentName_ = other.deploymentName_;
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmUploadRequest Clone() {
      return new ConfirmUploadRequest(this);
    }

    /// <summary>Field number for the "project_name" field.</summary>
    public const int ProjectNameFieldNumber = 1;
    private string projectName_ = "";
    /// <summary>
    /// The project the snapshot belongs to.
    ///
    /// It must conform to the regex: ^[a-z0-9_]{3,32}$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deployment_name" field.</summary>
    public const int DeploymentNameFieldNumber = 2;
    private string deploymentName_ = "";
    /// <summary>
    /// The deployment the snapshot belongs to.
    ///
    /// It must conform to the regex: ^[a-z0-9_]{3,32}$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeploymentName {
      get { return deploymentName_; }
      set {
        deploymentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private string id_ = "";
    /// <summary>
    /// The identifier for the uploaded snapshot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfirmUploadRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfirmUploadRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectName != other.ProjectName) return false;
      if (DeploymentName != other.DeploymentName) return false;
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (DeploymentName.Length != 0) hash ^= DeploymentName.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectName);
      }
      if (DeploymentName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeploymentName);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (DeploymentName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeploymentName);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfirmUploadRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.DeploymentName.Length != 0) {
        DeploymentName = other.DeploymentName;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectName = input.ReadString();
            break;
          }
          case 18: {
            DeploymentName = input.ReadString();
            break;
          }
          case 26: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfirmUploadResponse : pb::IMessage<ConfirmUploadResponse> {
    private static readonly pb::MessageParser<ConfirmUploadResponse> _parser = new pb::MessageParser<ConfirmUploadResponse>(() => new ConfirmUploadResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfirmUploadResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Snapshot.V1Alpha1.SnapshotReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmUploadResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmUploadResponse(ConfirmUploadResponse other) : this() {
      Snapshot = other.snapshot_ != null ? other.Snapshot.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmUploadResponse Clone() {
      return new ConfirmUploadResponse(this);
    }

    /// <summary>Field number for the "snapshot" field.</summary>
    public const int SnapshotFieldNumber = 1;
    private global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot snapshot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot Snapshot {
      get { return snapshot_; }
      set {
        snapshot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfirmUploadResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfirmUploadResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Snapshot, other.Snapshot)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (snapshot_ != null) hash ^= Snapshot.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (snapshot_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Snapshot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (snapshot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Snapshot);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfirmUploadResponse other) {
      if (other == null) {
        return;
      }
      if (other.snapshot_ != null) {
        if (snapshot_ == null) {
          snapshot_ = new global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot();
        }
        Snapshot.MergeFrom(other.Snapshot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (snapshot_ == null) {
              snapshot_ = new global::Improbable.SpatialOS.Snapshot.V1Alpha1.Snapshot();
            }
            input.ReadMessage(snapshot_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
