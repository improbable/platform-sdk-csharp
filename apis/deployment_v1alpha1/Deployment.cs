// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/improbable/spatialos/deployment/v1alpha1/deployment.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Improbable.SpatialOS.Deployment.V1Alpha1 {

  /// <summary>Holder for reflection information generated from proto/improbable/spatialos/deployment/v1alpha1/deployment.proto</summary>
  public static partial class DeploymentReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/improbable/spatialos/deployment/v1alpha1/deployment.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DeploymentReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cj9wcm90by9pbXByb2JhYmxlL3NwYXRpYWxvcy9kZXBsb3ltZW50L3YxYWxw",
            "aGExL2RlcGxveW1lbnQucHJvdG8SKGltcHJvYmFibGUuc3BhdGlhbG9zLmRl",
            "cGxveW1lbnQudjFhbHBoYTEaI2dvb2dsZS9sb25ncnVubmluZy9vcGVyYXRp",
            "b25zLnByb3RvGiBnb29nbGUvcHJvdG9idWYvZmllbGRfbWFzay5wcm90bxof",
            "Z29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxoeZ29vZ2xlL3Byb3Rv",
            "YnVmL2R1cmF0aW9uLnByb3RvGjZnaXRodWIuY29tL213aXRrb3cvZ28tcHJv",
            "dG8tdmFsaWRhdG9ycy92YWxpZGF0b3IucHJvdG8ijQcKCkRlcGxveW1lbnQS",
            "CgoCaWQYASABKAkSLQoMcHJvamVjdF9uYW1lGAIgASgJQhfi3x8TChFeW2Et",
            "ejAtOV9dezMsMzJ9JBIlCgRuYW1lGAMgASgJQhfi3x8TChFeW2EtejAtOV9d",
            "ezMsMzJ9JBITCgtyZWdpb25fY29kZRgEIAEoCRIUCgxjbHVzdGVyX2NvZGUY",
            "BSABKAkSEwoLYXNzZW1ibHlfaWQYByABKAkSHAoUc3RhcnRpbmdfc25hcHNo",
            "b3RfaWQYCCABKAkSCwoDdGFnGAkgAygJEksKBnN0YXR1cxgKIAEoDjI7Lmlt",
            "cHJvYmFibGUuc3BhdGlhbG9zLmRlcGxveW1lbnQudjFhbHBoYTEuRGVwbG95",
            "bWVudC5TdGF0dXMSTQoNbGF1bmNoX2NvbmZpZxgLIAEoCzI2LmltcHJvYmFi",
            "bGUuc3BhdGlhbG9zLmRlcGxveW1lbnQudjFhbHBoYTEuTGF1bmNoQ29uZmln",
            "EkoKDHdvcmtlcl9mbGFncxgMIAMoCzI0LmltcHJvYmFibGUuc3BhdGlhbG9z",
            "LmRlcGxveW1lbnQudjFhbHBoYTEuV29ya2VyRmxhZxJNCgtwbGF5ZXJfaW5m",
            "bxgNIAEoCzI0LmltcHJvYmFibGUuc3BhdGlhbG9zLmRlcGxveW1lbnQudjFh",
            "bHBoYTEuUGxheWVySW5mb0ICGAESLgoKc3RhcnRfdGltZRgOIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLQoJc3RvcF90aW1lGA8gASgLMhou",
            "Z29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBJeChx3b3JrZXJfY29ubmVjdGlv",
            "bl9jYXBhY2l0aWVzGBAgAygLMjguaW1wcm9iYWJsZS5zcGF0aWFsb3MuZGVw",
            "bG95bWVudC52MWFscGhhMS5Xb3JrZXJDYXBhY2l0eRJgCh13b3JrZXJfY29u",
            "bmVjdGlvbl9yYXRlX2xpbWl0cxgRIAMoCzI5LmltcHJvYmFibGUuc3BhdGlh",
            "bG9zLmRlcGxveW1lbnQudjFhbHBoYTEuV29ya2VyUmF0ZUxpbWl0IloKBlN0",
            "YXR1cxILCgdVTktOT1dOEAASDAoIU1RBUlRJTkcQZBIMCgdSVU5OSU5HEMgB",
            "Eg0KCFNUT1BQSU5HEKwCEgwKB1NUT1BQRUQQkAMSCgoFRVJST1IQ9AMiaAoO",
            "V29ya2VyQ2FwYWNpdHkSEwoLd29ya2VyX3R5cGUYASABKAkSJQoMbWF4X2Nh",
            "cGFjaXR5GAIgASgFQg/i3x8LEP///////////wESGgoScmVtYWluaW5nX2Nh",
            "cGFjaXR5GAMgASgFInkKD1dvcmtlclJhdGVMaW1pdBITCgt3b3JrZXJfdHlw",
            "ZRgBIAEoCRIzCghkdXJhdGlvbhgCIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5E",
            "dXJhdGlvbkIG4t8fAiABEhwKFHJlcXVlc3RzX2luX2R1cmF0aW9uGAMgASgN",
            "IiMKDExhdW5jaENvbmZpZxITCgtjb25maWdfanNvbhgBIAEoCSI9CgpXb3Jr",
            "ZXJGbGFnEhMKC3dvcmtlcl90eXBlGAEgASgJEgsKA2tleRgCIAEoCRINCgV2",
            "YWx1ZRgDIAEoCSJMCgpQbGF5ZXJJbmZvEhYKDmFjdGl2ZV9wbGF5ZXJzGAEg",
            "ASgDEhAKCGNhcGFjaXR5GAIgASgDEhQKDHF1ZXVlX2xlbmd0aBgDIAEoAyK2",
            "AQoWTGlzdERlcGxveW1lbnRzUmVxdWVzdBItCgxwcm9qZWN0X25hbWUYASAB",
            "KAlCF+LfHxMKEV5bYS16MC05X117MywzMn0kEiQKCXBhZ2Vfc2l6ZRgCIAEo",
            "BUIR4t8fDRD///////////8BGDMSEgoKcGFnZV90b2tlbhgDIAEoCRIzCg9k",
            "ZXBsb3ltZW50X25hbWUYBCABKAlCGuLfHxYKFF4kfF5bYS16MC05X117Mywz",
            "Mn0kIn0KF0xpc3REZXBsb3ltZW50c1Jlc3BvbnNlEkkKC2RlcGxveW1lbnRz",
            "GAEgAygLMjQuaW1wcm9iYWJsZS5zcGF0aWFsb3MuZGVwbG95bWVudC52MWFs",
            "cGhhMS5EZXBsb3ltZW50EhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSJRChRH",
            "ZXREZXBsb3ltZW50UmVxdWVzdBItCgxwcm9qZWN0X25hbWUYASABKAlCF+Lf",
            "HxMKEV5bYS16MC05X117MywzMn0kEgoKAmlkGAIgASgJImEKFUdldERlcGxv",
            "eW1lbnRSZXNwb25zZRJICgpkZXBsb3ltZW50GAEgASgLMjQuaW1wcm9iYWJs",
            "ZS5zcGF0aWFsb3MuZGVwbG95bWVudC52MWFscGhhMS5EZXBsb3ltZW50ImsK",
            "F0NyZWF0ZURlcGxveW1lbnRSZXF1ZXN0ElAKCmRlcGxveW1lbnQYAiABKAsy",
            "NC5pbXByb2JhYmxlLnNwYXRpYWxvcy5kZXBsb3ltZW50LnYxYWxwaGExLkRl",
            "cGxveW1lbnRCBuLfHwIgASIaChhDcmVhdGVEZXBsb3ltZW50TWV0YWRhdGEi",
            "nAEKF1VwZGF0ZURlcGxveW1lbnRSZXF1ZXN0ElAKCmRlcGxveW1lbnQYASAB",
            "KAsyNC5pbXByb2JhYmxlLnNwYXRpYWxvcy5kZXBsb3ltZW50LnYxYWxwaGEx",
            "LkRlcGxveW1lbnRCBuLfHwIgARIvCgt1cGRhdGVfbWFzaxgCIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5GaWVsZE1hc2siZAoYVXBkYXRlRGVwbG95bWVudFJl",
            "c3BvbnNlEkgKCmRlcGxveW1lbnQYASABKAsyNC5pbXByb2JhYmxlLnNwYXRp",
            "YWxvcy5kZXBsb3ltZW50LnYxYWxwaGExLkRlcGxveW1lbnQiUgoVU3RvcERl",
            "cGxveW1lbnRSZXF1ZXN0Ei0KDHByb2plY3RfbmFtZRgBIAEoCUIX4t8fEwoR",
            "XlthLXowLTlfXXszLDMyfSQSCgoCaWQYAiABKAkiGAoWU3RvcERlcGxveW1l",
            "bnRSZXNwb25zZTLnBQoRRGVwbG95bWVudFNlcnZpY2USlgEKD0xpc3REZXBs",
            "b3ltZW50cxJALmltcHJvYmFibGUuc3BhdGlhbG9zLmRlcGxveW1lbnQudjFh",
            "bHBoYTEuTGlzdERlcGxveW1lbnRzUmVxdWVzdBpBLmltcHJvYmFibGUuc3Bh",
            "dGlhbG9zLmRlcGxveW1lbnQudjFhbHBoYTEuTGlzdERlcGxveW1lbnRzUmVz",
            "cG9uc2USkAEKDUdldERlcGxveW1lbnQSPi5pbXByb2JhYmxlLnNwYXRpYWxv",
            "cy5kZXBsb3ltZW50LnYxYWxwaGExLkdldERlcGxveW1lbnRSZXF1ZXN0Gj8u",
            "aW1wcm9iYWJsZS5zcGF0aWFsb3MuZGVwbG95bWVudC52MWFscGhhMS5HZXRE",
            "ZXBsb3ltZW50UmVzcG9uc2USdAoQQ3JlYXRlRGVwbG95bWVudBJBLmltcHJv",
            "YmFibGUuc3BhdGlhbG9zLmRlcGxveW1lbnQudjFhbHBoYTEuQ3JlYXRlRGVw",
            "bG95bWVudFJlcXVlc3QaHS5nb29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9u",
            "EpkBChBVcGRhdGVEZXBsb3ltZW50EkEuaW1wcm9iYWJsZS5zcGF0aWFsb3Mu",
            "ZGVwbG95bWVudC52MWFscGhhMS5VcGRhdGVEZXBsb3ltZW50UmVxdWVzdBpC",
            "LmltcHJvYmFibGUuc3BhdGlhbG9zLmRlcGxveW1lbnQudjFhbHBoYTEuVXBk",
            "YXRlRGVwbG95bWVudFJlc3BvbnNlEpMBCg5TdG9wRGVwbG95bWVudBI/Lmlt",
            "cHJvYmFibGUuc3BhdGlhbG9zLmRlcGxveW1lbnQudjFhbHBoYTEuU3RvcERl",
            "cGxveW1lbnRSZXF1ZXN0GkAuaW1wcm9iYWJsZS5zcGF0aWFsb3MuZGVwbG95",
            "bWVudC52MWFscGhhMS5TdG9wRGVwbG95bWVudFJlc3BvbnNlQmBaM2ltcHJv",
            "YmFibGUvc3BhdGlhbG9zL2RlcGxveW1lbnQvdjFhbHBoYTE7ZGVwbG95bWVu",
            "dKoCKEltcHJvYmFibGUuU3BhdGlhbE9TLkRlcGxveW1lbnQuVjFBbHBoYTFi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.LongRunning.OperationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Validator.ValidatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment), global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment.Parser, new[]{ "Id", "ProjectName", "Name", "RegionCode", "ClusterCode", "AssemblyId", "StartingSnapshotId", "Tag", "Status", "LaunchConfig", "WorkerFlags", "PlayerInfo", "StartTime", "StopTime", "WorkerConnectionCapacities", "WorkerConnectionRateLimits" }, null, new[]{ typeof(global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Alpha1.WorkerCapacity), global::Improbable.SpatialOS.Deployment.V1Alpha1.WorkerCapacity.Parser, new[]{ "WorkerType", "MaxCapacity", "RemainingCapacity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Alpha1.WorkerRateLimit), global::Improbable.SpatialOS.Deployment.V1Alpha1.WorkerRateLimit.Parser, new[]{ "WorkerType", "Duration", "RequestsInDuration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Alpha1.LaunchConfig), global::Improbable.SpatialOS.Deployment.V1Alpha1.LaunchConfig.Parser, new[]{ "ConfigJson" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Alpha1.WorkerFlag), global::Improbable.SpatialOS.Deployment.V1Alpha1.WorkerFlag.Parser, new[]{ "WorkerType", "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Alpha1.PlayerInfo), global::Improbable.SpatialOS.Deployment.V1Alpha1.PlayerInfo.Parser, new[]{ "ActivePlayers", "Capacity", "QueueLength" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Alpha1.ListDeploymentsRequest), global::Improbable.SpatialOS.Deployment.V1Alpha1.ListDeploymentsRequest.Parser, new[]{ "ProjectName", "PageSize", "PageToken", "DeploymentName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Alpha1.ListDeploymentsResponse), global::Improbable.SpatialOS.Deployment.V1Alpha1.ListDeploymentsResponse.Parser, new[]{ "Deployments", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Alpha1.GetDeploymentRequest), global::Improbable.SpatialOS.Deployment.V1Alpha1.GetDeploymentRequest.Parser, new[]{ "ProjectName", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Alpha1.GetDeploymentResponse), global::Improbable.SpatialOS.Deployment.V1Alpha1.GetDeploymentResponse.Parser, new[]{ "Deployment" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Alpha1.CreateDeploymentRequest), global::Improbable.SpatialOS.Deployment.V1Alpha1.CreateDeploymentRequest.Parser, new[]{ "Deployment" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Alpha1.CreateDeploymentMetadata), global::Improbable.SpatialOS.Deployment.V1Alpha1.CreateDeploymentMetadata.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Alpha1.UpdateDeploymentRequest), global::Improbable.SpatialOS.Deployment.V1Alpha1.UpdateDeploymentRequest.Parser, new[]{ "Deployment", "UpdateMask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Alpha1.UpdateDeploymentResponse), global::Improbable.SpatialOS.Deployment.V1Alpha1.UpdateDeploymentResponse.Parser, new[]{ "Deployment" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Alpha1.StopDeploymentRequest), global::Improbable.SpatialOS.Deployment.V1Alpha1.StopDeploymentRequest.Parser, new[]{ "ProjectName", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Alpha1.StopDeploymentResponse), global::Improbable.SpatialOS.Deployment.V1Alpha1.StopDeploymentResponse.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///* A deployment of a game in the cloud. 
  /// </summary>
  public sealed partial class Deployment : pb::IMessage<Deployment> {
    private static readonly pb::MessageParser<Deployment> _parser = new pb::MessageParser<Deployment>(() => new Deployment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Deployment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Alpha1.DeploymentReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deployment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deployment(Deployment other) : this() {
      id_ = other.id_;
      projectName_ = other.projectName_;
      name_ = other.name_;
      regionCode_ = other.regionCode_;
      clusterCode_ = other.clusterCode_;
      assemblyId_ = other.assemblyId_;
      startingSnapshotId_ = other.startingSnapshotId_;
      tag_ = other.tag_.Clone();
      status_ = other.status_;
      LaunchConfig = other.launchConfig_ != null ? other.LaunchConfig.Clone() : null;
      workerFlags_ = other.workerFlags_.Clone();
      PlayerInfo = other.playerInfo_ != null ? other.PlayerInfo.Clone() : null;
      StartTime = other.startTime_ != null ? other.StartTime.Clone() : null;
      StopTime = other.stopTime_ != null ? other.StopTime.Clone() : null;
      workerConnectionCapacities_ = other.workerConnectionCapacities_.Clone();
      workerConnectionRateLimits_ = other.workerConnectionRateLimits_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deployment Clone() {
      return new Deployment(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// A unique identifier for the deployment. Read-only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "project_name" field.</summary>
    public const int ProjectNameFieldNumber = 2;
    private string projectName_ = "";
    /// <summary>
    /// Read-only once created.
    ///
    /// The name of the project this deployment belongs to.
    /// It must conform to the regex: ^[a-z0-9_]{3,32}$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// Read-only once created.
    ///
    /// The name of the deployment.
    ///
    /// It must conform to the regex: ^[a-z0-9_]{3,32}$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region_code" field.</summary>
    public const int RegionCodeFieldNumber = 4;
    private string regionCode_ = "";
    /// <summary>
    /// Read-only once created.
    ///
    /// The region that the deployment is running in.
    /// The supported regions are "EU", "US", and "AP". Leave blank if unknown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegionCode {
      get { return regionCode_; }
      set {
        regionCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster_code" field.</summary>
    public const int ClusterCodeFieldNumber = 5;
    private string clusterCode_ = "";
    /// <summary>
    /// Read-only once created.
    ///
    /// The name of the cluster this deployment is in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterCode {
      get { return clusterCode_; }
      set {
        clusterCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "assembly_id" field.</summary>
    public const int AssemblyIdFieldNumber = 7;
    private string assemblyId_ = "";
    /// <summary>
    /// Read-only once created.
    ///
    /// The assembly to use for the deployment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssemblyId {
      get { return assemblyId_; }
      set {
        assemblyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "starting_snapshot_id" field.</summary>
    public const int StartingSnapshotIdFieldNumber = 8;
    private string startingSnapshotId_ = "";
    /// <summary>
    /// Read-only once created.
    ///
    /// The starting snapshot for the deployment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartingSnapshotId {
      get { return startingSnapshotId_; }
      set {
        startingSnapshotId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_tag_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> tag_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Tags associated with the deployment. Tags are set of strings you can use to identify deployments.
    /// A tag must be upper or lower case letters or numbers and 3-32 characters in length.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tag {
      get { return tag_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 10;
    private global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment.Types.Status status_ = 0;
    /// <summary>
    /// Read-only.
    ///
    /// Whether the deployment is running.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "launch_config" field.</summary>
    public const int LaunchConfigFieldNumber = 11;
    private global::Improbable.SpatialOS.Deployment.V1Alpha1.LaunchConfig launchConfig_;
    /// <summary>
    /// Read-only once created.
    ///
    /// The configuration for starting the deployment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Deployment.V1Alpha1.LaunchConfig LaunchConfig {
      get { return launchConfig_; }
      set {
        launchConfig_ = value;
      }
    }

    /// <summary>Field number for the "worker_flags" field.</summary>
    public const int WorkerFlagsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Improbable.SpatialOS.Deployment.V1Alpha1.WorkerFlag> _repeated_workerFlags_codec
        = pb::FieldCodec.ForMessage(98, global::Improbable.SpatialOS.Deployment.V1Alpha1.WorkerFlag.Parser);
    private readonly pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Alpha1.WorkerFlag> workerFlags_ = new pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Alpha1.WorkerFlag>();
    /// <summary>
    /// Supply in `UpdateDeployment` RPC, or in the `LaunchConfig` field when creating a deployment.
    ///
    /// The worker flags that the deployment exposes at runtime.
    ///
    /// Only applicable to running deployments.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Alpha1.WorkerFlag> WorkerFlags {
      get { return workerFlags_; }
    }

    /// <summary>Field number for the "player_info" field.</summary>
    public const int PlayerInfoFieldNumber = 13;
    private global::Improbable.SpatialOS.Deployment.V1Alpha1.PlayerInfo playerInfo_;
    /// <summary>
    /// Deprecated. Please use the `worker_connection_capacities` field to derive the same information.
    ///
    /// Read-only.
    ///
    /// Information about the players participating in the deployment.
    ///
    /// Only applicable to running deployments.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Deployment.V1Alpha1.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 14;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    /// <summary>
    /// Read-only.
    ///
    /// The time the deployment is started.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "stop_time" field.</summary>
    public const int StopTimeFieldNumber = 15;
    private global::Google.Protobuf.WellKnownTypes.Timestamp stopTime_;
    /// <summary>
    /// Read-only.
    ///
    /// The time the deployment is stopped.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StopTime {
      get { return stopTime_; }
      set {
        stopTime_ = value;
      }
    }

    /// <summary>Field number for the "worker_connection_capacities" field.</summary>
    public const int WorkerConnectionCapacitiesFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Improbable.SpatialOS.Deployment.V1Alpha1.WorkerCapacity> _repeated_workerConnectionCapacities_codec
        = pb::FieldCodec.ForMessage(130, global::Improbable.SpatialOS.Deployment.V1Alpha1.WorkerCapacity.Parser);
    private readonly pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Alpha1.WorkerCapacity> workerConnectionCapacities_ = new pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Alpha1.WorkerCapacity>();
    /// <summary>
    /// Mutable. Only applicable to running deployments.
    ///
    /// The capacities of the deployment, broken down by worker type.
    /// The default maximum capacity for any worker type is a very large number,
    /// usually the maximum value of int32, i.e. 0x7FFFFFFF. But, it is not guaranteed.
    ///
    /// The current used capacity can always be calculated as `max_capacity` - `remaining_capacity`.
    ///
    /// Note: if you set the same worker type more than once, we provide no guarantee which overrides which.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Alpha1.WorkerCapacity> WorkerConnectionCapacities {
      get { return workerConnectionCapacities_; }
    }

    /// <summary>Field number for the "worker_connection_rate_limits" field.</summary>
    public const int WorkerConnectionRateLimitsFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Improbable.SpatialOS.Deployment.V1Alpha1.WorkerRateLimit> _repeated_workerConnectionRateLimits_codec
        = pb::FieldCodec.ForMessage(138, global::Improbable.SpatialOS.Deployment.V1Alpha1.WorkerRateLimit.Parser);
    private readonly pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Alpha1.WorkerRateLimit> workerConnectionRateLimits_ = new pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Alpha1.WorkerRateLimit>();
    /// <summary>
    /// Mutable. Only applicable to running deployments.
    ///
    /// The rate limits of the deployment, broken down by worker type. If a worker type is absent or has zero'ed value,
    /// you can assume that worker type is not rate limited.
    ///
    /// Note: if you set the same worker type more than once, we provide no guarantee which overrides which.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Alpha1.WorkerRateLimit> WorkerConnectionRateLimits {
      get { return workerConnectionRateLimits_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Deployment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Deployment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ProjectName != other.ProjectName) return false;
      if (Name != other.Name) return false;
      if (RegionCode != other.RegionCode) return false;
      if (ClusterCode != other.ClusterCode) return false;
      if (AssemblyId != other.AssemblyId) return false;
      if (StartingSnapshotId != other.StartingSnapshotId) return false;
      if(!tag_.Equals(other.tag_)) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(LaunchConfig, other.LaunchConfig)) return false;
      if(!workerFlags_.Equals(other.workerFlags_)) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(StopTime, other.StopTime)) return false;
      if(!workerConnectionCapacities_.Equals(other.workerConnectionCapacities_)) return false;
      if(!workerConnectionRateLimits_.Equals(other.workerConnectionRateLimits_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (RegionCode.Length != 0) hash ^= RegionCode.GetHashCode();
      if (ClusterCode.Length != 0) hash ^= ClusterCode.GetHashCode();
      if (AssemblyId.Length != 0) hash ^= AssemblyId.GetHashCode();
      if (StartingSnapshotId.Length != 0) hash ^= StartingSnapshotId.GetHashCode();
      hash ^= tag_.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (launchConfig_ != null) hash ^= LaunchConfig.GetHashCode();
      hash ^= workerFlags_.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (stopTime_ != null) hash ^= StopTime.GetHashCode();
      hash ^= workerConnectionCapacities_.GetHashCode();
      hash ^= workerConnectionRateLimits_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (ProjectName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProjectName);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (RegionCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RegionCode);
      }
      if (ClusterCode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ClusterCode);
      }
      if (AssemblyId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AssemblyId);
      }
      if (StartingSnapshotId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(StartingSnapshotId);
      }
      tag_.WriteTo(output, _repeated_tag_codec);
      if (Status != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Status);
      }
      if (launchConfig_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(LaunchConfig);
      }
      workerFlags_.WriteTo(output, _repeated_workerFlags_codec);
      if (playerInfo_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(PlayerInfo);
      }
      if (startTime_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(StartTime);
      }
      if (stopTime_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(StopTime);
      }
      workerConnectionCapacities_.WriteTo(output, _repeated_workerConnectionCapacities_codec);
      workerConnectionRateLimits_.WriteTo(output, _repeated_workerConnectionRateLimits_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (RegionCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegionCode);
      }
      if (ClusterCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterCode);
      }
      if (AssemblyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssemblyId);
      }
      if (StartingSnapshotId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartingSnapshotId);
      }
      size += tag_.CalculateSize(_repeated_tag_codec);
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (launchConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LaunchConfig);
      }
      size += workerFlags_.CalculateSize(_repeated_workerFlags_codec);
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (stopTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StopTime);
      }
      size += workerConnectionCapacities_.CalculateSize(_repeated_workerConnectionCapacities_codec);
      size += workerConnectionRateLimits_.CalculateSize(_repeated_workerConnectionRateLimits_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Deployment other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.RegionCode.Length != 0) {
        RegionCode = other.RegionCode;
      }
      if (other.ClusterCode.Length != 0) {
        ClusterCode = other.ClusterCode;
      }
      if (other.AssemblyId.Length != 0) {
        AssemblyId = other.AssemblyId;
      }
      if (other.StartingSnapshotId.Length != 0) {
        StartingSnapshotId = other.StartingSnapshotId;
      }
      tag_.Add(other.tag_);
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.launchConfig_ != null) {
        if (launchConfig_ == null) {
          launchConfig_ = new global::Improbable.SpatialOS.Deployment.V1Alpha1.LaunchConfig();
        }
        LaunchConfig.MergeFrom(other.LaunchConfig);
      }
      workerFlags_.Add(other.workerFlags_);
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          playerInfo_ = new global::Improbable.SpatialOS.Deployment.V1Alpha1.PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.stopTime_ != null) {
        if (stopTime_ == null) {
          stopTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StopTime.MergeFrom(other.StopTime);
      }
      workerConnectionCapacities_.Add(other.workerConnectionCapacities_);
      workerConnectionRateLimits_.Add(other.workerConnectionRateLimits_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            ProjectName = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            RegionCode = input.ReadString();
            break;
          }
          case 42: {
            ClusterCode = input.ReadString();
            break;
          }
          case 58: {
            AssemblyId = input.ReadString();
            break;
          }
          case 66: {
            StartingSnapshotId = input.ReadString();
            break;
          }
          case 74: {
            tag_.AddEntriesFrom(input, _repeated_tag_codec);
            break;
          }
          case 80: {
            status_ = (global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment.Types.Status) input.ReadEnum();
            break;
          }
          case 90: {
            if (launchConfig_ == null) {
              launchConfig_ = new global::Improbable.SpatialOS.Deployment.V1Alpha1.LaunchConfig();
            }
            input.ReadMessage(launchConfig_);
            break;
          }
          case 98: {
            workerFlags_.AddEntriesFrom(input, _repeated_workerFlags_codec);
            break;
          }
          case 106: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::Improbable.SpatialOS.Deployment.V1Alpha1.PlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 114: {
            if (startTime_ == null) {
              startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(startTime_);
            break;
          }
          case 122: {
            if (stopTime_ == null) {
              stopTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(stopTime_);
            break;
          }
          case 130: {
            workerConnectionCapacities_.AddEntriesFrom(input, _repeated_workerConnectionCapacities_codec);
            break;
          }
          case 138: {
            workerConnectionRateLimits_.AddEntriesFrom(input, _repeated_workerConnectionRateLimits_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Deployment message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("STARTING")] Starting = 100,
        [pbr::OriginalName("RUNNING")] Running = 200,
        [pbr::OriginalName("STOPPING")] Stopping = 300,
        [pbr::OriginalName("STOPPED")] Stopped = 400,
        [pbr::OriginalName("ERROR")] Error = 500,
      }

    }
    #endregion

  }

  public sealed partial class WorkerCapacity : pb::IMessage<WorkerCapacity> {
    private static readonly pb::MessageParser<WorkerCapacity> _parser = new pb::MessageParser<WorkerCapacity>(() => new WorkerCapacity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkerCapacity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Alpha1.DeploymentReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerCapacity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerCapacity(WorkerCapacity other) : this() {
      workerType_ = other.workerType_;
      maxCapacity_ = other.maxCapacity_;
      remainingCapacity_ = other.remainingCapacity_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerCapacity Clone() {
      return new WorkerCapacity(this);
    }

    /// <summary>Field number for the "worker_type" field.</summary>
    public const int WorkerTypeFieldNumber = 1;
    private string workerType_ = "";
    /// <summary>
    /// The type of worker that this capacity limit applies to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkerType {
      get { return workerType_; }
      set {
        workerType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max_capacity" field.</summary>
    public const int MaxCapacityFieldNumber = 2;
    private int maxCapacity_;
    /// <summary>
    /// Mutable.
    ///
    /// The maximum number of workers of the specified type that are allowed to connect to a SpatialOS deployment.
    /// Setting it to a lower number than the number of already connected workers does not drop their connections.
    ///
    /// It must not be a negative number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxCapacity {
      get { return maxCapacity_; }
      set {
        maxCapacity_ = value;
      }
    }

    /// <summary>Field number for the "remaining_capacity" field.</summary>
    public const int RemainingCapacityFieldNumber = 3;
    private int remainingCapacity_;
    /// <summary>
    /// Read-only.
    ///
    /// The available capacity for connection.
    ///
    /// Note: it can go negative when you set `max_capacity` lower than the connection capacity already used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainingCapacity {
      get { return remainingCapacity_; }
      set {
        remainingCapacity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkerCapacity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkerCapacity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorkerType != other.WorkerType) return false;
      if (MaxCapacity != other.MaxCapacity) return false;
      if (RemainingCapacity != other.RemainingCapacity) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorkerType.Length != 0) hash ^= WorkerType.GetHashCode();
      if (MaxCapacity != 0) hash ^= MaxCapacity.GetHashCode();
      if (RemainingCapacity != 0) hash ^= RemainingCapacity.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorkerType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WorkerType);
      }
      if (MaxCapacity != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxCapacity);
      }
      if (RemainingCapacity != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RemainingCapacity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorkerType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkerType);
      }
      if (MaxCapacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCapacity);
      }
      if (RemainingCapacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainingCapacity);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkerCapacity other) {
      if (other == null) {
        return;
      }
      if (other.WorkerType.Length != 0) {
        WorkerType = other.WorkerType;
      }
      if (other.MaxCapacity != 0) {
        MaxCapacity = other.MaxCapacity;
      }
      if (other.RemainingCapacity != 0) {
        RemainingCapacity = other.RemainingCapacity;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WorkerType = input.ReadString();
            break;
          }
          case 16: {
            MaxCapacity = input.ReadInt32();
            break;
          }
          case 24: {
            RemainingCapacity = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorkerRateLimit : pb::IMessage<WorkerRateLimit> {
    private static readonly pb::MessageParser<WorkerRateLimit> _parser = new pb::MessageParser<WorkerRateLimit>(() => new WorkerRateLimit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkerRateLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Alpha1.DeploymentReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerRateLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerRateLimit(WorkerRateLimit other) : this() {
      workerType_ = other.workerType_;
      Duration = other.duration_ != null ? other.Duration.Clone() : null;
      requestsInDuration_ = other.requestsInDuration_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerRateLimit Clone() {
      return new WorkerRateLimit(this);
    }

    /// <summary>Field number for the "worker_type" field.</summary>
    public const int WorkerTypeFieldNumber = 1;
    private string workerType_ = "";
    /// <summary>
    /// The type of worker that this rate limit applies to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkerType {
      get { return workerType_; }
      set {
        workerType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Duration duration_;
    /// <summary>
    /// Mutable.
    ///
    /// The duration window to apply the rate limit in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "requests_in_duration" field.</summary>
    public const int RequestsInDurationFieldNumber = 3;
    private uint requestsInDuration_;
    /// <summary>
    /// Mutable.
    ///
    /// The maximum number of requests allowed during the specified duration window.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequestsInDuration {
      get { return requestsInDuration_; }
      set {
        requestsInDuration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkerRateLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkerRateLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorkerType != other.WorkerType) return false;
      if (!object.Equals(Duration, other.Duration)) return false;
      if (RequestsInDuration != other.RequestsInDuration) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorkerType.Length != 0) hash ^= WorkerType.GetHashCode();
      if (duration_ != null) hash ^= Duration.GetHashCode();
      if (RequestsInDuration != 0) hash ^= RequestsInDuration.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorkerType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WorkerType);
      }
      if (duration_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Duration);
      }
      if (RequestsInDuration != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RequestsInDuration);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorkerType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkerType);
      }
      if (duration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Duration);
      }
      if (RequestsInDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestsInDuration);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkerRateLimit other) {
      if (other == null) {
        return;
      }
      if (other.WorkerType.Length != 0) {
        WorkerType = other.WorkerType;
      }
      if (other.duration_ != null) {
        if (duration_ == null) {
          duration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Duration.MergeFrom(other.Duration);
      }
      if (other.RequestsInDuration != 0) {
        RequestsInDuration = other.RequestsInDuration;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WorkerType = input.ReadString();
            break;
          }
          case 18: {
            if (duration_ == null) {
              duration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(duration_);
            break;
          }
          case 24: {
            RequestsInDuration = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LaunchConfig : pb::IMessage<LaunchConfig> {
    private static readonly pb::MessageParser<LaunchConfig> _parser = new pb::MessageParser<LaunchConfig>(() => new LaunchConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LaunchConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Alpha1.DeploymentReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaunchConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaunchConfig(LaunchConfig other) : this() {
      configJson_ = other.configJson_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaunchConfig Clone() {
      return new LaunchConfig(this);
    }

    /// <summary>Field number for the "config_json" field.</summary>
    public const int ConfigJsonFieldNumber = 1;
    private string configJson_ = "";
    /// <summary>
    /// The launch configuration for the deployment, supplied as JSON.
    /// For information about the launch configuration, see the SpatialOS documentation:
    /// https://docs.improbable.io/reference/latest/shared/reference/file-formats/launch-config
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConfigJson {
      get { return configJson_; }
      set {
        configJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LaunchConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LaunchConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigJson != other.ConfigJson) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigJson.Length != 0) hash ^= ConfigJson.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigJson.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConfigJson);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConfigJson);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LaunchConfig other) {
      if (other == null) {
        return;
      }
      if (other.ConfigJson.Length != 0) {
        ConfigJson = other.ConfigJson;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConfigJson = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorkerFlag : pb::IMessage<WorkerFlag> {
    private static readonly pb::MessageParser<WorkerFlag> _parser = new pb::MessageParser<WorkerFlag>(() => new WorkerFlag());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkerFlag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Alpha1.DeploymentReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerFlag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerFlag(WorkerFlag other) : this() {
      workerType_ = other.workerType_;
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerFlag Clone() {
      return new WorkerFlag(this);
    }

    /// <summary>Field number for the "worker_type" field.</summary>
    public const int WorkerTypeFieldNumber = 1;
    private string workerType_ = "";
    /// <summary>
    /// The type of server worker that can see the flag.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkerType {
      get { return workerType_; }
      set {
        workerType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    /// The key of the flag.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private string value_ = "";
    /// <summary>
    /// The value of the flag.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkerFlag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkerFlag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorkerType != other.WorkerType) return false;
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorkerType.Length != 0) hash ^= WorkerType.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorkerType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WorkerType);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorkerType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkerType);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkerFlag other) {
      if (other == null) {
        return;
      }
      if (other.WorkerType.Length != 0) {
        WorkerType = other.WorkerType;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WorkerType = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Alpha1.DeploymentReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      activePlayers_ = other.activePlayers_;
      capacity_ = other.capacity_;
      queueLength_ = other.queueLength_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "active_players" field.</summary>
    public const int ActivePlayersFieldNumber = 1;
    private long activePlayers_;
    /// <summary>
    /// The number of players in this deployment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ActivePlayers {
      get { return activePlayers_; }
      set {
        activePlayers_ = value;
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 2;
    private long capacity_;
    /// <summary>
    /// The number of player this deployment can support.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "queue_length" field.</summary>
    public const int QueueLengthFieldNumber = 3;
    private long queueLength_;
    /// <summary>
    /// The number of players queuing to enter this deployment.
    /// This is not implemented.  A default value of zero is always returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long QueueLength {
      get { return queueLength_; }
      set {
        queueLength_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivePlayers != other.ActivePlayers) return false;
      if (Capacity != other.Capacity) return false;
      if (QueueLength != other.QueueLength) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivePlayers != 0L) hash ^= ActivePlayers.GetHashCode();
      if (Capacity != 0L) hash ^= Capacity.GetHashCode();
      if (QueueLength != 0L) hash ^= QueueLength.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivePlayers != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ActivePlayers);
      }
      if (Capacity != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Capacity);
      }
      if (QueueLength != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(QueueLength);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivePlayers != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActivePlayers);
      }
      if (Capacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Capacity);
      }
      if (QueueLength != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(QueueLength);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.ActivePlayers != 0L) {
        ActivePlayers = other.ActivePlayers;
      }
      if (other.Capacity != 0L) {
        Capacity = other.Capacity;
      }
      if (other.QueueLength != 0L) {
        QueueLength = other.QueueLength;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivePlayers = input.ReadInt64();
            break;
          }
          case 16: {
            Capacity = input.ReadInt64();
            break;
          }
          case 24: {
            QueueLength = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListDeploymentsRequest : pb::IMessage<ListDeploymentsRequest> {
    private static readonly pb::MessageParser<ListDeploymentsRequest> _parser = new pb::MessageParser<ListDeploymentsRequest>(() => new ListDeploymentsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDeploymentsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Alpha1.DeploymentReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDeploymentsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDeploymentsRequest(ListDeploymentsRequest other) : this() {
      projectName_ = other.projectName_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      deploymentName_ = other.deploymentName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDeploymentsRequest Clone() {
      return new ListDeploymentsRequest(this);
    }

    /// <summary>Field number for the "project_name" field.</summary>
    public const int ProjectNameFieldNumber = 1;
    private string projectName_ = "";
    /// <summary>
    /// The project to list all deployments for.
    ///
    /// `project_name` must conform to the regex: ^[a-z0-9_]{3,32}$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    /// The maximum number of deployments to return in the response.
    ///
    /// It must not be negative. If unset or 0,
    /// it defaults to 20.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// The token to identify the starting point of the request.
    /// An empty or invalid token defaults to listing from the start.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deployment_name" field.</summary>
    public const int DeploymentNameFieldNumber = 4;
    private string deploymentName_ = "";
    /// <summary>
    /// The name of the deployment.
    ///
    /// Leave it empty to list all deployments under the given project.
    /// If provided, it must conform to the regex: ^[a-z0-9_]{3,32}$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeploymentName {
      get { return deploymentName_; }
      set {
        deploymentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDeploymentsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDeploymentsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectName != other.ProjectName) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      if (DeploymentName != other.DeploymentName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (DeploymentName.Length != 0) hash ^= DeploymentName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectName);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (DeploymentName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DeploymentName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (DeploymentName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeploymentName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDeploymentsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.DeploymentName.Length != 0) {
        DeploymentName = other.DeploymentName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectName = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
          case 34: {
            DeploymentName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListDeploymentsResponse : pb::IMessage<ListDeploymentsResponse> {
    private static readonly pb::MessageParser<ListDeploymentsResponse> _parser = new pb::MessageParser<ListDeploymentsResponse>(() => new ListDeploymentsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDeploymentsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Alpha1.DeploymentReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDeploymentsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDeploymentsResponse(ListDeploymentsResponse other) : this() {
      deployments_ = other.deployments_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDeploymentsResponse Clone() {
      return new ListDeploymentsResponse(this);
    }

    /// <summary>Field number for the "deployments" field.</summary>
    public const int DeploymentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment> _repeated_deployments_codec
        = pb::FieldCodec.ForMessage(10, global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment.Parser);
    private readonly pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment> deployments_ = new pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment> Deployments {
      get { return deployments_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// A token you can supply to the ListDeployments RPC to retrieve the next page of
    /// paginated results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDeploymentsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDeploymentsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!deployments_.Equals(other.deployments_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= deployments_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      deployments_.WriteTo(output, _repeated_deployments_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += deployments_.CalculateSize(_repeated_deployments_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDeploymentsResponse other) {
      if (other == null) {
        return;
      }
      deployments_.Add(other.deployments_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            deployments_.AddEntriesFrom(input, _repeated_deployments_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetDeploymentRequest : pb::IMessage<GetDeploymentRequest> {
    private static readonly pb::MessageParser<GetDeploymentRequest> _parser = new pb::MessageParser<GetDeploymentRequest>(() => new GetDeploymentRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDeploymentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Alpha1.DeploymentReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeploymentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeploymentRequest(GetDeploymentRequest other) : this() {
      projectName_ = other.projectName_;
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeploymentRequest Clone() {
      return new GetDeploymentRequest(this);
    }

    /// <summary>Field number for the "project_name" field.</summary>
    public const int ProjectNameFieldNumber = 1;
    private string projectName_ = "";
    /// <summary>
    /// The deployment's project.
    ///
    /// It must conform to the regex: ^[a-z0-9_]{3,32}$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    /// A unique identifier for the deployment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDeploymentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDeploymentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectName != other.ProjectName) return false;
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectName);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDeploymentRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectName = input.ReadString();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetDeploymentResponse : pb::IMessage<GetDeploymentResponse> {
    private static readonly pb::MessageParser<GetDeploymentResponse> _parser = new pb::MessageParser<GetDeploymentResponse>(() => new GetDeploymentResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDeploymentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Alpha1.DeploymentReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeploymentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeploymentResponse(GetDeploymentResponse other) : this() {
      Deployment = other.deployment_ != null ? other.Deployment.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeploymentResponse Clone() {
      return new GetDeploymentResponse(this);
    }

    /// <summary>Field number for the "deployment" field.</summary>
    public const int DeploymentFieldNumber = 1;
    private global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment deployment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment Deployment {
      get { return deployment_; }
      set {
        deployment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDeploymentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDeploymentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Deployment, other.Deployment)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (deployment_ != null) hash ^= Deployment.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (deployment_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Deployment);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (deployment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deployment);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDeploymentResponse other) {
      if (other == null) {
        return;
      }
      if (other.deployment_ != null) {
        if (deployment_ == null) {
          deployment_ = new global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment();
        }
        Deployment.MergeFrom(other.Deployment);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (deployment_ == null) {
              deployment_ = new global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment();
            }
            input.ReadMessage(deployment_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateDeploymentRequest : pb::IMessage<CreateDeploymentRequest> {
    private static readonly pb::MessageParser<CreateDeploymentRequest> _parser = new pb::MessageParser<CreateDeploymentRequest>(() => new CreateDeploymentRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateDeploymentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Alpha1.DeploymentReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDeploymentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDeploymentRequest(CreateDeploymentRequest other) : this() {
      Deployment = other.deployment_ != null ? other.Deployment.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDeploymentRequest Clone() {
      return new CreateDeploymentRequest(this);
    }

    /// <summary>Field number for the "deployment" field.</summary>
    public const int DeploymentFieldNumber = 2;
    private global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment deployment_;
    /// <summary>
    /// The deployment to start.
    ///
    /// You can only supply fields that are mutable at the point when you start the deployment.
    ///
    /// Non-empty read-only fields passed in will be ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment Deployment {
      get { return deployment_; }
      set {
        deployment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateDeploymentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateDeploymentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Deployment, other.Deployment)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (deployment_ != null) hash ^= Deployment.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (deployment_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Deployment);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (deployment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deployment);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateDeploymentRequest other) {
      if (other == null) {
        return;
      }
      if (other.deployment_ != null) {
        if (deployment_ == null) {
          deployment_ = new global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment();
        }
        Deployment.MergeFrom(other.Deployment);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (deployment_ == null) {
              deployment_ = new global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment();
            }
            input.ReadMessage(deployment_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// For internal use only
  /// </summary>
  public sealed partial class CreateDeploymentMetadata : pb::IMessage<CreateDeploymentMetadata> {
    private static readonly pb::MessageParser<CreateDeploymentMetadata> _parser = new pb::MessageParser<CreateDeploymentMetadata>(() => new CreateDeploymentMetadata());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateDeploymentMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Alpha1.DeploymentReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDeploymentMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDeploymentMetadata(CreateDeploymentMetadata other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDeploymentMetadata Clone() {
      return new CreateDeploymentMetadata(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateDeploymentMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateDeploymentMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateDeploymentMetadata other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class UpdateDeploymentRequest : pb::IMessage<UpdateDeploymentRequest> {
    private static readonly pb::MessageParser<UpdateDeploymentRequest> _parser = new pb::MessageParser<UpdateDeploymentRequest>(() => new UpdateDeploymentRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateDeploymentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Alpha1.DeploymentReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeploymentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeploymentRequest(UpdateDeploymentRequest other) : this() {
      Deployment = other.deployment_ != null ? other.Deployment.Clone() : null;
      UpdateMask = other.updateMask_ != null ? other.UpdateMask.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeploymentRequest Clone() {
      return new UpdateDeploymentRequest(this);
    }

    /// <summary>Field number for the "deployment" field.</summary>
    public const int DeploymentFieldNumber = 1;
    private global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment deployment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment Deployment {
      get { return deployment_; }
      set {
        deployment_ = value;
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    /// A mask which you can provide for partial updates of the resource.
    /// Only the fields specified in the mask are modified on the response.
    ///
    /// Further Documentation:
    /// https://github.com/google/protobuf/blob/master/src/google/protobuf/field_mask.proto
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateDeploymentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateDeploymentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Deployment, other.Deployment)) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (deployment_ != null) hash ^= Deployment.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (deployment_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Deployment);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateMask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (deployment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deployment);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateDeploymentRequest other) {
      if (other == null) {
        return;
      }
      if (other.deployment_ != null) {
        if (deployment_ == null) {
          deployment_ = new global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment();
        }
        Deployment.MergeFrom(other.Deployment);
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (deployment_ == null) {
              deployment_ = new global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment();
            }
            input.ReadMessage(deployment_);
            break;
          }
          case 18: {
            if (updateMask_ == null) {
              updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(updateMask_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateDeploymentResponse : pb::IMessage<UpdateDeploymentResponse> {
    private static readonly pb::MessageParser<UpdateDeploymentResponse> _parser = new pb::MessageParser<UpdateDeploymentResponse>(() => new UpdateDeploymentResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateDeploymentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Alpha1.DeploymentReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeploymentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeploymentResponse(UpdateDeploymentResponse other) : this() {
      Deployment = other.deployment_ != null ? other.Deployment.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeploymentResponse Clone() {
      return new UpdateDeploymentResponse(this);
    }

    /// <summary>Field number for the "deployment" field.</summary>
    public const int DeploymentFieldNumber = 1;
    private global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment deployment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment Deployment {
      get { return deployment_; }
      set {
        deployment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateDeploymentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateDeploymentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Deployment, other.Deployment)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (deployment_ != null) hash ^= Deployment.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (deployment_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Deployment);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (deployment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deployment);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateDeploymentResponse other) {
      if (other == null) {
        return;
      }
      if (other.deployment_ != null) {
        if (deployment_ == null) {
          deployment_ = new global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment();
        }
        Deployment.MergeFrom(other.Deployment);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (deployment_ == null) {
              deployment_ = new global::Improbable.SpatialOS.Deployment.V1Alpha1.Deployment();
            }
            input.ReadMessage(deployment_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StopDeploymentRequest : pb::IMessage<StopDeploymentRequest> {
    private static readonly pb::MessageParser<StopDeploymentRequest> _parser = new pb::MessageParser<StopDeploymentRequest>(() => new StopDeploymentRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopDeploymentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Alpha1.DeploymentReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopDeploymentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopDeploymentRequest(StopDeploymentRequest other) : this() {
      projectName_ = other.projectName_;
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopDeploymentRequest Clone() {
      return new StopDeploymentRequest(this);
    }

    /// <summary>Field number for the "project_name" field.</summary>
    public const int ProjectNameFieldNumber = 1;
    private string projectName_ = "";
    /// <summary>
    /// The deployment's project.
    ///
    /// It must conform to the regex: ^[a-z0-9_]{3,32}$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    /// The deployment to stop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopDeploymentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopDeploymentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectName != other.ProjectName) return false;
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectName);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopDeploymentRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectName = input.ReadString();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StopDeploymentResponse : pb::IMessage<StopDeploymentResponse> {
    private static readonly pb::MessageParser<StopDeploymentResponse> _parser = new pb::MessageParser<StopDeploymentResponse>(() => new StopDeploymentResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopDeploymentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Alpha1.DeploymentReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopDeploymentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopDeploymentResponse(StopDeploymentResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopDeploymentResponse Clone() {
      return new StopDeploymentResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopDeploymentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopDeploymentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopDeploymentResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
