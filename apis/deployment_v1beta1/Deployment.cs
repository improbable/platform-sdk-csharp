// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/improbable/spatialos/deployment/v1beta1/deployment.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Improbable.SpatialOS.Deployment.V1Beta1 {

  /// <summary>Holder for reflection information generated from proto/improbable/spatialos/deployment/v1beta1/deployment.proto</summary>
  public static partial class DeploymentReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/improbable/spatialos/deployment/v1beta1/deployment.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DeploymentReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cj5wcm90by9pbXByb2JhYmxlL3NwYXRpYWxvcy9kZXBsb3ltZW50L3YxYmV0",
            "YTEvZGVwbG95bWVudC5wcm90bxInaW1wcm9iYWJsZS5zcGF0aWFsb3MuZGVw",
            "bG95bWVudC52MWJldGExGiNnb29nbGUvbG9uZ3J1bm5pbmcvb3BlcmF0aW9u",
            "cy5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxoeZ29v",
            "Z2xlL3Byb3RvYnVmL2R1cmF0aW9uLnByb3RvGjZnaXRodWIuY29tL213aXRr",
            "b3cvZ28tcHJvdG8tdmFsaWRhdG9ycy92YWxpZGF0b3IucHJvdG8aMGdpdGh1",
            "Yi5jb20vaW1wcm9iYWJsZS9wcm90b2MtZ2VuLWdvY2xpL2NsaS5wcm90bxo7",
            "Z2l0aHViLmNvbS9pbXByb2JhYmxlLWlvL2dvLXByb3RvLWxvZ2ZpZWxkcy9s",
            "b2dmaWVsZHMucHJvdG8i+gcKCkRlcGxveW1lbnQSCgoCaWQYASABKAMSPwoM",
            "cHJvamVjdF9uYW1lGAIgASgJQini3x8TChFeW2EtejAtOV9dezMsMzJ9JMrN",
            "fw4KDHByb2plY3RfbmFtZRJFCg9kZXBsb3ltZW50X25hbWUYAyABKAlCLOLf",
            "HxMKEV5bYS16MC05X117MywzMn0kys1/EQoPZGVwbG95bWVudF9uYW1lEhMK",
            "C3JlZ2lvbl9jb2RlGAQgASgJEhQKDGNsdXN0ZXJfY29kZRgFIAEoCRIVCg1h",
            "c3NlbWJseV9uYW1lGAcgASgJEhwKFHN0YXJ0aW5nX3NuYXBzaG90X2lkGAgg",
            "ASgJEigKBHRhZ3MYCSADKAlCGuLfHxYKFF5bYS16QS1aMC05X117MywzMn0k",
            "EkoKBnN0YXR1cxgKIAEoDjI6LmltcHJvYmFibGUuc3BhdGlhbG9zLmRlcGxv",
            "eW1lbnQudjFiZXRhMS5EZXBsb3ltZW50LlN0YXR1cxJMCg1sYXVuY2hfY29u",
            "ZmlnGAsgASgLMjUuaW1wcm9iYWJsZS5zcGF0aWFsb3MuZGVwbG95bWVudC52",
            "MWJldGExLkxhdW5jaENvbmZpZxJJCgx3b3JrZXJfZmxhZ3MYDCADKAsyMy5p",
            "bXByb2JhYmxlLnNwYXRpYWxvcy5kZXBsb3ltZW50LnYxYmV0YTEuV29ya2Vy",
            "RmxhZxIuCgpzdGFydF90aW1lGA0gASgLMhouZ29vZ2xlLnByb3RvYnVmLlRp",
            "bWVzdGFtcBItCglzdG9wX3RpbWUYDiABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "VGltZXN0YW1wEl0KHHdvcmtlcl9jb25uZWN0aW9uX2NhcGFjaXRpZXMYDyAD",
            "KAsyNy5pbXByb2JhYmxlLnNwYXRpYWxvcy5kZXBsb3ltZW50LnYxYmV0YTEu",
            "V29ya2VyQ2FwYWNpdHkSXwodd29ya2VyX2Nvbm5lY3Rpb25fcmF0ZV9saW1p",
            "dHMYECADKAsyOC5pbXByb2JhYmxlLnNwYXRpYWxvcy5kZXBsb3ltZW50LnYx",
            "YmV0YTEuV29ya2VyUmF0ZUxpbWl0EhMKC2Rlc2NyaXB0aW9uGBEgASgJEhcK",
            "D3J1bnRpbWVfdmVyc2lvbhgSIAEoCRIvCgtleHBpcnlfdGltZRgTIAEoCzIa",
            "Lmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAiawoGU3RhdHVzEgsKB1VOS05P",
            "V04QABIMCghTVEFSVElORxBkEgwKB1JVTk5JTkcQyAESDwoKUkVTVEFSVElO",
            "RxDYBBINCghTVE9QUElORxCsAhIMCgdTVE9QUEVEEJADEgoKBUVSUk9SEPQD",
            "ImgKDldvcmtlckNhcGFjaXR5EhMKC3dvcmtlcl90eXBlGAEgASgJEiUKDG1h",
            "eF9jYXBhY2l0eRgCIAEoBUIP4t8fCxD///////////8BEhoKEnJlbWFpbmlu",
            "Z19jYXBhY2l0eRgDIAEoBSJxCg9Xb3JrZXJSYXRlTGltaXQSEwoLd29ya2Vy",
            "X3R5cGUYASABKAkSKwoIZHVyYXRpb24YAiABKAsyGS5nb29nbGUucHJvdG9i",
            "dWYuRHVyYXRpb24SHAoUcmVxdWVzdHNfaW5fZHVyYXRpb24YAyABKA0iygEK",
            "DExhdW5jaENvbmZpZxK5AQoLY29uZmlnX2pzb24YASABKAlCowHq3x+eAQoN",
            "bGF1bmNoLWNvbmZpZxIBYyqHAVRoZSBkZXBsb3ltZW50IGxhdW5jaCBjb25m",
            "aWd1cmF0aW9uLCBzdXBwbGllZCBhcyBKU09OLiBGb3IgaW5mb3JtYXRpb24g",
            "YWJvdXQgdGhlIGxhdW5jaCBjb25maWd1cmF0aW9uLCBzZWUgdGhlIFNwYXRp",
            "YWxPUyBkb2N1bWVudGF0aW9uLjABIj0KCldvcmtlckZsYWcSEwoLd29ya2Vy",
            "X3R5cGUYASABKAkSCwoDa2V5GAIgASgJEg0KBXZhbHVlGAMgASgJIoMBCh9T",
            "ZXREZXBsb3ltZW50V29ya2VyRmxhZ3NSZXF1ZXN0EhUKDWRlcGxveW1lbnRf",
            "aWQYASABKAMSSQoMd29ya2VyX2ZsYWdzGAIgAygLMjMuaW1wcm9iYWJsZS5z",
            "cGF0aWFsb3MuZGVwbG95bWVudC52MWJldGExLldvcmtlckZsYWciIgogU2V0",
            "RGVwbG95bWVudFdvcmtlckZsYWdzUmVzcG9uc2UiPwoYU2V0RGVwbG95bWVu",
            "dFRhZ3NSZXF1ZXN0EhUKDWRlcGxveW1lbnRfaWQYASABKAMSDAoEdGFncxgC",
            "IAMoCSIbChlTZXREZXBsb3ltZW50VGFnc1Jlc3BvbnNlIpwBCiRTZXREZXBs",
            "b3ltZW50V29ya2VyQ2FwYWNpdGllc1JlcXVlc3QSFQoNZGVwbG95bWVudF9p",
            "ZBgBIAEoAxJdChx3b3JrZXJfY29ubmVjdGlvbl9jYXBhY2l0aWVzGAIgAygL",
            "MjcuaW1wcm9iYWJsZS5zcGF0aWFsb3MuZGVwbG95bWVudC52MWJldGExLldv",
            "cmtlckNhcGFjaXR5IicKJVNldERlcGxveW1lbnRXb3JrZXJDYXBhY2l0aWVz",
            "UmVzcG9uc2UingEKJFNldERlcGxveW1lbnRXb3JrZXJSYXRlTGltaXRzUmVx",
            "dWVzdBIVCg1kZXBsb3ltZW50X2lkGAEgASgDEl8KHXdvcmtlcl9jb25uZWN0",
            "aW9uX3JhdGVfbGltaXRzGAIgAygLMjguaW1wcm9iYWJsZS5zcGF0aWFsb3Mu",
            "ZGVwbG95bWVudC52MWJldGExLldvcmtlclJhdGVMaW1pdCInCiVTZXREZXBs",
            "b3ltZW50V29ya2VyUmF0ZUxpbWl0c1Jlc3BvbnNlIvMEChZMaXN0RGVwbG95",
            "bWVudHNSZXF1ZXN0ErkBCgxwcm9qZWN0X25hbWUYASABKAlCogHi3x8TChFe",
            "W2EtejAtOV9dezMsMzJ9JOrfH4YBEgFwKn9UaGUgcHJvamVjdCB0byBsaXN0",
            "IGFsbCBkZXBsb3ltZW50cyBmb3IuIEl0IG11c3QgYmUgbG93ZXIgY2FzZSBs",
            "ZXR0ZXJzIG9yIG51bWJlcnMgb3IgdW5kZXJzY29yZXMgYW5kIDMtMzIgY2hh",
            "cmFjdGVycyBpbiBsZW5ndGguMAESmgEKCXBhZ2Vfc2l6ZRgCIAEoBUKGAeLf",
            "Hw0Q////////////ARgz6t8fcRoCMjAqa1RoZSBtYXhpbXVtIG51bWJlciBv",
            "ZiBkZXBsb3ltZW50cyB0byByZXR1cm4gaW4gdGhlIHJlc3BvbnNlLiBJdCBz",
            "aG91bGQgYmUgbm9uLW5lZ2F0aXZlIGFuZCBzbWFsbGVyIHRoYW4gNTEuElIK",
            "CnBhZ2VfdG9rZW4YAyABKAlCPurfHzoqOFRoZSB0b2tlbiB0byBpZGVudGlm",
            "eSB0aGUgc3RhcnRpbmcgcG9pbnQgb2YgdGhlIHJlcXVlc3QuEkAKB2ZpbHRl",
            "cnMYBCADKAsyLy5pbXByb2JhYmxlLnNwYXRpYWxvcy5kZXBsb3ltZW50LnYx",
            "YmV0YTEuRmlsdGVyImoKHURlcGxveW1lbnRTdG9wcGVkU3RhdHVzRmlsdGVy",
            "EhMKD0FMTF9ERVBMT1lNRU5UUxAAEhsKF05PVF9TVE9QUEVEX0RFUExPWU1F",
            "TlRTEAESFwoTU1RPUFBFRF9ERVBMT1lNRU5UUxACInwKF0xpc3REZXBsb3lt",
            "ZW50c1Jlc3BvbnNlEkgKC2RlcGxveW1lbnRzGAEgAygLMjMuaW1wcm9iYWJs",
            "ZS5zcGF0aWFsb3MuZGVwbG95bWVudC52MWJldGExLkRlcGxveW1lbnQSFwoP",
            "bmV4dF9wYWdlX3Rva2VuGAIgASgJIuwCChRHZXREZXBsb3ltZW50UmVxdWVz",
            "dBIKCgJpZBgBIAEoAxLHAgoEdmlldxgCIAEoDjIxLmltcHJvYmFibGUuc3Bh",
            "dGlhbG9zLmRlcGxveW1lbnQudjFiZXRhMS5WaWV3VHlwZUKFAurfH4ACEgF2",
            "GgVCQVNJQyrzAVRoZSBhbW91bnQgb2YgaW5mb3JtYXRpb24gdG8gYmUgcmV0",
            "cmlldmVkIGZvciB0aGUgZGVwbG95bWVudC4gVXNlIG9uZSBvZjogQkFTSUMg",
            "b3IgRlVMTC4gQkFTSUMgaXMgcXVpY2tlciBhcyBpdCBkb2VzIG5vdCBpbmNs",
            "dWRlIFdvcmtlckZsYWdzLCBXb3JrZXJDb25uZWN0aW9uQ2FwYWNpdGllcywg",
            "b3IgV29ya2VyQ29ubmVjdGlvblJhdGVMaW1pdHMuIEZVTEwgcmV0dXJucyB0",
            "aGUgY29tcGxldGUgZGVwbG95bWVudCBkYXRhLiJgChVHZXREZXBsb3ltZW50",
            "UmVzcG9uc2USRwoKZGVwbG95bWVudBgBIAEoCzIzLmltcHJvYmFibGUuc3Bh",
            "dGlhbG9zLmRlcGxveW1lbnQudjFiZXRhMS5EZXBsb3ltZW50Is4DCiFHZXRS",
            "dW5uaW5nRGVwbG95bWVudEJ5TmFtZVJlcXVlc3QSLQoMcHJvamVjdF9uYW1l",
            "GAEgASgJQhfi3x8TChFeW2EtejAtOV9dezMsMzJ9JBIwCg9kZXBsb3ltZW50",
            "X25hbWUYAiABKAlCF+LfHxMKEV5bYS16MC05X117MywzMn0kEscCCgR2aWV3",
            "GAMgASgOMjEuaW1wcm9iYWJsZS5zcGF0aWFsb3MuZGVwbG95bWVudC52MWJl",
            "dGExLlZpZXdUeXBlQoUC6t8fgAISAXYaBUJBU0lDKvMBVGhlIGFtb3VudCBv",
            "ZiBpbmZvcm1hdGlvbiB0byBiZSByZXRyaWV2ZWQgZm9yIHRoZSBkZXBsb3lt",
            "ZW50LiBVc2Ugb25lIG9mOiBCQVNJQyBvciBGVUxMLiBCQVNJQyBpcyBxdWlj",
            "a2VyIGFzIGl0IGRvZXMgbm90IGluY2x1ZGUgV29ya2VyRmxhZ3MsIFdvcmtl",
            "ckNvbm5lY3Rpb25DYXBhY2l0aWVzLCBvciBXb3JrZXJDb25uZWN0aW9uUmF0",
            "ZUxpbWl0cy4gRlVMTCByZXR1cm5zIHRoZSBjb21wbGV0ZSBkZXBsb3ltZW50",
            "IGRhdGEuIsMLChdDcmVhdGVEZXBsb3ltZW50UmVxdWVzdBLvAQoMcHJvamVj",
            "dF9uYW1lGAEgASgJQtgB4t8fEwoRXlthLXowLTlfXXszLDMyfSTKzX8OCgxw",
            "cm9qZWN0X25hbWXq3x+qARIBcCqiAVRoZSBuYW1lIG9mIHRoZSBwcm9qZWN0",
            "IHRoaXMgZGVwbG95bWVudCBiZWxvbmdzIHRvLiBSZWFkLW9ubHkgb25jZSBj",
            "cmVhdGVkLiBJdCBtdXN0IGJlIGxvd2VyIGNhc2UgbGV0dGVycyBvciBudW1i",
            "ZXJzIG9yIHVuZGVyc2NvcmVzIGFuZCAzLTMyIGNoYXJhY3RlcnMgaW4gbGVu",
            "Z3RoLjABEv8BCg9kZXBsb3ltZW50X25hbWUYAiABKAlC5QHi3x8TChFeW2Et",
            "ejAtOV9dezMsMzJ9JMrNfxEKD2RlcGxveW1lbnRfbmFtZerfH7QBEgFuKqwB",
            "VGhlIG5hbWUgb2YgdGhlIGRlcGxveW1lbnQuIFJlYWQtb25seSBvbmNlIGNy",
            "ZWF0ZWQuIFlvdSBjaG9vc2UgdGhlIGRlcGxveW1lbnQncyBuYW1lLiBJdCBt",
            "dXN0IGJlIGxvd2VyIGNhc2UgbGV0dGVycyBvciBudW1iZXJzIG9yIHVuZGVy",
            "c2NvcmVzIGFuZCAzLTMyIGNoYXJhY3RlcnMgaW4gbGVuZ3RoLjABEhQKDGNs",
            "dXN0ZXJfY29kZRgDIAEoCRITCgtyZWdpb25fY29kZRgEIAEoCRKtAQoNYXNz",
            "ZW1ibHlfbmFtZRgFIAEoCUKVAerfH5ABEgFhKooBVGhlIGFzc2VtYmx5IHRv",
            "IHVzZSBmb3IgdGhlIGRlcGxveW1lbnQuIFJlYWQtb25seSBvbmNlIGNyZWF0",
            "ZWQuIFRoaXMgcGFyYW1ldGVyIG5lZWRzIHRvIGJlIHNwZWNpZmllZCBmb3Ig",
            "dGhlIGNsb3VkIGFuZCBsZWZ0IGVtcHR5IGxvY2FsbHkuEv4BChRzdGFydGlu",
            "Z19zbmFwc2hvdF9pZBgGIAEoCULfAerfH9oBEgFzKtQBVGhlIHN0YXJ0aW5n",
            "IHNuYXBzaG90IGZvciB0aGUgZGVwbG95bWVudC4gUmVhZC1vbmx5IG9uY2Ug",
            "Y3JlYXRlZC4gRm9yIGNsb3VkIGRlcGxveW1lbnRzLCB5b3UgbXVzdCBwcm92",
            "aWRlIGEgc3RhcnRpbmcgc25hcHNob3QuIEZvciBsb2NhbCBkZXBsb3ltZW50",
            "cywgaWYgeW91IGRvbid0IHByb3ZpZGUgYSBzdGFydGluZyBzbmFwc2hvdCwg",
            "aXQgdXNlcyB0aGUgZGVmYXVsdC4S0wEKBHRhZ3MYByADKAlCxAHi3x8WChRe",
            "W2EtekEtWjAtOV9dezMsMzJ9JOrfH6UBKqIBQ29tbWEgc2VwYXJhdGVkIGxp",
            "c3Qgb2Ygc3RyaW5ncyBhc3NvY2lhdGVkIHdpdGggdGhlIGRlcGxveW1lbnQu",
            "IEEgdGFnIG11c3QgYmUgdXBwZXIgb3IgbG93ZXIgY2FzZSBsZXR0ZXJzIG9y",
            "IG51bWJlcnMgb3IgdW5kZXJzY29yZXMgYW5kIDMtMzIgY2hhcmFjdGVycyBp",
            "biBsZW5ndGguEkwKDWxhdW5jaF9jb25maWcYCyABKAsyNS5pbXByb2JhYmxl",
            "LnNwYXRpYWxvcy5kZXBsb3ltZW50LnYxYmV0YTEuTGF1bmNoQ29uZmlnErMB",
            "Cg9ydW50aW1lX3ZlcnNpb24YCSABKAlCmQHq3x+UAQocZXhwZXJpbWVudGFs",
            "LXJ1bnRpbWUtdmVyc2lvbip0VGhlIGV4cGVyaW1lbnRhbCB2ZXJzaW9uIG9m",
            "IHRoZSBSdW50aW1lIHRvIHN0YXJ0IHRoZSBkZXBsb3ltZW50IHdpdGguIERl",
            "ZmF1bHRzIHRvIHVzaW5nIHRoZSBzdGFibGUgcmVsZWFzZWQgdmVyc2lvbi4i",
            "GgoYQ3JlYXRlRGVwbG95bWVudE1ldGFkYXRhIiYKGFJlc3RhcnREZXBsb3lt",
            "ZW50UmVxdWVzdBIKCgJpZBgBIAEoAyJPChdEZWxldGVEZXBsb3ltZW50UmVx",
            "dWVzdBI0CgJpZBgBIAEoA0Io6t8fJBIBaSodSUQgb2YgdGhlIGRlcGxveW1l",
            "bnQgdG8gc3RvcC4wASIaChhEZWxldGVEZXBsb3ltZW50TWV0YWRhdGEirAQK",
            "BkZpbHRlchJuCh5zdG9wcGVkX3N0YXR1c19wcm9wZXJ0eV9maWx0ZXIYASAB",
            "KAsyRC5pbXByb2JhYmxlLnNwYXRpYWxvcy5kZXBsb3ltZW50LnYxYmV0YTEu",
            "U3RvcHBlZFN0YXR1c1Byb3BlcnR5RmlsdGVySAASWwoUdGFnc19wcm9wZXJ0",
            "eV9maWx0ZXIYAiABKAsyOy5pbXByb2JhYmxlLnNwYXRpYWxvcy5kZXBsb3lt",
            "ZW50LnYxYmV0YTEuVGFnc1Byb3BlcnR5RmlsdGVySAASaAobY3JlYXRlX3Rp",
            "bWVfcHJvcGVydHlfZmlsdGVyGAMgASgLMkEuaW1wcm9iYWJsZS5zcGF0aWFs",
            "b3MuZGVwbG95bWVudC52MWJldGExLkNyZWF0ZVRpbWVQcm9wZXJ0eUZpbHRl",
            "ckgAEmoKHHN0b3BwZWRfdGltZV9wcm9wZXJ0eV9maWx0ZXIYBCABKAsyQi5p",
            "bXByb2JhYmxlLnNwYXRpYWxvcy5kZXBsb3ltZW50LnYxYmV0YTEuU3RvcHBl",
            "ZFRpbWVQcm9wZXJ0eUZpbHRlckgAEnAKH2RlcGxveW1lbnRfbmFtZV9wcm9w",
            "ZXJ0eV9maWx0ZXIYBSABKAsyRS5pbXByb2JhYmxlLnNwYXRpYWxvcy5kZXBs",
            "b3ltZW50LnYxYmV0YTEuRGVwbG95bWVudE5hbWVQcm9wZXJ0eUZpbHRlckgA",
            "Qg0KC2ZpbHRlcl90eXBlIuUBChtTdG9wcGVkU3RhdHVzUHJvcGVydHlGaWx0",
            "ZXISagoOc3RvcHBlZF9zdGF0dXMYASABKA4yUi5pbXByb2JhYmxlLnNwYXRp",
            "YWxvcy5kZXBsb3ltZW50LnYxYmV0YTEuU3RvcHBlZFN0YXR1c1Byb3BlcnR5",
            "RmlsdGVyLlN0b3BwZWRTdGF0dXMiWgoNU3RvcHBlZFN0YXR1cxITCg9BTExf",
            "REVQTE9ZTUVOVFMQABIXChNTVE9QUEVEX0RFUExPWU1FTlRTEAESGwoXTk9U",
            "X1NUT1BQRURfREVQTE9ZTUVOVFMQAiLQAQocRGVwbG95bWVudE5hbWVQcm9w",
            "ZXJ0eUZpbHRlchJgCghvcGVyYXRvchgBIAEoDjJOLmltcHJvYmFibGUuc3Bh",
            "dGlhbG9zLmRlcGxveW1lbnQudjFiZXRhMS5EZXBsb3ltZW50TmFtZVByb3Bl",
            "cnR5RmlsdGVyLk9wZXJhdG9yEhcKD2RlcGxveW1lbnRfbmFtZRgCIAEoCSI1",
            "CghPcGVyYXRvchIJCgVFUVVBTBAAEgwKCENPTlRBSU5TEAESEAoMTk9UX0NP",
            "TlRBSU5TEAIisAEKElRhZ3NQcm9wZXJ0eUZpbHRlchJWCghvcGVyYXRvchgB",
            "IAEoDjJELmltcHJvYmFibGUuc3BhdGlhbG9zLmRlcGxveW1lbnQudjFiZXRh",
            "MS5UYWdzUHJvcGVydHlGaWx0ZXIuT3BlcmF0b3ISCwoDdGFnGAIgASgJIjUK",
            "CE9wZXJhdG9yEgkKBUVRVUFMEAASDAoIQ09OVEFJTlMQARIQCgxOT1RfQ09O",
            "VEFJTlMQAiKUAgoYQ3JlYXRlVGltZVByb3BlcnR5RmlsdGVyElwKCG9wZXJh",
            "dG9yGAEgASgOMkouaW1wcm9iYWJsZS5zcGF0aWFsb3MuZGVwbG95bWVudC52",
            "MWJldGExLkNyZWF0ZVRpbWVQcm9wZXJ0eUZpbHRlci5PcGVyYXRvchIvCgtj",
            "cmVhdGVfdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAi",
            "aQoIT3BlcmF0b3ISCQoFRVFVQUwQABINCglMRVNTX1RIQU4QARIWChJMRVNT",
            "X1RIQU5fT1JfRVFVQUwQAhIQCgxHUkVBVEVSX1RIQU4QAxIZChVHUkVBVEVS",
            "X1RIQU5fT1JfRVFVQUwQBCKXAgoZU3RvcHBlZFRpbWVQcm9wZXJ0eUZpbHRl",
            "chJdCghvcGVyYXRvchgBIAEoDjJLLmltcHJvYmFibGUuc3BhdGlhbG9zLmRl",
            "cGxveW1lbnQudjFiZXRhMS5TdG9wcGVkVGltZVByb3BlcnR5RmlsdGVyLk9w",
            "ZXJhdG9yEjAKDHN0b3BwZWRfdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1",
            "Zi5UaW1lc3RhbXAiaQoIT3BlcmF0b3ISCQoFRVFVQUwQABINCglMRVNTX1RI",
            "QU4QARIWChJMRVNTX1RIQU5fT1JfRVFVQUwQAhIQCgxHUkVBVEVSX1RIQU4Q",
            "AxIZChVHUkVBVEVSX1RIQU5fT1JfRVFVQUwQBCofCghWaWV3VHlwZRIJCgVC",
            "QVNJQxAAEggKBEZVTEwQATLyDQoRRGVwbG95bWVudFNlcnZpY2USlgEKEENy",
            "ZWF0ZURlcGxveW1lbnQSQC5pbXByb2JhYmxlLnNwYXRpYWxvcy5kZXBsb3lt",
            "ZW50LnYxYmV0YTEuQ3JlYXRlRGVwbG95bWVudFJlcXVlc3QaHS5nb29nbGUu",
            "bG9uZ3J1bm5pbmcuT3BlcmF0aW9uIiHq3x8dCgZjcmVhdGUSE1N0YXJ0IGEg",
            "ZGVwbG95bWVudC4S8AEKEERlbGV0ZURlcGxveW1lbnQSQC5pbXByb2JhYmxl",
            "LnNwYXRpYWxvcy5kZXBsb3ltZW50LnYxYmV0YTEuRGVsZXRlRGVwbG95bWVu",
            "dFJlcXVlc3QaHS5nb29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uInvq3x93",
            "CgZkZWxldGUSbVN0b3AgYW5kIGRlbGV0ZSBhIHJ1bm5pbmcgZGVwbG95bWVu",
            "dC4gWW91IGNhbiBjYWxsIHRoaXMgYXQgYW55IHBvaW50IGFmdGVyIHlvdSd2",
            "ZSBjYWxsZWQgJ2RlcGxveW1lbnQgY3JlYXRlJy4SdwoRUmVzdGFydERlcGxv",
            "eW1lbnQSQS5pbXByb2JhYmxlLnNwYXRpYWxvcy5kZXBsb3ltZW50LnYxYmV0",
            "YTEuUmVzdGFydERlcGxveW1lbnRSZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdydW5u",
            "aW5nLk9wZXJhdGlvbiIAEsoBCg9MaXN0RGVwbG95bWVudHMSPy5pbXByb2Jh",
            "YmxlLnNwYXRpYWxvcy5kZXBsb3ltZW50LnYxYmV0YTEuTGlzdERlcGxveW1l",
            "bnRzUmVxdWVzdBpALmltcHJvYmFibGUuc3BhdGlhbG9zLmRlcGxveW1lbnQu",
            "djFiZXRhMS5MaXN0RGVwbG95bWVudHNSZXNwb25zZSI06t8fMAoEbGlzdBIo",
            "TGlzdHMgZGVwbG95bWVudHMgdW5kZXIgYSBnaXZlbiBwcm9qZWN0LhKOAQoN",
            "R2V0RGVwbG95bWVudBI9LmltcHJvYmFibGUuc3BhdGlhbG9zLmRlcGxveW1l",
            "bnQudjFiZXRhMS5HZXREZXBsb3ltZW50UmVxdWVzdBo+LmltcHJvYmFibGUu",
            "c3BhdGlhbG9zLmRlcGxveW1lbnQudjFiZXRhMS5HZXREZXBsb3ltZW50UmVz",
            "cG9uc2USqAEKGkdldFJ1bm5pbmdEZXBsb3ltZW50QnlOYW1lEkouaW1wcm9i",
            "YWJsZS5zcGF0aWFsb3MuZGVwbG95bWVudC52MWJldGExLkdldFJ1bm5pbmdE",
            "ZXBsb3ltZW50QnlOYW1lUmVxdWVzdBo+LmltcHJvYmFibGUuc3BhdGlhbG9z",
            "LmRlcGxveW1lbnQudjFiZXRhMS5HZXREZXBsb3ltZW50UmVzcG9uc2USrwEK",
            "GFNldERlcGxveW1lbnRXb3JrZXJGbGFncxJILmltcHJvYmFibGUuc3BhdGlh",
            "bG9zLmRlcGxveW1lbnQudjFiZXRhMS5TZXREZXBsb3ltZW50V29ya2VyRmxh",
            "Z3NSZXF1ZXN0GkkuaW1wcm9iYWJsZS5zcGF0aWFsb3MuZGVwbG95bWVudC52",
            "MWJldGExLlNldERlcGxveW1lbnRXb3JrZXJGbGFnc1Jlc3BvbnNlEpoBChFT",
            "ZXREZXBsb3ltZW50VGFncxJBLmltcHJvYmFibGUuc3BhdGlhbG9zLmRlcGxv",
            "eW1lbnQudjFiZXRhMS5TZXREZXBsb3ltZW50VGFnc1JlcXVlc3QaQi5pbXBy",
            "b2JhYmxlLnNwYXRpYWxvcy5kZXBsb3ltZW50LnYxYmV0YTEuU2V0RGVwbG95",
            "bWVudFRhZ3NSZXNwb25zZRK+AQodU2V0RGVwbG95bWVudFdvcmtlckNhcGFj",
            "aXRpZXMSTS5pbXByb2JhYmxlLnNwYXRpYWxvcy5kZXBsb3ltZW50LnYxYmV0",
            "YTEuU2V0RGVwbG95bWVudFdvcmtlckNhcGFjaXRpZXNSZXF1ZXN0Gk4uaW1w",
            "cm9iYWJsZS5zcGF0aWFsb3MuZGVwbG95bWVudC52MWJldGExLlNldERlcGxv",
            "eW1lbnRXb3JrZXJDYXBhY2l0aWVzUmVzcG9uc2USvgEKHVNldERlcGxveW1l",
            "bnRXb3JrZXJSYXRlTGltaXRzEk0uaW1wcm9iYWJsZS5zcGF0aWFsb3MuZGVw",
            "bG95bWVudC52MWJldGExLlNldERlcGxveW1lbnRXb3JrZXJSYXRlTGltaXRz",
            "UmVxdWVzdBpOLmltcHJvYmFibGUuc3BhdGlhbG9zLmRlcGxveW1lbnQudjFi",
            "ZXRhMS5TZXREZXBsb3ltZW50V29ya2VyUmF0ZUxpbWl0c1Jlc3BvbnNlQl5a",
            "MmltcHJvYmFibGUvc3BhdGlhbG9zL2RlcGxveW1lbnQvdjFiZXRhMTtkZXBs",
            "b3ltZW50qgInSW1wcm9iYWJsZS5TcGF0aWFsT1MuRGVwbG95bWVudC5WMUJl",
            "dGExYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.LongRunning.OperationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Validator.ValidatorReflection.Descriptor, global::Cli.CliReflection.Descriptor, global::Improbable.LogfieldsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.ViewType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.Deployment), global::Improbable.SpatialOS.Deployment.V1Beta1.Deployment.Parser, new[]{ "Id", "ProjectName", "DeploymentName", "RegionCode", "ClusterCode", "AssemblyName", "StartingSnapshotId", "Tags", "Status", "LaunchConfig", "WorkerFlags", "StartTime", "StopTime", "WorkerConnectionCapacities", "WorkerConnectionRateLimits", "Description", "RuntimeVersion", "ExpiryTime" }, null, new[]{ typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.Deployment.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerCapacity), global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerCapacity.Parser, new[]{ "WorkerType", "MaxCapacity", "RemainingCapacity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerRateLimit), global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerRateLimit.Parser, new[]{ "WorkerType", "Duration", "RequestsInDuration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.LaunchConfig), global::Improbable.SpatialOS.Deployment.V1Beta1.LaunchConfig.Parser, new[]{ "ConfigJson" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerFlag), global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerFlag.Parser, new[]{ "WorkerType", "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.SetDeploymentWorkerFlagsRequest), global::Improbable.SpatialOS.Deployment.V1Beta1.SetDeploymentWorkerFlagsRequest.Parser, new[]{ "DeploymentId", "WorkerFlags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.SetDeploymentWorkerFlagsResponse), global::Improbable.SpatialOS.Deployment.V1Beta1.SetDeploymentWorkerFlagsResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.SetDeploymentTagsRequest), global::Improbable.SpatialOS.Deployment.V1Beta1.SetDeploymentTagsRequest.Parser, new[]{ "DeploymentId", "Tags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.SetDeploymentTagsResponse), global::Improbable.SpatialOS.Deployment.V1Beta1.SetDeploymentTagsResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.SetDeploymentWorkerCapacitiesRequest), global::Improbable.SpatialOS.Deployment.V1Beta1.SetDeploymentWorkerCapacitiesRequest.Parser, new[]{ "DeploymentId", "WorkerConnectionCapacities" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.SetDeploymentWorkerCapacitiesResponse), global::Improbable.SpatialOS.Deployment.V1Beta1.SetDeploymentWorkerCapacitiesResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.SetDeploymentWorkerRateLimitsRequest), global::Improbable.SpatialOS.Deployment.V1Beta1.SetDeploymentWorkerRateLimitsRequest.Parser, new[]{ "DeploymentId", "WorkerConnectionRateLimits" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.SetDeploymentWorkerRateLimitsResponse), global::Improbable.SpatialOS.Deployment.V1Beta1.SetDeploymentWorkerRateLimitsResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.ListDeploymentsRequest), global::Improbable.SpatialOS.Deployment.V1Beta1.ListDeploymentsRequest.Parser, new[]{ "ProjectName", "PageSize", "PageToken", "Filters" }, null, new[]{ typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.ListDeploymentsRequest.Types.DeploymentStoppedStatusFilter) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.ListDeploymentsResponse), global::Improbable.SpatialOS.Deployment.V1Beta1.ListDeploymentsResponse.Parser, new[]{ "Deployments", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.GetDeploymentRequest), global::Improbable.SpatialOS.Deployment.V1Beta1.GetDeploymentRequest.Parser, new[]{ "Id", "View" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.GetDeploymentResponse), global::Improbable.SpatialOS.Deployment.V1Beta1.GetDeploymentResponse.Parser, new[]{ "Deployment" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.GetRunningDeploymentByNameRequest), global::Improbable.SpatialOS.Deployment.V1Beta1.GetRunningDeploymentByNameRequest.Parser, new[]{ "ProjectName", "DeploymentName", "View" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.CreateDeploymentRequest), global::Improbable.SpatialOS.Deployment.V1Beta1.CreateDeploymentRequest.Parser, new[]{ "ProjectName", "DeploymentName", "ClusterCode", "RegionCode", "AssemblyName", "StartingSnapshotId", "Tags", "LaunchConfig", "RuntimeVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.CreateDeploymentMetadata), global::Improbable.SpatialOS.Deployment.V1Beta1.CreateDeploymentMetadata.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.RestartDeploymentRequest), global::Improbable.SpatialOS.Deployment.V1Beta1.RestartDeploymentRequest.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.DeleteDeploymentRequest), global::Improbable.SpatialOS.Deployment.V1Beta1.DeleteDeploymentRequest.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.DeleteDeploymentMetadata), global::Improbable.SpatialOS.Deployment.V1Beta1.DeleteDeploymentMetadata.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.Filter), global::Improbable.SpatialOS.Deployment.V1Beta1.Filter.Parser, new[]{ "StoppedStatusPropertyFilter", "TagsPropertyFilter", "CreateTimePropertyFilter", "StoppedTimePropertyFilter", "DeploymentNamePropertyFilter" }, new[]{ "FilterType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.StoppedStatusPropertyFilter), global::Improbable.SpatialOS.Deployment.V1Beta1.StoppedStatusPropertyFilter.Parser, new[]{ "StoppedStatus" }, null, new[]{ typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.StoppedStatusPropertyFilter.Types.StoppedStatus) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentNamePropertyFilter), global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentNamePropertyFilter.Parser, new[]{ "Operator", "DeploymentName" }, null, new[]{ typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentNamePropertyFilter.Types.Operator) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.TagsPropertyFilter), global::Improbable.SpatialOS.Deployment.V1Beta1.TagsPropertyFilter.Parser, new[]{ "Operator", "Tag" }, null, new[]{ typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.TagsPropertyFilter.Types.Operator) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.CreateTimePropertyFilter), global::Improbable.SpatialOS.Deployment.V1Beta1.CreateTimePropertyFilter.Parser, new[]{ "Operator", "CreateTime" }, null, new[]{ typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.CreateTimePropertyFilter.Types.Operator) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.StoppedTimePropertyFilter), global::Improbable.SpatialOS.Deployment.V1Beta1.StoppedTimePropertyFilter.Parser, new[]{ "Operator", "StoppedTime" }, null, new[]{ typeof(global::Improbable.SpatialOS.Deployment.V1Beta1.StoppedTimePropertyFilter.Types.Operator) }, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Default is BASIC unless otherwise specified.
  /// </summary>
  public enum ViewType {
    /// <summary>
    /// Only return basic fields for each `Deployment` message.
    /// Does not return:
    ///   * WorkerFlags
    ///   * WorkerConnectionCapacities
    ///   * WorkerConnectionRateLimits
    /// </summary>
    [pbr::OriginalName("BASIC")] Basic = 0,
    /// <summary>
    /// Return all fields for each `Deployment` message. Unless you require the additional fields,
    /// prefer BASIC as it is significantly less expensive.
    /// </summary>
    [pbr::OriginalName("FULL")] Full = 1,
  }

  #endregion

  #region Messages
  public sealed partial class Deployment : pb::IMessage<Deployment> {
    private static readonly pb::MessageParser<Deployment> _parser = new pb::MessageParser<Deployment>(() => new Deployment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Deployment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deployment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deployment(Deployment other) : this() {
      id_ = other.id_;
      projectName_ = other.projectName_;
      deploymentName_ = other.deploymentName_;
      regionCode_ = other.regionCode_;
      clusterCode_ = other.clusterCode_;
      assemblyName_ = other.assemblyName_;
      startingSnapshotId_ = other.startingSnapshotId_;
      tags_ = other.tags_.Clone();
      status_ = other.status_;
      LaunchConfig = other.launchConfig_ != null ? other.LaunchConfig.Clone() : null;
      workerFlags_ = other.workerFlags_.Clone();
      StartTime = other.startTime_ != null ? other.StartTime.Clone() : null;
      StopTime = other.stopTime_ != null ? other.StopTime.Clone() : null;
      workerConnectionCapacities_ = other.workerConnectionCapacities_.Clone();
      workerConnectionRateLimits_ = other.workerConnectionRateLimits_.Clone();
      description_ = other.description_;
      runtimeVersion_ = other.runtimeVersion_;
      ExpiryTime = other.expiryTime_ != null ? other.ExpiryTime.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deployment Clone() {
      return new Deployment(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    /// A unique identifier for the deployment. Read-only. The deployment's `id` is assigned
    /// automatically and uniquely identifies a particular run of a deployment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "project_name" field.</summary>
    public const int ProjectNameFieldNumber = 2;
    private string projectName_ = "";
    /// <summary>
    /// The name of the project this deployment belongs to.
    /// It must be lower case letters or numbers or underscores and 3-32 characters in length.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deployment_name" field.</summary>
    public const int DeploymentNameFieldNumber = 3;
    private string deploymentName_ = "";
    /// <summary>
    /// The name of the deployment.
    /// It must be lower case letters or numbers or underscores and 3-32 characters in length.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeploymentName {
      get { return deploymentName_; }
      set {
        deploymentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region_code" field.</summary>
    public const int RegionCodeFieldNumber = 4;
    private string regionCode_ = "";
    /// <summary>
    /// The region that the deployment is running in.
    /// The supported regions are "EU" and "US" (and "AP" for specific users who have requested
    /// access).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegionCode {
      get { return regionCode_; }
      set {
        regionCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster_code" field.</summary>
    public const int ClusterCodeFieldNumber = 5;
    private string clusterCode_ = "";
    /// <summary>
    /// The name of the cluster this deployment is in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterCode {
      get { return clusterCode_; }
      set {
        clusterCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "assembly_name" field.</summary>
    public const int AssemblyNameFieldNumber = 7;
    private string assemblyName_ = "";
    /// <summary>
    /// The assembly to use for the deployment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssemblyName {
      get { return assemblyName_; }
      set {
        assemblyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "starting_snapshot_id" field.</summary>
    public const int StartingSnapshotIdFieldNumber = 8;
    private string startingSnapshotId_ = "";
    /// <summary>
    /// The starting snapshot for the deployment.
    /// This is a string to allow users to provide a filepath to a snapshot in the local workflow.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartingSnapshotId {
      get { return startingSnapshotId_; }
      set {
        startingSnapshotId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Tags associated with the deployment. Tags are a set of strings you can use to identify
    /// deployments. A tag must be upper or lower case letters or numbers or underscores and 3-32 characters in
    /// length.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 10;
    private global::Improbable.SpatialOS.Deployment.V1Beta1.Deployment.Types.Status status_ = 0;
    /// <summary>
    /// Whether the deployment is running.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Deployment.V1Beta1.Deployment.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "launch_config" field.</summary>
    public const int LaunchConfigFieldNumber = 11;
    private global::Improbable.SpatialOS.Deployment.V1Beta1.LaunchConfig launchConfig_;
    /// <summary>
    /// The configuration for starting the deployment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Deployment.V1Beta1.LaunchConfig LaunchConfig {
      get { return launchConfig_; }
      set {
        launchConfig_ = value;
      }
    }

    /// <summary>Field number for the "worker_flags" field.</summary>
    public const int WorkerFlagsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerFlag> _repeated_workerFlags_codec
        = pb::FieldCodec.ForMessage(98, global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerFlag.Parser);
    private readonly pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerFlag> workerFlags_ = new pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerFlag>();
    /// <summary>
    /// The worker flags that the deployment exposes at runtime.
    ///
    /// Only applicable to running deployments. It is omitted for deployments in other states.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerFlag> WorkerFlags {
      get { return workerFlags_; }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 13;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    /// <summary>
    /// The time the deployment is started.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "stop_time" field.</summary>
    public const int StopTimeFieldNumber = 14;
    private global::Google.Protobuf.WellKnownTypes.Timestamp stopTime_;
    /// <summary>
    /// The time the deployment is stopped.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StopTime {
      get { return stopTime_; }
      set {
        stopTime_ = value;
      }
    }

    /// <summary>Field number for the "worker_connection_capacities" field.</summary>
    public const int WorkerConnectionCapacitiesFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerCapacity> _repeated_workerConnectionCapacities_codec
        = pb::FieldCodec.ForMessage(122, global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerCapacity.Parser);
    private readonly pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerCapacity> workerConnectionCapacities_ = new pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerCapacity>();
    /// <summary>
    /// Only applicable to running deployments.
    ///
    /// The capacities of the deployment, broken down by worker type.
    /// The default maximum capacity for any worker type is a very large number,
    /// usually the maximum value of int32, i.e. 0x7FFFFFFF. But, it is not guaranteed.
    ///
    /// The current used capacity can always be calculated as `max_capacity` - `remaining_capacity`.
    ///
    /// Note: if you set the same worker type more than once, we provide no guarantee which overrides
    /// which.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerCapacity> WorkerConnectionCapacities {
      get { return workerConnectionCapacities_; }
    }

    /// <summary>Field number for the "worker_connection_rate_limits" field.</summary>
    public const int WorkerConnectionRateLimitsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerRateLimit> _repeated_workerConnectionRateLimits_codec
        = pb::FieldCodec.ForMessage(130, global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerRateLimit.Parser);
    private readonly pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerRateLimit> workerConnectionRateLimits_ = new pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerRateLimit>();
    /// <summary>
    /// Only applicable to running deployments.
    ///
    /// The rate limits of the deployment, broken down by worker type. If a worker type is absent or
    /// has zero'ed value, you can assume that worker type is not rate limited.
    ///
    /// Note: if you set the same worker type more than once, we provide no guarantee which overrides
    /// which.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerRateLimit> WorkerConnectionRateLimits {
      get { return workerConnectionRateLimits_; }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 17;
    private string description_ = "";
    /// <summary>
    /// The description provided when the deployment was started
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "runtime_version" field.</summary>
    public const int RuntimeVersionFieldNumber = 18;
    private string runtimeVersion_ = "";
    /// <summary>
    /// Only use this field if you were directed to do so by SpatialOS support
    ///
    /// The version of the Runtime to start the deployment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RuntimeVersion {
      get { return runtimeVersion_; }
      set {
        runtimeVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiry_time" field.</summary>
    public const int ExpiryTimeFieldNumber = 19;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expiryTime_;
    /// <summary>
    /// The time the deployment will expire.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpiryTime {
      get { return expiryTime_; }
      set {
        expiryTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Deployment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Deployment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ProjectName != other.ProjectName) return false;
      if (DeploymentName != other.DeploymentName) return false;
      if (RegionCode != other.RegionCode) return false;
      if (ClusterCode != other.ClusterCode) return false;
      if (AssemblyName != other.AssemblyName) return false;
      if (StartingSnapshotId != other.StartingSnapshotId) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(LaunchConfig, other.LaunchConfig)) return false;
      if(!workerFlags_.Equals(other.workerFlags_)) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(StopTime, other.StopTime)) return false;
      if(!workerConnectionCapacities_.Equals(other.workerConnectionCapacities_)) return false;
      if(!workerConnectionRateLimits_.Equals(other.workerConnectionRateLimits_)) return false;
      if (Description != other.Description) return false;
      if (RuntimeVersion != other.RuntimeVersion) return false;
      if (!object.Equals(ExpiryTime, other.ExpiryTime)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (DeploymentName.Length != 0) hash ^= DeploymentName.GetHashCode();
      if (RegionCode.Length != 0) hash ^= RegionCode.GetHashCode();
      if (ClusterCode.Length != 0) hash ^= ClusterCode.GetHashCode();
      if (AssemblyName.Length != 0) hash ^= AssemblyName.GetHashCode();
      if (StartingSnapshotId.Length != 0) hash ^= StartingSnapshotId.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (launchConfig_ != null) hash ^= LaunchConfig.GetHashCode();
      hash ^= workerFlags_.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (stopTime_ != null) hash ^= StopTime.GetHashCode();
      hash ^= workerConnectionCapacities_.GetHashCode();
      hash ^= workerConnectionRateLimits_.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (RuntimeVersion.Length != 0) hash ^= RuntimeVersion.GetHashCode();
      if (expiryTime_ != null) hash ^= ExpiryTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (ProjectName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProjectName);
      }
      if (DeploymentName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DeploymentName);
      }
      if (RegionCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RegionCode);
      }
      if (ClusterCode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ClusterCode);
      }
      if (AssemblyName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AssemblyName);
      }
      if (StartingSnapshotId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(StartingSnapshotId);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (Status != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Status);
      }
      if (launchConfig_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(LaunchConfig);
      }
      workerFlags_.WriteTo(output, _repeated_workerFlags_codec);
      if (startTime_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(StartTime);
      }
      if (stopTime_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(StopTime);
      }
      workerConnectionCapacities_.WriteTo(output, _repeated_workerConnectionCapacities_codec);
      workerConnectionRateLimits_.WriteTo(output, _repeated_workerConnectionRateLimits_codec);
      if (Description.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Description);
      }
      if (RuntimeVersion.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(RuntimeVersion);
      }
      if (expiryTime_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(ExpiryTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (DeploymentName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeploymentName);
      }
      if (RegionCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegionCode);
      }
      if (ClusterCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterCode);
      }
      if (AssemblyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssemblyName);
      }
      if (StartingSnapshotId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartingSnapshotId);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (launchConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LaunchConfig);
      }
      size += workerFlags_.CalculateSize(_repeated_workerFlags_codec);
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (stopTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StopTime);
      }
      size += workerConnectionCapacities_.CalculateSize(_repeated_workerConnectionCapacities_codec);
      size += workerConnectionRateLimits_.CalculateSize(_repeated_workerConnectionRateLimits_codec);
      if (Description.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (RuntimeVersion.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RuntimeVersion);
      }
      if (expiryTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExpiryTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Deployment other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.DeploymentName.Length != 0) {
        DeploymentName = other.DeploymentName;
      }
      if (other.RegionCode.Length != 0) {
        RegionCode = other.RegionCode;
      }
      if (other.ClusterCode.Length != 0) {
        ClusterCode = other.ClusterCode;
      }
      if (other.AssemblyName.Length != 0) {
        AssemblyName = other.AssemblyName;
      }
      if (other.StartingSnapshotId.Length != 0) {
        StartingSnapshotId = other.StartingSnapshotId;
      }
      tags_.Add(other.tags_);
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.launchConfig_ != null) {
        if (launchConfig_ == null) {
          launchConfig_ = new global::Improbable.SpatialOS.Deployment.V1Beta1.LaunchConfig();
        }
        LaunchConfig.MergeFrom(other.LaunchConfig);
      }
      workerFlags_.Add(other.workerFlags_);
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.stopTime_ != null) {
        if (stopTime_ == null) {
          stopTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StopTime.MergeFrom(other.StopTime);
      }
      workerConnectionCapacities_.Add(other.workerConnectionCapacities_);
      workerConnectionRateLimits_.Add(other.workerConnectionRateLimits_);
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.RuntimeVersion.Length != 0) {
        RuntimeVersion = other.RuntimeVersion;
      }
      if (other.expiryTime_ != null) {
        if (expiryTime_ == null) {
          expiryTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpiryTime.MergeFrom(other.ExpiryTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            ProjectName = input.ReadString();
            break;
          }
          case 26: {
            DeploymentName = input.ReadString();
            break;
          }
          case 34: {
            RegionCode = input.ReadString();
            break;
          }
          case 42: {
            ClusterCode = input.ReadString();
            break;
          }
          case 58: {
            AssemblyName = input.ReadString();
            break;
          }
          case 66: {
            StartingSnapshotId = input.ReadString();
            break;
          }
          case 74: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 80: {
            status_ = (global::Improbable.SpatialOS.Deployment.V1Beta1.Deployment.Types.Status) input.ReadEnum();
            break;
          }
          case 90: {
            if (launchConfig_ == null) {
              launchConfig_ = new global::Improbable.SpatialOS.Deployment.V1Beta1.LaunchConfig();
            }
            input.ReadMessage(launchConfig_);
            break;
          }
          case 98: {
            workerFlags_.AddEntriesFrom(input, _repeated_workerFlags_codec);
            break;
          }
          case 106: {
            if (startTime_ == null) {
              startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(startTime_);
            break;
          }
          case 114: {
            if (stopTime_ == null) {
              stopTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(stopTime_);
            break;
          }
          case 122: {
            workerConnectionCapacities_.AddEntriesFrom(input, _repeated_workerConnectionCapacities_codec);
            break;
          }
          case 130: {
            workerConnectionRateLimits_.AddEntriesFrom(input, _repeated_workerConnectionRateLimits_codec);
            break;
          }
          case 138: {
            Description = input.ReadString();
            break;
          }
          case 146: {
            RuntimeVersion = input.ReadString();
            break;
          }
          case 154: {
            if (expiryTime_ == null) {
              expiryTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(expiryTime_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Deployment message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("STARTING")] Starting = 100,
        [pbr::OriginalName("RUNNING")] Running = 200,
        [pbr::OriginalName("RESTARTING")] Restarting = 600,
        [pbr::OriginalName("STOPPING")] Stopping = 300,
        [pbr::OriginalName("STOPPED")] Stopped = 400,
        [pbr::OriginalName("ERROR")] Error = 500,
      }

    }
    #endregion

  }

  public sealed partial class WorkerCapacity : pb::IMessage<WorkerCapacity> {
    private static readonly pb::MessageParser<WorkerCapacity> _parser = new pb::MessageParser<WorkerCapacity>(() => new WorkerCapacity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkerCapacity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerCapacity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerCapacity(WorkerCapacity other) : this() {
      workerType_ = other.workerType_;
      maxCapacity_ = other.maxCapacity_;
      remainingCapacity_ = other.remainingCapacity_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerCapacity Clone() {
      return new WorkerCapacity(this);
    }

    /// <summary>Field number for the "worker_type" field.</summary>
    public const int WorkerTypeFieldNumber = 1;
    private string workerType_ = "";
    /// <summary>
    /// The type of worker that this capacity limit applies to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkerType {
      get { return workerType_; }
      set {
        workerType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max_capacity" field.</summary>
    public const int MaxCapacityFieldNumber = 2;
    private int maxCapacity_;
    /// <summary>
    /// Mutable.
    ///
    /// The maximum number of workers of the specified type that are allowed to connect to a SpatialOS
    /// deployment. Setting it to a lower number than the number of already connected workers does not
    /// drop their connections.
    ///
    /// It must not be a negative number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxCapacity {
      get { return maxCapacity_; }
      set {
        maxCapacity_ = value;
      }
    }

    /// <summary>Field number for the "remaining_capacity" field.</summary>
    public const int RemainingCapacityFieldNumber = 3;
    private int remainingCapacity_;
    /// <summary>
    /// Read-only.
    ///
    /// The available capacity for connection.
    ///
    /// Note: it can go negative when you set `max_capacity` lower than the connection capacity already
    /// used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainingCapacity {
      get { return remainingCapacity_; }
      set {
        remainingCapacity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkerCapacity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkerCapacity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorkerType != other.WorkerType) return false;
      if (MaxCapacity != other.MaxCapacity) return false;
      if (RemainingCapacity != other.RemainingCapacity) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorkerType.Length != 0) hash ^= WorkerType.GetHashCode();
      if (MaxCapacity != 0) hash ^= MaxCapacity.GetHashCode();
      if (RemainingCapacity != 0) hash ^= RemainingCapacity.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorkerType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WorkerType);
      }
      if (MaxCapacity != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxCapacity);
      }
      if (RemainingCapacity != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RemainingCapacity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorkerType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkerType);
      }
      if (MaxCapacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCapacity);
      }
      if (RemainingCapacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainingCapacity);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkerCapacity other) {
      if (other == null) {
        return;
      }
      if (other.WorkerType.Length != 0) {
        WorkerType = other.WorkerType;
      }
      if (other.MaxCapacity != 0) {
        MaxCapacity = other.MaxCapacity;
      }
      if (other.RemainingCapacity != 0) {
        RemainingCapacity = other.RemainingCapacity;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WorkerType = input.ReadString();
            break;
          }
          case 16: {
            MaxCapacity = input.ReadInt32();
            break;
          }
          case 24: {
            RemainingCapacity = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorkerRateLimit : pb::IMessage<WorkerRateLimit> {
    private static readonly pb::MessageParser<WorkerRateLimit> _parser = new pb::MessageParser<WorkerRateLimit>(() => new WorkerRateLimit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkerRateLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerRateLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerRateLimit(WorkerRateLimit other) : this() {
      workerType_ = other.workerType_;
      Duration = other.duration_ != null ? other.Duration.Clone() : null;
      requestsInDuration_ = other.requestsInDuration_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerRateLimit Clone() {
      return new WorkerRateLimit(this);
    }

    /// <summary>Field number for the "worker_type" field.</summary>
    public const int WorkerTypeFieldNumber = 1;
    private string workerType_ = "";
    /// <summary>
    /// The type of worker that this rate limit applies to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkerType {
      get { return workerType_; }
      set {
        workerType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Duration duration_;
    /// <summary>
    /// Mutable.
    ///
    /// The duration window to apply the rate limit in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "requests_in_duration" field.</summary>
    public const int RequestsInDurationFieldNumber = 3;
    private uint requestsInDuration_;
    /// <summary>
    /// Mutable.
    ///
    /// The maximum number of requests allowed during the specified duration window.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequestsInDuration {
      get { return requestsInDuration_; }
      set {
        requestsInDuration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkerRateLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkerRateLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorkerType != other.WorkerType) return false;
      if (!object.Equals(Duration, other.Duration)) return false;
      if (RequestsInDuration != other.RequestsInDuration) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorkerType.Length != 0) hash ^= WorkerType.GetHashCode();
      if (duration_ != null) hash ^= Duration.GetHashCode();
      if (RequestsInDuration != 0) hash ^= RequestsInDuration.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorkerType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WorkerType);
      }
      if (duration_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Duration);
      }
      if (RequestsInDuration != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RequestsInDuration);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorkerType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkerType);
      }
      if (duration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Duration);
      }
      if (RequestsInDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestsInDuration);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkerRateLimit other) {
      if (other == null) {
        return;
      }
      if (other.WorkerType.Length != 0) {
        WorkerType = other.WorkerType;
      }
      if (other.duration_ != null) {
        if (duration_ == null) {
          duration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Duration.MergeFrom(other.Duration);
      }
      if (other.RequestsInDuration != 0) {
        RequestsInDuration = other.RequestsInDuration;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WorkerType = input.ReadString();
            break;
          }
          case 18: {
            if (duration_ == null) {
              duration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(duration_);
            break;
          }
          case 24: {
            RequestsInDuration = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LaunchConfig : pb::IMessage<LaunchConfig> {
    private static readonly pb::MessageParser<LaunchConfig> _parser = new pb::MessageParser<LaunchConfig>(() => new LaunchConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LaunchConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaunchConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaunchConfig(LaunchConfig other) : this() {
      configJson_ = other.configJson_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaunchConfig Clone() {
      return new LaunchConfig(this);
    }

    /// <summary>Field number for the "config_json" field.</summary>
    public const int ConfigJsonFieldNumber = 1;
    private string configJson_ = "";
    /// <summary>
    /// The launch configuration for the deployment, supplied as JSON. Multiple formats are supported:
    /// FPL launch config format: https://docs.improbable.io/reference/latest/shared/flexible-project-layout/reference/launch-configuration
    /// SPL launch config format: https://docs.improbable.io/reference/latest/shared/project-layout/launch-config
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConfigJson {
      get { return configJson_; }
      set {
        configJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LaunchConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LaunchConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigJson != other.ConfigJson) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigJson.Length != 0) hash ^= ConfigJson.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigJson.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConfigJson);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConfigJson);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LaunchConfig other) {
      if (other == null) {
        return;
      }
      if (other.ConfigJson.Length != 0) {
        ConfigJson = other.ConfigJson;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConfigJson = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorkerFlag : pb::IMessage<WorkerFlag> {
    private static readonly pb::MessageParser<WorkerFlag> _parser = new pb::MessageParser<WorkerFlag>(() => new WorkerFlag());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkerFlag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerFlag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerFlag(WorkerFlag other) : this() {
      workerType_ = other.workerType_;
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerFlag Clone() {
      return new WorkerFlag(this);
    }

    /// <summary>Field number for the "worker_type" field.</summary>
    public const int WorkerTypeFieldNumber = 1;
    private string workerType_ = "";
    /// <summary>
    /// The type of server worker that can see the flag.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkerType {
      get { return workerType_; }
      set {
        workerType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    /// The key of the flag.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private string value_ = "";
    /// <summary>
    /// The value of the flag.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkerFlag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkerFlag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorkerType != other.WorkerType) return false;
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorkerType.Length != 0) hash ^= WorkerType.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorkerType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WorkerType);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorkerType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkerType);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkerFlag other) {
      if (other == null) {
        return;
      }
      if (other.WorkerType.Length != 0) {
        WorkerType = other.WorkerType;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WorkerType = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetDeploymentWorkerFlagsRequest : pb::IMessage<SetDeploymentWorkerFlagsRequest> {
    private static readonly pb::MessageParser<SetDeploymentWorkerFlagsRequest> _parser = new pb::MessageParser<SetDeploymentWorkerFlagsRequest>(() => new SetDeploymentWorkerFlagsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetDeploymentWorkerFlagsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentWorkerFlagsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentWorkerFlagsRequest(SetDeploymentWorkerFlagsRequest other) : this() {
      deploymentId_ = other.deploymentId_;
      workerFlags_ = other.workerFlags_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentWorkerFlagsRequest Clone() {
      return new SetDeploymentWorkerFlagsRequest(this);
    }

    /// <summary>Field number for the "deployment_id" field.</summary>
    public const int DeploymentIdFieldNumber = 1;
    private long deploymentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeploymentId {
      get { return deploymentId_; }
      set {
        deploymentId_ = value;
      }
    }

    /// <summary>Field number for the "worker_flags" field.</summary>
    public const int WorkerFlagsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerFlag> _repeated_workerFlags_codec
        = pb::FieldCodec.ForMessage(18, global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerFlag.Parser);
    private readonly pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerFlag> workerFlags_ = new pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerFlag>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerFlag> WorkerFlags {
      get { return workerFlags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetDeploymentWorkerFlagsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetDeploymentWorkerFlagsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeploymentId != other.DeploymentId) return false;
      if(!workerFlags_.Equals(other.workerFlags_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeploymentId != 0L) hash ^= DeploymentId.GetHashCode();
      hash ^= workerFlags_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeploymentId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(DeploymentId);
      }
      workerFlags_.WriteTo(output, _repeated_workerFlags_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeploymentId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeploymentId);
      }
      size += workerFlags_.CalculateSize(_repeated_workerFlags_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetDeploymentWorkerFlagsRequest other) {
      if (other == null) {
        return;
      }
      if (other.DeploymentId != 0L) {
        DeploymentId = other.DeploymentId;
      }
      workerFlags_.Add(other.workerFlags_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DeploymentId = input.ReadInt64();
            break;
          }
          case 18: {
            workerFlags_.AddEntriesFrom(input, _repeated_workerFlags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetDeploymentWorkerFlagsResponse : pb::IMessage<SetDeploymentWorkerFlagsResponse> {
    private static readonly pb::MessageParser<SetDeploymentWorkerFlagsResponse> _parser = new pb::MessageParser<SetDeploymentWorkerFlagsResponse>(() => new SetDeploymentWorkerFlagsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetDeploymentWorkerFlagsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentWorkerFlagsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentWorkerFlagsResponse(SetDeploymentWorkerFlagsResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentWorkerFlagsResponse Clone() {
      return new SetDeploymentWorkerFlagsResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetDeploymentWorkerFlagsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetDeploymentWorkerFlagsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetDeploymentWorkerFlagsResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SetDeploymentTagsRequest : pb::IMessage<SetDeploymentTagsRequest> {
    private static readonly pb::MessageParser<SetDeploymentTagsRequest> _parser = new pb::MessageParser<SetDeploymentTagsRequest>(() => new SetDeploymentTagsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetDeploymentTagsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentTagsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentTagsRequest(SetDeploymentTagsRequest other) : this() {
      deploymentId_ = other.deploymentId_;
      tags_ = other.tags_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentTagsRequest Clone() {
      return new SetDeploymentTagsRequest(this);
    }

    /// <summary>Field number for the "deployment_id" field.</summary>
    public const int DeploymentIdFieldNumber = 1;
    private long deploymentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeploymentId {
      get { return deploymentId_; }
      set {
        deploymentId_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetDeploymentTagsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetDeploymentTagsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeploymentId != other.DeploymentId) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeploymentId != 0L) hash ^= DeploymentId.GetHashCode();
      hash ^= tags_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeploymentId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(DeploymentId);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeploymentId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeploymentId);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetDeploymentTagsRequest other) {
      if (other == null) {
        return;
      }
      if (other.DeploymentId != 0L) {
        DeploymentId = other.DeploymentId;
      }
      tags_.Add(other.tags_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DeploymentId = input.ReadInt64();
            break;
          }
          case 18: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetDeploymentTagsResponse : pb::IMessage<SetDeploymentTagsResponse> {
    private static readonly pb::MessageParser<SetDeploymentTagsResponse> _parser = new pb::MessageParser<SetDeploymentTagsResponse>(() => new SetDeploymentTagsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetDeploymentTagsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentTagsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentTagsResponse(SetDeploymentTagsResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentTagsResponse Clone() {
      return new SetDeploymentTagsResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetDeploymentTagsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetDeploymentTagsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetDeploymentTagsResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SetDeploymentWorkerCapacitiesRequest : pb::IMessage<SetDeploymentWorkerCapacitiesRequest> {
    private static readonly pb::MessageParser<SetDeploymentWorkerCapacitiesRequest> _parser = new pb::MessageParser<SetDeploymentWorkerCapacitiesRequest>(() => new SetDeploymentWorkerCapacitiesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetDeploymentWorkerCapacitiesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentWorkerCapacitiesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentWorkerCapacitiesRequest(SetDeploymentWorkerCapacitiesRequest other) : this() {
      deploymentId_ = other.deploymentId_;
      workerConnectionCapacities_ = other.workerConnectionCapacities_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentWorkerCapacitiesRequest Clone() {
      return new SetDeploymentWorkerCapacitiesRequest(this);
    }

    /// <summary>Field number for the "deployment_id" field.</summary>
    public const int DeploymentIdFieldNumber = 1;
    private long deploymentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeploymentId {
      get { return deploymentId_; }
      set {
        deploymentId_ = value;
      }
    }

    /// <summary>Field number for the "worker_connection_capacities" field.</summary>
    public const int WorkerConnectionCapacitiesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerCapacity> _repeated_workerConnectionCapacities_codec
        = pb::FieldCodec.ForMessage(18, global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerCapacity.Parser);
    private readonly pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerCapacity> workerConnectionCapacities_ = new pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerCapacity>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerCapacity> WorkerConnectionCapacities {
      get { return workerConnectionCapacities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetDeploymentWorkerCapacitiesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetDeploymentWorkerCapacitiesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeploymentId != other.DeploymentId) return false;
      if(!workerConnectionCapacities_.Equals(other.workerConnectionCapacities_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeploymentId != 0L) hash ^= DeploymentId.GetHashCode();
      hash ^= workerConnectionCapacities_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeploymentId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(DeploymentId);
      }
      workerConnectionCapacities_.WriteTo(output, _repeated_workerConnectionCapacities_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeploymentId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeploymentId);
      }
      size += workerConnectionCapacities_.CalculateSize(_repeated_workerConnectionCapacities_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetDeploymentWorkerCapacitiesRequest other) {
      if (other == null) {
        return;
      }
      if (other.DeploymentId != 0L) {
        DeploymentId = other.DeploymentId;
      }
      workerConnectionCapacities_.Add(other.workerConnectionCapacities_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DeploymentId = input.ReadInt64();
            break;
          }
          case 18: {
            workerConnectionCapacities_.AddEntriesFrom(input, _repeated_workerConnectionCapacities_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetDeploymentWorkerCapacitiesResponse : pb::IMessage<SetDeploymentWorkerCapacitiesResponse> {
    private static readonly pb::MessageParser<SetDeploymentWorkerCapacitiesResponse> _parser = new pb::MessageParser<SetDeploymentWorkerCapacitiesResponse>(() => new SetDeploymentWorkerCapacitiesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetDeploymentWorkerCapacitiesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentWorkerCapacitiesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentWorkerCapacitiesResponse(SetDeploymentWorkerCapacitiesResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentWorkerCapacitiesResponse Clone() {
      return new SetDeploymentWorkerCapacitiesResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetDeploymentWorkerCapacitiesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetDeploymentWorkerCapacitiesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetDeploymentWorkerCapacitiesResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SetDeploymentWorkerRateLimitsRequest : pb::IMessage<SetDeploymentWorkerRateLimitsRequest> {
    private static readonly pb::MessageParser<SetDeploymentWorkerRateLimitsRequest> _parser = new pb::MessageParser<SetDeploymentWorkerRateLimitsRequest>(() => new SetDeploymentWorkerRateLimitsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetDeploymentWorkerRateLimitsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentWorkerRateLimitsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentWorkerRateLimitsRequest(SetDeploymentWorkerRateLimitsRequest other) : this() {
      deploymentId_ = other.deploymentId_;
      workerConnectionRateLimits_ = other.workerConnectionRateLimits_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentWorkerRateLimitsRequest Clone() {
      return new SetDeploymentWorkerRateLimitsRequest(this);
    }

    /// <summary>Field number for the "deployment_id" field.</summary>
    public const int DeploymentIdFieldNumber = 1;
    private long deploymentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeploymentId {
      get { return deploymentId_; }
      set {
        deploymentId_ = value;
      }
    }

    /// <summary>Field number for the "worker_connection_rate_limits" field.</summary>
    public const int WorkerConnectionRateLimitsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerRateLimit> _repeated_workerConnectionRateLimits_codec
        = pb::FieldCodec.ForMessage(18, global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerRateLimit.Parser);
    private readonly pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerRateLimit> workerConnectionRateLimits_ = new pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerRateLimit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.WorkerRateLimit> WorkerConnectionRateLimits {
      get { return workerConnectionRateLimits_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetDeploymentWorkerRateLimitsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetDeploymentWorkerRateLimitsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeploymentId != other.DeploymentId) return false;
      if(!workerConnectionRateLimits_.Equals(other.workerConnectionRateLimits_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeploymentId != 0L) hash ^= DeploymentId.GetHashCode();
      hash ^= workerConnectionRateLimits_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeploymentId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(DeploymentId);
      }
      workerConnectionRateLimits_.WriteTo(output, _repeated_workerConnectionRateLimits_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeploymentId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeploymentId);
      }
      size += workerConnectionRateLimits_.CalculateSize(_repeated_workerConnectionRateLimits_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetDeploymentWorkerRateLimitsRequest other) {
      if (other == null) {
        return;
      }
      if (other.DeploymentId != 0L) {
        DeploymentId = other.DeploymentId;
      }
      workerConnectionRateLimits_.Add(other.workerConnectionRateLimits_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DeploymentId = input.ReadInt64();
            break;
          }
          case 18: {
            workerConnectionRateLimits_.AddEntriesFrom(input, _repeated_workerConnectionRateLimits_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetDeploymentWorkerRateLimitsResponse : pb::IMessage<SetDeploymentWorkerRateLimitsResponse> {
    private static readonly pb::MessageParser<SetDeploymentWorkerRateLimitsResponse> _parser = new pb::MessageParser<SetDeploymentWorkerRateLimitsResponse>(() => new SetDeploymentWorkerRateLimitsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetDeploymentWorkerRateLimitsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentWorkerRateLimitsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentWorkerRateLimitsResponse(SetDeploymentWorkerRateLimitsResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeploymentWorkerRateLimitsResponse Clone() {
      return new SetDeploymentWorkerRateLimitsResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetDeploymentWorkerRateLimitsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetDeploymentWorkerRateLimitsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetDeploymentWorkerRateLimitsResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ListDeploymentsRequest : pb::IMessage<ListDeploymentsRequest> {
    private static readonly pb::MessageParser<ListDeploymentsRequest> _parser = new pb::MessageParser<ListDeploymentsRequest>(() => new ListDeploymentsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDeploymentsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDeploymentsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDeploymentsRequest(ListDeploymentsRequest other) : this() {
      projectName_ = other.projectName_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      filters_ = other.filters_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDeploymentsRequest Clone() {
      return new ListDeploymentsRequest(this);
    }

    /// <summary>Field number for the "project_name" field.</summary>
    public const int ProjectNameFieldNumber = 1;
    private string projectName_ = "";
    /// <summary>
    /// The project to list all deployments for.
    ///
    /// `project_name` must conform to the regex: ^[a-z0-9_]{3,32}$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    /// The maximum number of deployments to return in the response.
    ///
    /// It must not be negative. If unset or 0,
    /// it defaults to 20.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// The token to identify the starting point of the request.
    /// An empty or invalid token defaults to listing from the start.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filters" field.</summary>
    public const int FiltersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Improbable.SpatialOS.Deployment.V1Beta1.Filter> _repeated_filters_codec
        = pb::FieldCodec.ForMessage(34, global::Improbable.SpatialOS.Deployment.V1Beta1.Filter.Parser);
    private readonly pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.Filter> filters_ = new pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.Filter>();
    /// <summary>
    /// TODO(1896): add cli annotation here, may require an extension to protoc-gen-gocli
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.Filter> Filters {
      get { return filters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDeploymentsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDeploymentsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectName != other.ProjectName) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      if(!filters_.Equals(other.filters_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      hash ^= filters_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectName);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      filters_.WriteTo(output, _repeated_filters_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      size += filters_.CalculateSize(_repeated_filters_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDeploymentsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      filters_.Add(other.filters_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectName = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
          case 34: {
            filters_.AddEntriesFrom(input, _repeated_filters_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ListDeploymentsRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DeploymentStoppedStatusFilter {
        [pbr::OriginalName("ALL_DEPLOYMENTS")] AllDeployments = 0,
        [pbr::OriginalName("NOT_STOPPED_DEPLOYMENTS")] NotStoppedDeployments = 1,
        [pbr::OriginalName("STOPPED_DEPLOYMENTS")] StoppedDeployments = 2,
      }

    }
    #endregion

  }

  public sealed partial class ListDeploymentsResponse : pb::IMessage<ListDeploymentsResponse> {
    private static readonly pb::MessageParser<ListDeploymentsResponse> _parser = new pb::MessageParser<ListDeploymentsResponse>(() => new ListDeploymentsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDeploymentsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDeploymentsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDeploymentsResponse(ListDeploymentsResponse other) : this() {
      deployments_ = other.deployments_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDeploymentsResponse Clone() {
      return new ListDeploymentsResponse(this);
    }

    /// <summary>Field number for the "deployments" field.</summary>
    public const int DeploymentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Improbable.SpatialOS.Deployment.V1Beta1.Deployment> _repeated_deployments_codec
        = pb::FieldCodec.ForMessage(10, global::Improbable.SpatialOS.Deployment.V1Beta1.Deployment.Parser);
    private readonly pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.Deployment> deployments_ = new pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.Deployment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Improbable.SpatialOS.Deployment.V1Beta1.Deployment> Deployments {
      get { return deployments_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// A token you can supply to the ListDeployments RPC to retrieve the next page of
    /// paginated results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDeploymentsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDeploymentsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!deployments_.Equals(other.deployments_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= deployments_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      deployments_.WriteTo(output, _repeated_deployments_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += deployments_.CalculateSize(_repeated_deployments_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDeploymentsResponse other) {
      if (other == null) {
        return;
      }
      deployments_.Add(other.deployments_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            deployments_.AddEntriesFrom(input, _repeated_deployments_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetDeploymentRequest : pb::IMessage<GetDeploymentRequest> {
    private static readonly pb::MessageParser<GetDeploymentRequest> _parser = new pb::MessageParser<GetDeploymentRequest>(() => new GetDeploymentRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDeploymentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeploymentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeploymentRequest(GetDeploymentRequest other) : this() {
      id_ = other.id_;
      view_ = other.view_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeploymentRequest Clone() {
      return new GetDeploymentRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    /// A unique identifier for the deployment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "view" field.</summary>
    public const int ViewFieldNumber = 2;
    private global::Improbable.SpatialOS.Deployment.V1Beta1.ViewType view_ = 0;
    /// <summary>
    /// How much data is returned for the deployment. Optional.
    /// The default is BASIC, which does NOT return all fields for the `Deployment` in the response, but is
    /// much cheaper than requesting a FULL response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Deployment.V1Beta1.ViewType View {
      get { return view_; }
      set {
        view_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDeploymentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDeploymentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (View != other.View) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (View != 0) hash ^= View.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (View != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) View);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (View != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) View);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDeploymentRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.View != 0) {
        View = other.View;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            view_ = (global::Improbable.SpatialOS.Deployment.V1Beta1.ViewType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetDeploymentResponse : pb::IMessage<GetDeploymentResponse> {
    private static readonly pb::MessageParser<GetDeploymentResponse> _parser = new pb::MessageParser<GetDeploymentResponse>(() => new GetDeploymentResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDeploymentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeploymentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeploymentResponse(GetDeploymentResponse other) : this() {
      Deployment = other.deployment_ != null ? other.Deployment.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeploymentResponse Clone() {
      return new GetDeploymentResponse(this);
    }

    /// <summary>Field number for the "deployment" field.</summary>
    public const int DeploymentFieldNumber = 1;
    private global::Improbable.SpatialOS.Deployment.V1Beta1.Deployment deployment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Deployment.V1Beta1.Deployment Deployment {
      get { return deployment_; }
      set {
        deployment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDeploymentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDeploymentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Deployment, other.Deployment)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (deployment_ != null) hash ^= Deployment.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (deployment_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Deployment);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (deployment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deployment);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDeploymentResponse other) {
      if (other == null) {
        return;
      }
      if (other.deployment_ != null) {
        if (deployment_ == null) {
          deployment_ = new global::Improbable.SpatialOS.Deployment.V1Beta1.Deployment();
        }
        Deployment.MergeFrom(other.Deployment);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (deployment_ == null) {
              deployment_ = new global::Improbable.SpatialOS.Deployment.V1Beta1.Deployment();
            }
            input.ReadMessage(deployment_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRunningDeploymentByNameRequest : pb::IMessage<GetRunningDeploymentByNameRequest> {
    private static readonly pb::MessageParser<GetRunningDeploymentByNameRequest> _parser = new pb::MessageParser<GetRunningDeploymentByNameRequest>(() => new GetRunningDeploymentByNameRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRunningDeploymentByNameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRunningDeploymentByNameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRunningDeploymentByNameRequest(GetRunningDeploymentByNameRequest other) : this() {
      projectName_ = other.projectName_;
      deploymentName_ = other.deploymentName_;
      view_ = other.view_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRunningDeploymentByNameRequest Clone() {
      return new GetRunningDeploymentByNameRequest(this);
    }

    /// <summary>Field number for the "project_name" field.</summary>
    public const int ProjectNameFieldNumber = 1;
    private string projectName_ = "";
    /// <summary>
    /// The deployment's project.
    ///
    /// It must conform to the regex: ^[a-z0-9_]{3,32}$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deployment_name" field.</summary>
    public const int DeploymentNameFieldNumber = 2;
    private string deploymentName_ = "";
    /// <summary>
    /// The name of the deployment.
    ///
    /// It must conform to the regex: ^[a-z0-9_]{3,32}$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeploymentName {
      get { return deploymentName_; }
      set {
        deploymentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "view" field.</summary>
    public const int ViewFieldNumber = 3;
    private global::Improbable.SpatialOS.Deployment.V1Beta1.ViewType view_ = 0;
    /// <summary>
    /// How much data is returned for the deployment. Optional.
    /// The default is BASIC, which does NOT return all fields for the `Deployment` in the response, but is
    /// much cheaper than requesting a FULL response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Deployment.V1Beta1.ViewType View {
      get { return view_; }
      set {
        view_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRunningDeploymentByNameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRunningDeploymentByNameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectName != other.ProjectName) return false;
      if (DeploymentName != other.DeploymentName) return false;
      if (View != other.View) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (DeploymentName.Length != 0) hash ^= DeploymentName.GetHashCode();
      if (View != 0) hash ^= View.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectName);
      }
      if (DeploymentName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeploymentName);
      }
      if (View != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) View);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (DeploymentName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeploymentName);
      }
      if (View != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) View);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRunningDeploymentByNameRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.DeploymentName.Length != 0) {
        DeploymentName = other.DeploymentName;
      }
      if (other.View != 0) {
        View = other.View;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectName = input.ReadString();
            break;
          }
          case 18: {
            DeploymentName = input.ReadString();
            break;
          }
          case 24: {
            view_ = (global::Improbable.SpatialOS.Deployment.V1Beta1.ViewType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateDeploymentRequest : pb::IMessage<CreateDeploymentRequest> {
    private static readonly pb::MessageParser<CreateDeploymentRequest> _parser = new pb::MessageParser<CreateDeploymentRequest>(() => new CreateDeploymentRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateDeploymentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDeploymentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDeploymentRequest(CreateDeploymentRequest other) : this() {
      projectName_ = other.projectName_;
      deploymentName_ = other.deploymentName_;
      clusterCode_ = other.clusterCode_;
      regionCode_ = other.regionCode_;
      assemblyName_ = other.assemblyName_;
      startingSnapshotId_ = other.startingSnapshotId_;
      tags_ = other.tags_.Clone();
      LaunchConfig = other.launchConfig_ != null ? other.LaunchConfig.Clone() : null;
      runtimeVersion_ = other.runtimeVersion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDeploymentRequest Clone() {
      return new CreateDeploymentRequest(this);
    }

    /// <summary>Field number for the "project_name" field.</summary>
    public const int ProjectNameFieldNumber = 1;
    private string projectName_ = "";
    /// <summary>
    /// The name of the project this deployment belongs to.
    /// It must be lower case letters or numbers or underscores and 3-32 characters in length.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deployment_name" field.</summary>
    public const int DeploymentNameFieldNumber = 2;
    private string deploymentName_ = "";
    /// <summary>
    /// The name of the deployment.
    ///
    /// You choose the deployment's name. It must be lower case letters or numbers or underscores and
    /// 3-32 characters in length.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeploymentName {
      get { return deploymentName_; }
      set {
        deploymentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster_code" field.</summary>
    public const int ClusterCodeFieldNumber = 3;
    private string clusterCode_ = "";
    /// <summary>
    /// The name of the cluster this deployment is in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterCode {
      get { return clusterCode_; }
      set {
        clusterCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region_code" field.</summary>
    public const int RegionCodeFieldNumber = 4;
    private string regionCode_ = "";
    /// <summary>
    /// The region that the deployment is running in.
    /// The supported regions are "EU" and "US" (and "AP" for specific users who have requested
    /// access). Leave blank if unknown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegionCode {
      get { return regionCode_; }
      set {
        regionCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "assembly_name" field.</summary>
    public const int AssemblyNameFieldNumber = 5;
    private string assemblyName_ = "";
    /// <summary>
    /// The assembly to use for the deployment. You must supply this for cloud deployments. Local
    /// deployments automatically use the assembly located in the folder containing the
    /// `spatialos.json` file, so any value you supply is ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssemblyName {
      get { return assemblyName_; }
      set {
        assemblyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "starting_snapshot_id" field.</summary>
    public const int StartingSnapshotIdFieldNumber = 6;
    private string startingSnapshotId_ = "";
    /// <summary>
    /// The starting snapshot for the deployment. For cloud deployments, you must provide a starting
    /// snapshot. For local deployments, if you don't provide a starting snapshot, it uses the default.
    /// This is a string to allow users to provide a filepath to a snapshot in the local workflow.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartingSnapshotId {
      get { return startingSnapshotId_; }
      set {
        startingSnapshotId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Tags associated with the deployment. Tags are a set of strings you can use to identify
    /// deployments. A tag must be upper or lower case letters or numbers or underscores and 3-32 characters in
    /// length.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "launch_config" field.</summary>
    public const int LaunchConfigFieldNumber = 11;
    private global::Improbable.SpatialOS.Deployment.V1Beta1.LaunchConfig launchConfig_;
    /// <summary>
    /// The configuration for starting the deployment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Deployment.V1Beta1.LaunchConfig LaunchConfig {
      get { return launchConfig_; }
      set {
        launchConfig_ = value;
      }
    }

    /// <summary>Field number for the "runtime_version" field.</summary>
    public const int RuntimeVersionFieldNumber = 9;
    private string runtimeVersion_ = "";
    /// <summary>
    /// Only use this field if you were directed to do so by SpatialOS support
    ///
    /// The version of the Runtime to start the deployment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RuntimeVersion {
      get { return runtimeVersion_; }
      set {
        runtimeVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateDeploymentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateDeploymentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectName != other.ProjectName) return false;
      if (DeploymentName != other.DeploymentName) return false;
      if (ClusterCode != other.ClusterCode) return false;
      if (RegionCode != other.RegionCode) return false;
      if (AssemblyName != other.AssemblyName) return false;
      if (StartingSnapshotId != other.StartingSnapshotId) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (!object.Equals(LaunchConfig, other.LaunchConfig)) return false;
      if (RuntimeVersion != other.RuntimeVersion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (DeploymentName.Length != 0) hash ^= DeploymentName.GetHashCode();
      if (ClusterCode.Length != 0) hash ^= ClusterCode.GetHashCode();
      if (RegionCode.Length != 0) hash ^= RegionCode.GetHashCode();
      if (AssemblyName.Length != 0) hash ^= AssemblyName.GetHashCode();
      if (StartingSnapshotId.Length != 0) hash ^= StartingSnapshotId.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (launchConfig_ != null) hash ^= LaunchConfig.GetHashCode();
      if (RuntimeVersion.Length != 0) hash ^= RuntimeVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectName);
      }
      if (DeploymentName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeploymentName);
      }
      if (ClusterCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClusterCode);
      }
      if (RegionCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RegionCode);
      }
      if (AssemblyName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AssemblyName);
      }
      if (StartingSnapshotId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(StartingSnapshotId);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (RuntimeVersion.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(RuntimeVersion);
      }
      if (launchConfig_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(LaunchConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (DeploymentName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeploymentName);
      }
      if (ClusterCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterCode);
      }
      if (RegionCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegionCode);
      }
      if (AssemblyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssemblyName);
      }
      if (StartingSnapshotId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartingSnapshotId);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (launchConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LaunchConfig);
      }
      if (RuntimeVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RuntimeVersion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateDeploymentRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.DeploymentName.Length != 0) {
        DeploymentName = other.DeploymentName;
      }
      if (other.ClusterCode.Length != 0) {
        ClusterCode = other.ClusterCode;
      }
      if (other.RegionCode.Length != 0) {
        RegionCode = other.RegionCode;
      }
      if (other.AssemblyName.Length != 0) {
        AssemblyName = other.AssemblyName;
      }
      if (other.StartingSnapshotId.Length != 0) {
        StartingSnapshotId = other.StartingSnapshotId;
      }
      tags_.Add(other.tags_);
      if (other.launchConfig_ != null) {
        if (launchConfig_ == null) {
          launchConfig_ = new global::Improbable.SpatialOS.Deployment.V1Beta1.LaunchConfig();
        }
        LaunchConfig.MergeFrom(other.LaunchConfig);
      }
      if (other.RuntimeVersion.Length != 0) {
        RuntimeVersion = other.RuntimeVersion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectName = input.ReadString();
            break;
          }
          case 18: {
            DeploymentName = input.ReadString();
            break;
          }
          case 26: {
            ClusterCode = input.ReadString();
            break;
          }
          case 34: {
            RegionCode = input.ReadString();
            break;
          }
          case 42: {
            AssemblyName = input.ReadString();
            break;
          }
          case 50: {
            StartingSnapshotId = input.ReadString();
            break;
          }
          case 58: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 74: {
            RuntimeVersion = input.ReadString();
            break;
          }
          case 90: {
            if (launchConfig_ == null) {
              launchConfig_ = new global::Improbable.SpatialOS.Deployment.V1Beta1.LaunchConfig();
            }
            input.ReadMessage(launchConfig_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Metadata for CreateDeployment operations.
  /// </summary>
  public sealed partial class CreateDeploymentMetadata : pb::IMessage<CreateDeploymentMetadata> {
    private static readonly pb::MessageParser<CreateDeploymentMetadata> _parser = new pb::MessageParser<CreateDeploymentMetadata>(() => new CreateDeploymentMetadata());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateDeploymentMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDeploymentMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDeploymentMetadata(CreateDeploymentMetadata other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDeploymentMetadata Clone() {
      return new CreateDeploymentMetadata(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateDeploymentMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateDeploymentMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateDeploymentMetadata other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RestartDeploymentRequest : pb::IMessage<RestartDeploymentRequest> {
    private static readonly pb::MessageParser<RestartDeploymentRequest> _parser = new pb::MessageParser<RestartDeploymentRequest>(() => new RestartDeploymentRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RestartDeploymentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestartDeploymentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestartDeploymentRequest(RestartDeploymentRequest other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestartDeploymentRequest Clone() {
      return new RestartDeploymentRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RestartDeploymentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RestartDeploymentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RestartDeploymentRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteDeploymentRequest : pb::IMessage<DeleteDeploymentRequest> {
    private static readonly pb::MessageParser<DeleteDeploymentRequest> _parser = new pb::MessageParser<DeleteDeploymentRequest>(() => new DeleteDeploymentRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteDeploymentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDeploymentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDeploymentRequest(DeleteDeploymentRequest other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDeploymentRequest Clone() {
      return new DeleteDeploymentRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteDeploymentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteDeploymentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteDeploymentRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Metadata for DeleteDeployment operations.
  /// </summary>
  public sealed partial class DeleteDeploymentMetadata : pb::IMessage<DeleteDeploymentMetadata> {
    private static readonly pb::MessageParser<DeleteDeploymentMetadata> _parser = new pb::MessageParser<DeleteDeploymentMetadata>(() => new DeleteDeploymentMetadata());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteDeploymentMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDeploymentMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDeploymentMetadata(DeleteDeploymentMetadata other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDeploymentMetadata Clone() {
      return new DeleteDeploymentMetadata(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteDeploymentMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteDeploymentMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteDeploymentMetadata other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class Filter : pb::IMessage<Filter> {
    private static readonly pb::MessageParser<Filter> _parser = new pb::MessageParser<Filter>(() => new Filter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Filter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter(Filter other) : this() {
      switch (other.FilterTypeCase) {
        case FilterTypeOneofCase.StoppedStatusPropertyFilter:
          StoppedStatusPropertyFilter = other.StoppedStatusPropertyFilter.Clone();
          break;
        case FilterTypeOneofCase.TagsPropertyFilter:
          TagsPropertyFilter = other.TagsPropertyFilter.Clone();
          break;
        case FilterTypeOneofCase.CreateTimePropertyFilter:
          CreateTimePropertyFilter = other.CreateTimePropertyFilter.Clone();
          break;
        case FilterTypeOneofCase.StoppedTimePropertyFilter:
          StoppedTimePropertyFilter = other.StoppedTimePropertyFilter.Clone();
          break;
        case FilterTypeOneofCase.DeploymentNamePropertyFilter:
          DeploymentNamePropertyFilter = other.DeploymentNamePropertyFilter.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter Clone() {
      return new Filter(this);
    }

    /// <summary>Field number for the "stopped_status_property_filter" field.</summary>
    public const int StoppedStatusPropertyFilterFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Deployment.V1Beta1.StoppedStatusPropertyFilter StoppedStatusPropertyFilter {
      get { return filterTypeCase_ == FilterTypeOneofCase.StoppedStatusPropertyFilter ? (global::Improbable.SpatialOS.Deployment.V1Beta1.StoppedStatusPropertyFilter) filterType_ : null; }
      set {
        filterType_ = value;
        filterTypeCase_ = value == null ? FilterTypeOneofCase.None : FilterTypeOneofCase.StoppedStatusPropertyFilter;
      }
    }

    /// <summary>Field number for the "tags_property_filter" field.</summary>
    public const int TagsPropertyFilterFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Deployment.V1Beta1.TagsPropertyFilter TagsPropertyFilter {
      get { return filterTypeCase_ == FilterTypeOneofCase.TagsPropertyFilter ? (global::Improbable.SpatialOS.Deployment.V1Beta1.TagsPropertyFilter) filterType_ : null; }
      set {
        filterType_ = value;
        filterTypeCase_ = value == null ? FilterTypeOneofCase.None : FilterTypeOneofCase.TagsPropertyFilter;
      }
    }

    /// <summary>Field number for the "create_time_property_filter" field.</summary>
    public const int CreateTimePropertyFilterFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Deployment.V1Beta1.CreateTimePropertyFilter CreateTimePropertyFilter {
      get { return filterTypeCase_ == FilterTypeOneofCase.CreateTimePropertyFilter ? (global::Improbable.SpatialOS.Deployment.V1Beta1.CreateTimePropertyFilter) filterType_ : null; }
      set {
        filterType_ = value;
        filterTypeCase_ = value == null ? FilterTypeOneofCase.None : FilterTypeOneofCase.CreateTimePropertyFilter;
      }
    }

    /// <summary>Field number for the "stopped_time_property_filter" field.</summary>
    public const int StoppedTimePropertyFilterFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Deployment.V1Beta1.StoppedTimePropertyFilter StoppedTimePropertyFilter {
      get { return filterTypeCase_ == FilterTypeOneofCase.StoppedTimePropertyFilter ? (global::Improbable.SpatialOS.Deployment.V1Beta1.StoppedTimePropertyFilter) filterType_ : null; }
      set {
        filterType_ = value;
        filterTypeCase_ = value == null ? FilterTypeOneofCase.None : FilterTypeOneofCase.StoppedTimePropertyFilter;
      }
    }

    /// <summary>Field number for the "deployment_name_property_filter" field.</summary>
    public const int DeploymentNamePropertyFilterFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentNamePropertyFilter DeploymentNamePropertyFilter {
      get { return filterTypeCase_ == FilterTypeOneofCase.DeploymentNamePropertyFilter ? (global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentNamePropertyFilter) filterType_ : null; }
      set {
        filterType_ = value;
        filterTypeCase_ = value == null ? FilterTypeOneofCase.None : FilterTypeOneofCase.DeploymentNamePropertyFilter;
      }
    }

    private object filterType_;
    /// <summary>Enum of possible cases for the "filter_type" oneof.</summary>
    public enum FilterTypeOneofCase {
      None = 0,
      StoppedStatusPropertyFilter = 1,
      TagsPropertyFilter = 2,
      CreateTimePropertyFilter = 3,
      StoppedTimePropertyFilter = 4,
      DeploymentNamePropertyFilter = 5,
    }
    private FilterTypeOneofCase filterTypeCase_ = FilterTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterTypeOneofCase FilterTypeCase {
      get { return filterTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFilterType() {
      filterTypeCase_ = FilterTypeOneofCase.None;
      filterType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Filter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Filter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StoppedStatusPropertyFilter, other.StoppedStatusPropertyFilter)) return false;
      if (!object.Equals(TagsPropertyFilter, other.TagsPropertyFilter)) return false;
      if (!object.Equals(CreateTimePropertyFilter, other.CreateTimePropertyFilter)) return false;
      if (!object.Equals(StoppedTimePropertyFilter, other.StoppedTimePropertyFilter)) return false;
      if (!object.Equals(DeploymentNamePropertyFilter, other.DeploymentNamePropertyFilter)) return false;
      if (FilterTypeCase != other.FilterTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (filterTypeCase_ == FilterTypeOneofCase.StoppedStatusPropertyFilter) hash ^= StoppedStatusPropertyFilter.GetHashCode();
      if (filterTypeCase_ == FilterTypeOneofCase.TagsPropertyFilter) hash ^= TagsPropertyFilter.GetHashCode();
      if (filterTypeCase_ == FilterTypeOneofCase.CreateTimePropertyFilter) hash ^= CreateTimePropertyFilter.GetHashCode();
      if (filterTypeCase_ == FilterTypeOneofCase.StoppedTimePropertyFilter) hash ^= StoppedTimePropertyFilter.GetHashCode();
      if (filterTypeCase_ == FilterTypeOneofCase.DeploymentNamePropertyFilter) hash ^= DeploymentNamePropertyFilter.GetHashCode();
      hash ^= (int) filterTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (filterTypeCase_ == FilterTypeOneofCase.StoppedStatusPropertyFilter) {
        output.WriteRawTag(10);
        output.WriteMessage(StoppedStatusPropertyFilter);
      }
      if (filterTypeCase_ == FilterTypeOneofCase.TagsPropertyFilter) {
        output.WriteRawTag(18);
        output.WriteMessage(TagsPropertyFilter);
      }
      if (filterTypeCase_ == FilterTypeOneofCase.CreateTimePropertyFilter) {
        output.WriteRawTag(26);
        output.WriteMessage(CreateTimePropertyFilter);
      }
      if (filterTypeCase_ == FilterTypeOneofCase.StoppedTimePropertyFilter) {
        output.WriteRawTag(34);
        output.WriteMessage(StoppedTimePropertyFilter);
      }
      if (filterTypeCase_ == FilterTypeOneofCase.DeploymentNamePropertyFilter) {
        output.WriteRawTag(42);
        output.WriteMessage(DeploymentNamePropertyFilter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (filterTypeCase_ == FilterTypeOneofCase.StoppedStatusPropertyFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StoppedStatusPropertyFilter);
      }
      if (filterTypeCase_ == FilterTypeOneofCase.TagsPropertyFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TagsPropertyFilter);
      }
      if (filterTypeCase_ == FilterTypeOneofCase.CreateTimePropertyFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTimePropertyFilter);
      }
      if (filterTypeCase_ == FilterTypeOneofCase.StoppedTimePropertyFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StoppedTimePropertyFilter);
      }
      if (filterTypeCase_ == FilterTypeOneofCase.DeploymentNamePropertyFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeploymentNamePropertyFilter);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Filter other) {
      if (other == null) {
        return;
      }
      switch (other.FilterTypeCase) {
        case FilterTypeOneofCase.StoppedStatusPropertyFilter:
          StoppedStatusPropertyFilter = other.StoppedStatusPropertyFilter;
          break;
        case FilterTypeOneofCase.TagsPropertyFilter:
          TagsPropertyFilter = other.TagsPropertyFilter;
          break;
        case FilterTypeOneofCase.CreateTimePropertyFilter:
          CreateTimePropertyFilter = other.CreateTimePropertyFilter;
          break;
        case FilterTypeOneofCase.StoppedTimePropertyFilter:
          StoppedTimePropertyFilter = other.StoppedTimePropertyFilter;
          break;
        case FilterTypeOneofCase.DeploymentNamePropertyFilter:
          DeploymentNamePropertyFilter = other.DeploymentNamePropertyFilter;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Improbable.SpatialOS.Deployment.V1Beta1.StoppedStatusPropertyFilter subBuilder = new global::Improbable.SpatialOS.Deployment.V1Beta1.StoppedStatusPropertyFilter();
            if (filterTypeCase_ == FilterTypeOneofCase.StoppedStatusPropertyFilter) {
              subBuilder.MergeFrom(StoppedStatusPropertyFilter);
            }
            input.ReadMessage(subBuilder);
            StoppedStatusPropertyFilter = subBuilder;
            break;
          }
          case 18: {
            global::Improbable.SpatialOS.Deployment.V1Beta1.TagsPropertyFilter subBuilder = new global::Improbable.SpatialOS.Deployment.V1Beta1.TagsPropertyFilter();
            if (filterTypeCase_ == FilterTypeOneofCase.TagsPropertyFilter) {
              subBuilder.MergeFrom(TagsPropertyFilter);
            }
            input.ReadMessage(subBuilder);
            TagsPropertyFilter = subBuilder;
            break;
          }
          case 26: {
            global::Improbable.SpatialOS.Deployment.V1Beta1.CreateTimePropertyFilter subBuilder = new global::Improbable.SpatialOS.Deployment.V1Beta1.CreateTimePropertyFilter();
            if (filterTypeCase_ == FilterTypeOneofCase.CreateTimePropertyFilter) {
              subBuilder.MergeFrom(CreateTimePropertyFilter);
            }
            input.ReadMessage(subBuilder);
            CreateTimePropertyFilter = subBuilder;
            break;
          }
          case 34: {
            global::Improbable.SpatialOS.Deployment.V1Beta1.StoppedTimePropertyFilter subBuilder = new global::Improbable.SpatialOS.Deployment.V1Beta1.StoppedTimePropertyFilter();
            if (filterTypeCase_ == FilterTypeOneofCase.StoppedTimePropertyFilter) {
              subBuilder.MergeFrom(StoppedTimePropertyFilter);
            }
            input.ReadMessage(subBuilder);
            StoppedTimePropertyFilter = subBuilder;
            break;
          }
          case 42: {
            global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentNamePropertyFilter subBuilder = new global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentNamePropertyFilter();
            if (filterTypeCase_ == FilterTypeOneofCase.DeploymentNamePropertyFilter) {
              subBuilder.MergeFrom(DeploymentNamePropertyFilter);
            }
            input.ReadMessage(subBuilder);
            DeploymentNamePropertyFilter = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class StoppedStatusPropertyFilter : pb::IMessage<StoppedStatusPropertyFilter> {
    private static readonly pb::MessageParser<StoppedStatusPropertyFilter> _parser = new pb::MessageParser<StoppedStatusPropertyFilter>(() => new StoppedStatusPropertyFilter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StoppedStatusPropertyFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoppedStatusPropertyFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoppedStatusPropertyFilter(StoppedStatusPropertyFilter other) : this() {
      stoppedStatus_ = other.stoppedStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoppedStatusPropertyFilter Clone() {
      return new StoppedStatusPropertyFilter(this);
    }

    /// <summary>Field number for the "stopped_status" field.</summary>
    public const int StoppedStatusFieldNumber = 1;
    private global::Improbable.SpatialOS.Deployment.V1Beta1.StoppedStatusPropertyFilter.Types.StoppedStatus stoppedStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Deployment.V1Beta1.StoppedStatusPropertyFilter.Types.StoppedStatus StoppedStatus {
      get { return stoppedStatus_; }
      set {
        stoppedStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StoppedStatusPropertyFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StoppedStatusPropertyFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StoppedStatus != other.StoppedStatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StoppedStatus != 0) hash ^= StoppedStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StoppedStatus != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StoppedStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StoppedStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StoppedStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StoppedStatusPropertyFilter other) {
      if (other == null) {
        return;
      }
      if (other.StoppedStatus != 0) {
        StoppedStatus = other.StoppedStatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            stoppedStatus_ = (global::Improbable.SpatialOS.Deployment.V1Beta1.StoppedStatusPropertyFilter.Types.StoppedStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StoppedStatusPropertyFilter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum StoppedStatus {
        [pbr::OriginalName("ALL_DEPLOYMENTS")] AllDeployments = 0,
        [pbr::OriginalName("STOPPED_DEPLOYMENTS")] StoppedDeployments = 1,
        [pbr::OriginalName("NOT_STOPPED_DEPLOYMENTS")] NotStoppedDeployments = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// 'Equal' will return all deployments matching the name exactly.
  /// 'Contains' will return deployments that match the supplied substring.
  /// 'Not Contains' is the logical not of 'Contains'.
  /// </summary>
  public sealed partial class DeploymentNamePropertyFilter : pb::IMessage<DeploymentNamePropertyFilter> {
    private static readonly pb::MessageParser<DeploymentNamePropertyFilter> _parser = new pb::MessageParser<DeploymentNamePropertyFilter>(() => new DeploymentNamePropertyFilter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeploymentNamePropertyFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeploymentNamePropertyFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeploymentNamePropertyFilter(DeploymentNamePropertyFilter other) : this() {
      operator_ = other.operator_;
      deploymentName_ = other.deploymentName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeploymentNamePropertyFilter Clone() {
      return new DeploymentNamePropertyFilter(this);
    }

    /// <summary>Field number for the "operator" field.</summary>
    public const int OperatorFieldNumber = 1;
    private global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentNamePropertyFilter.Types.Operator operator_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentNamePropertyFilter.Types.Operator Operator {
      get { return operator_; }
      set {
        operator_ = value;
      }
    }

    /// <summary>Field number for the "deployment_name" field.</summary>
    public const int DeploymentNameFieldNumber = 2;
    private string deploymentName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeploymentName {
      get { return deploymentName_; }
      set {
        deploymentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeploymentNamePropertyFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeploymentNamePropertyFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Operator != other.Operator) return false;
      if (DeploymentName != other.DeploymentName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Operator != 0) hash ^= Operator.GetHashCode();
      if (DeploymentName.Length != 0) hash ^= DeploymentName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Operator != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Operator);
      }
      if (DeploymentName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeploymentName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Operator != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operator);
      }
      if (DeploymentName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeploymentName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeploymentNamePropertyFilter other) {
      if (other == null) {
        return;
      }
      if (other.Operator != 0) {
        Operator = other.Operator;
      }
      if (other.DeploymentName.Length != 0) {
        DeploymentName = other.DeploymentName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            operator_ = (global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentNamePropertyFilter.Types.Operator) input.ReadEnum();
            break;
          }
          case 18: {
            DeploymentName = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DeploymentNamePropertyFilter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Operator {
        [pbr::OriginalName("EQUAL")] Equal = 0,
        [pbr::OriginalName("CONTAINS")] Contains = 1,
        [pbr::OriginalName("NOT_CONTAINS")] NotContains = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// 'Equal' will return all deployments that have at least one tag matching the provided string.
  /// 'Contains' will return all deployments that have at least one tag matching the provided substring.
  /// 'Not Contains' is the logical not of 'Contains'.
  /// </summary>
  public sealed partial class TagsPropertyFilter : pb::IMessage<TagsPropertyFilter> {
    private static readonly pb::MessageParser<TagsPropertyFilter> _parser = new pb::MessageParser<TagsPropertyFilter>(() => new TagsPropertyFilter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TagsPropertyFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TagsPropertyFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TagsPropertyFilter(TagsPropertyFilter other) : this() {
      operator_ = other.operator_;
      tag_ = other.tag_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TagsPropertyFilter Clone() {
      return new TagsPropertyFilter(this);
    }

    /// <summary>Field number for the "operator" field.</summary>
    public const int OperatorFieldNumber = 1;
    private global::Improbable.SpatialOS.Deployment.V1Beta1.TagsPropertyFilter.Types.Operator operator_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Deployment.V1Beta1.TagsPropertyFilter.Types.Operator Operator {
      get { return operator_; }
      set {
        operator_ = value;
      }
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 2;
    private string tag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TagsPropertyFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TagsPropertyFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Operator != other.Operator) return false;
      if (Tag != other.Tag) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Operator != 0) hash ^= Operator.GetHashCode();
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Operator != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Operator);
      }
      if (Tag.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Tag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Operator != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operator);
      }
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TagsPropertyFilter other) {
      if (other == null) {
        return;
      }
      if (other.Operator != 0) {
        Operator = other.Operator;
      }
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            operator_ = (global::Improbable.SpatialOS.Deployment.V1Beta1.TagsPropertyFilter.Types.Operator) input.ReadEnum();
            break;
          }
          case 18: {
            Tag = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TagsPropertyFilter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Operator {
        [pbr::OriginalName("EQUAL")] Equal = 0,
        [pbr::OriginalName("CONTAINS")] Contains = 1,
        [pbr::OriginalName("NOT_CONTAINS")] NotContains = 2,
      }

    }
    #endregion

  }

  public sealed partial class CreateTimePropertyFilter : pb::IMessage<CreateTimePropertyFilter> {
    private static readonly pb::MessageParser<CreateTimePropertyFilter> _parser = new pb::MessageParser<CreateTimePropertyFilter>(() => new CreateTimePropertyFilter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateTimePropertyFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTimePropertyFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTimePropertyFilter(CreateTimePropertyFilter other) : this() {
      operator_ = other.operator_;
      CreateTime = other.createTime_ != null ? other.CreateTime.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTimePropertyFilter Clone() {
      return new CreateTimePropertyFilter(this);
    }

    /// <summary>Field number for the "operator" field.</summary>
    public const int OperatorFieldNumber = 1;
    private global::Improbable.SpatialOS.Deployment.V1Beta1.CreateTimePropertyFilter.Types.Operator operator_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Deployment.V1Beta1.CreateTimePropertyFilter.Types.Operator Operator {
      get { return operator_; }
      set {
        operator_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateTimePropertyFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateTimePropertyFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Operator != other.Operator) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Operator != 0) hash ^= Operator.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Operator != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Operator);
      }
      if (createTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CreateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Operator != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operator);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateTimePropertyFilter other) {
      if (other == null) {
        return;
      }
      if (other.Operator != 0) {
        Operator = other.Operator;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            operator_ = (global::Improbable.SpatialOS.Deployment.V1Beta1.CreateTimePropertyFilter.Types.Operator) input.ReadEnum();
            break;
          }
          case 18: {
            if (createTime_ == null) {
              createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(createTime_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CreateTimePropertyFilter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Operator {
        [pbr::OriginalName("EQUAL")] Equal = 0,
        [pbr::OriginalName("LESS_THAN")] LessThan = 1,
        [pbr::OriginalName("LESS_THAN_OR_EQUAL")] LessThanOrEqual = 2,
        [pbr::OriginalName("GREATER_THAN")] GreaterThan = 3,
        [pbr::OriginalName("GREATER_THAN_OR_EQUAL")] GreaterThanOrEqual = 4,
      }

    }
    #endregion

  }

  public sealed partial class StoppedTimePropertyFilter : pb::IMessage<StoppedTimePropertyFilter> {
    private static readonly pb::MessageParser<StoppedTimePropertyFilter> _parser = new pb::MessageParser<StoppedTimePropertyFilter>(() => new StoppedTimePropertyFilter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StoppedTimePropertyFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.Deployment.V1Beta1.DeploymentReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoppedTimePropertyFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoppedTimePropertyFilter(StoppedTimePropertyFilter other) : this() {
      operator_ = other.operator_;
      StoppedTime = other.stoppedTime_ != null ? other.StoppedTime.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoppedTimePropertyFilter Clone() {
      return new StoppedTimePropertyFilter(this);
    }

    /// <summary>Field number for the "operator" field.</summary>
    public const int OperatorFieldNumber = 1;
    private global::Improbable.SpatialOS.Deployment.V1Beta1.StoppedTimePropertyFilter.Types.Operator operator_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.Deployment.V1Beta1.StoppedTimePropertyFilter.Types.Operator Operator {
      get { return operator_; }
      set {
        operator_ = value;
      }
    }

    /// <summary>Field number for the "stopped_time" field.</summary>
    public const int StoppedTimeFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp stoppedTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StoppedTime {
      get { return stoppedTime_; }
      set {
        stoppedTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StoppedTimePropertyFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StoppedTimePropertyFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Operator != other.Operator) return false;
      if (!object.Equals(StoppedTime, other.StoppedTime)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Operator != 0) hash ^= Operator.GetHashCode();
      if (stoppedTime_ != null) hash ^= StoppedTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Operator != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Operator);
      }
      if (stoppedTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StoppedTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Operator != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operator);
      }
      if (stoppedTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StoppedTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StoppedTimePropertyFilter other) {
      if (other == null) {
        return;
      }
      if (other.Operator != 0) {
        Operator = other.Operator;
      }
      if (other.stoppedTime_ != null) {
        if (stoppedTime_ == null) {
          stoppedTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StoppedTime.MergeFrom(other.StoppedTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            operator_ = (global::Improbable.SpatialOS.Deployment.V1Beta1.StoppedTimePropertyFilter.Types.Operator) input.ReadEnum();
            break;
          }
          case 18: {
            if (stoppedTime_ == null) {
              stoppedTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(stoppedTime_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StoppedTimePropertyFilter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Operator {
        [pbr::OriginalName("EQUAL")] Equal = 0,
        [pbr::OriginalName("LESS_THAN")] LessThan = 1,
        [pbr::OriginalName("LESS_THAN_OR_EQUAL")] LessThanOrEqual = 2,
        [pbr::OriginalName("GREATER_THAN")] GreaterThan = 3,
        [pbr::OriginalName("GREATER_THAN_OR_EQUAL")] GreaterThanOrEqual = 4,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
